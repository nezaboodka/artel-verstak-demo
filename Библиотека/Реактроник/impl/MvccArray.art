
import JS = Artel.JavaScript

external
{
  // MvccArray

  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden
  type MvccArray<T> = object MvccObject
  {
    on create(isObservable: YesNo, array: Array<T>)

    operation getItem(n: Integer): T

    operation setItem(n: Integer, item: T)

    operation toString(): Text

    operation toLocaleString(): Text

    operation pop(): T?

    #JS.МассивПараметров
    operation push(items: List<T>): Число

    #JS.МассивПараметров
    operation concat(items: List<T>): List<T>

    // #JS.МассивПараметров
    // operation concat(items: List<ConcatArray<T>>): List<T>

    // #JS.МассивПараметров
    // operation concat(items: List<ConcatArray<T>>): List<T>

    operation join(separator: Text? = none): Text

    operation reverse(): List<T>

    operation shift(): T?

    operation slice(start: Число? = none, end: Число? = none): List<T>

    operation sort(compareFn: operation(a: T, b: T): Число?)

    operation splice(start: Число, deleteCount: Число? = none): List<T>

    #JS.МассивПараметров
    operation splice(start: Число, deleteCount: Число, items: List<T>): List<T>

    #JS.МассивПараметров
    operation splice(start: Число, deleteCount: Число, items: List<T>): List<T>

    #JS.МассивПараметров
    operation unshift(items: List<T>): Число

    operation includes(searchElement: T, fromIndex: Число? = none): YesNo

    operation indexOf(searchElement: T, fromIndex: Число? = none): Число

    operation lastIndexOf(searchElement: T, fromIndex: Число? = none): Число

    operation every(predicate: operation(value: T, index: Число, array: List<T>): /*(!) unknown */ Object?, thisArg: /*(!) any */ Object? = none): YesNo

    operation every<S = T>(predicate: operation(value: T, index: Число, array: List<T>): /*(!) value is */ S, thisArg: /*(!) any */ Object? = none): /*(!) this is */ List<S>

    operation every(predicate: operation(value: T, index: Число, array: List<T>): /*(!) any */ Object?, thisArg: /*(!) any */ Object? = none): /*(!) any */ Object?

    operation some(predicate: operation(value: T, index: Число, array: List<T>): /*(!) unknown */ Object?, thisArg: /*(!) any */ Object? = none): YesNo

    operation forEach(callbackfn: operation(value: T, index: Число, array: List<T>): None, thisArg: /*(!) any */ Object? = none)

    operation map<U>(callbackfn: operation(value: T, index: Число, array: List<T>): U, thisArg: /*(!) any */ Object? = none): List<U>

    operation filter(predicate: operation(value: T, index: Число, array: List<T>): /*(!) unknown */ Object?, thisArg: /*(!) any */ Object? = none): List<T>

    operation filter<S = T>(predicate: operation(value: T, index: Число, array: List<T>): /*(!) value is */ S, thisArg: /*(!) any */ Object? = none): List<S>

    operation filter(predicate: operation(value: T, index: Число, array: List<T>): /*(!) any */ Object?, thisArg: /*(!) any */ Object? = none): List</*(!) any */ Object?>

    operation reduce(callbackfn: operation(previousValue: T, currentValue: T, currentIndex: Число, array: List<T>): T): T

    operation reduce(callbackfn: operation(previousValue: T, currentValue: T, currentIndex: Число, array: List<T>): T, initialValue: T): T

    operation reduce<U>(callbackfn: operation(previousValue: U, currentValue: T, currentIndex: Число, array: List<T>): U, initialValue: U): U

    operation reduce(callbackfn: operation(previousValue: /*(!) any */ Object?, currentValue: T, currentIndex: Число, array: List<T>): /*(!) any */ Object?, initialValue: /*(!) any */ Object? = none): /*(!) any */ Object?

    operation reduceRight(callbackfn: operation(previousValue: T, currentValue: T, currentIndex: Число, array: List<T>): T): T

    operation reduceRight(callbackfn: operation(previousValue: T, currentValue: T, currentIndex: Число, array: List<T>): T, initialValue: T): T

    operation reduceRight<U>(callbackfn: operation(previousValue: U, currentValue: T, currentIndex: Число, array: List<T>): U, initialValue: U): U

    operation reduceRight(callbackfn: operation(previousValue: /*(!) any */ Object?, currentValue: T, currentIndex: Число, array: List<T>): /*(!) any */ Object?, initialValue: /*(!) any */ Object? = none): /*(!) any */ Object?

    operation find<S = T>(predicate: operation(this: None, value: T, index: Integer, obj: List<T>): /*(!) value is */ S, thisArg: /*(!) any */ Object? = none): S?

    operation findIndex(predicate: operation(value: T, index: Integer, obj: List<T>): /*(!) unknown */ Object?, thisArg: /*(!) any */ Object? = none): Число

    operation fill(value: T, start: Integer? = none, end: Integer? = none): /*(!) any */ Object?

    operation copyWithin(target: Integer, start: Integer, end: Integer? = none): /*(!) any */ Object?

    // operation [Symbol.iterator](): IterableIterator<T>

    // operation entries(): IterableIterator<Object { _0: Число, _1: T }>

    // operation keys(): IterableIterator<Integer>

    // operation values(): IterableIterator<T>

    length: Integer

    guarded
    mutable: Array<T>
  }

  // TransactionalArray

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type TransactionalArray<T> = object MvccArray<T>
  {
    on create()

    on create(arrayLength: Число)

    on create(arrayLength: Число? = none)

    #JS.МассивПараметров
    on create(items: List<T>)

    on create(args: Object? = none)
  }

  // ObservableArray

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type ObservableArray<T> = object MvccArray<T>
  {
    on create()

    on create(arrayLength: Число)

    on create(arrayLength: Число? = none)

    #JS.МассивПараметров
    on create(items: List<T>)

    on create(args: Object? = none)
  }
}
