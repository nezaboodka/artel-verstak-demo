
import JS = Artel.JavaScript

external
{
  type F<T> = operation (): T

  // Transaction

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type Transaction = /*(!) abstract */ object Worker
  {
    guarded /*(!) abstract */
    {
      id: Integer

      hint: Текст

      options: SnapshotOptions

      timestamp: Integer

      error`: Error?

      changeset: Changeset

      margin: Integer
    }

    // #js.МассивПараметров
    // /*(!) abstract */ 
    // operation run<T>(func: F<T>, args: Array<Object?>): T

    #JS.МассивПараметров
    /*(!) abstract */ 
    operation inspect<T>(func: F<T>, args: Array<Object?>): T

    /*(!) abstract */ 
    operation apply()

    /*(!) abstract */ 
    operation seal(): Object?

    /*(!) abstract */ 
    operation wrap<T>(func: F<T>, secondary: YesNo): F<T>

    /*(!) abstract */ 
    operation cancel(error`: Error, retryAfterOrIgnore: Worker? = empty): Object?

    guarded /*(!) abstract */
    {
      isCanceled: YesNo

      isFinished: YesNo
    }

    parallel
    operation whenFinished(): Promise<Empty>

    global 
    operation create(options: SnapshotOptions?): Transaction

    #JS.МассивПараметров
    global 
    operation run<T>(options: SnapshotOptions?, func: operation (): T, args: Array<Object?>): T

    #JS.МассивПараметров
    global 
    operation separate<T>(func: F<T>, args: Array<Object?>): T

    #JS.МассивПараметров
    global 
    operation outside<T>(func: F<T>, args: Array<Object?>): T

    global 
    operation isFrameOver(everyN: Integer = 1, timeLimit: Integer = 10): YesNo

    global 
    operation requestNextFrame(sleepTime: Integer = 0): Promise<Nothing>

    guarded
    {
      current: Transaction

      isCanceled: YesNo
    }
  }
}
