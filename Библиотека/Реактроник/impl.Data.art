
import JS = Artel.JavaScript

external
{
  #JS.ВнешняяРеализация(модуль = "reactronic")
  type AbstractChangeset = aspect
  {
    guarded
    {
      id: Integer

      hint: Text

      timestamp: Integer

      sealed: YesNo
    }
  }

  // ObservableValue & Observer

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type ObservableValue = object
  {
    content: Object?

    observers: Set<Observer>?

    при создании(content: Object?)

    guarded
    {
      isOperation: YesNo

      originSnapshotId: Integer?
    }
  }

  // #js.ВнешняяРеализация(модуль = "reactronic")
  type SeparationMode = YesNo // | "isolated" | "disposal"

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type Observer = aspect
  {
    guarded
    {
      order: Integer

      observables: Map<ObservableValue, Subscription>?

      obsoleteSince: Integer
    }

    операция hint(nop: YesNo? = empty): Text

    операция markObsoleteDueTo(observable`: ObservableValue, m: MemberName, changeset: AbstractChangeset, h: ObjectHandle, outer: Text, since: Integer, reactive`: Array<Observer>)

    операция runIfNotUpToDate(now: YesNo, nothrow: YesNo)

  }

  type MemberName = Text // PropertyKey

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type Subscription = aspect
  {
    guarded
    {
      memberHint: Text

      usageCount: Integer
    }
  }

  //// ObjectSnapshot

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type ObjectSnapshot = object
  {
    guarded
    {
      changeset: AbstractChangeset

      former: object { snapshot: ObjectSnapshot }

      data: /*(!) any */ Object?

      changes: Set<MemberName>

      conflicts: Map<MemberName, ObjectSnapshot>

      revision: Integer
    }

    disposed: YesNo

    при создании(changeset: AbstractChangeset, former: ObjectSnapshot?, data: Object)
  }

  // ObjectHandle

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type ObjectHandle = object
  {
    guarded
    {
      id: Integer

      data: Object?

      proxy: Object?
    }

    head: ObjectSnapshot

    editing: ObjectSnapshot?

    editors: Integer

    hint: Text

    // при создании(data: Object?, proxy: Object?, handler: ProxyHandler<ObjectHandle>, head: ObjectSnapshot, hint: Text)

    static 
    operation getHint(obj: Object, full: YesNo): Text?
  }

  // PatchSet & ObjectPatch

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type PatchSet = Map<Object, Map<MemberName, ValuePatch>>

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type ValuePatch = aspect
  {
    memberName: MemberName

    patchKind: Text // "update" | "add" | "remove"

    freshValue: Object?

    formerValue: Object?
  }
}
