import Artel
import js = Artel.JavaScript

external
{
  #js.ВнешняяРеализация(модуль = "reactronic")
  type AbstractChangeset = aspect
  {
    protected
    id: Integer

    protected
    hint: Text

    protected
    timestamp: Integer

    protected
    sealed: YesNo

  }

  // ObservableValue & Observer

  #js.ВнешняяРеализация(модуль = "reactronic")
  type ObservableValue = object
  {
    content: Object?

    observers: Set<Observer>?

    при создании(content: Object?)

    protected
    isOperation: YesNo

    protected
    originSnapshotId: Integer?
  }

  // #js.ВнешняяРеализация(модуль = "reactronic")
  // type SeparationMode = YesNo | "isolated" | "disposal"

  #js.ВнешняяРеализация(модуль = "reactronic")
  type Observer = aspect
  {
    protected
    order: Integer

    protected
    observables: Map<ObservableValue, Subscription>?

    protected
    obsoleteSince: Integer

    операция hint(nop: YesNo? = empty): Text

    операция markObsoleteDueTo(observable`: ObservableValue, m: MemberName, changeset: AbstractChangeset, h: ObjectHandle, outer: Text, since: Integer, reactive`: Array<Observer>)

    операция runIfNotUpToDate(now: YesNo, nothrow: YesNo)

  }

  type MemberName = Text // PropertyKey

  #js.ВнешняяРеализация(модуль = "reactronic")
  type Subscription = aspect
  {
    protected
    memberHint: Text

    protected
    usageCount: Integer

  }

  //// ObjectSnapshot

  #js.ВнешняяРеализация(модуль = "reactronic")
  type ObjectSnapshot = object
  {
    protected
    changeset: AbstractChangeset

    protected
    former: object { snapshot: ObjectSnapshot }

    protected
    data: /*(!) any */ Object?

    protected
    changes: Set<MemberName>

    protected
    conflicts: Map<MemberName, ObjectSnapshot>

    при создании(changeset: AbstractChangeset, former: ObjectSnapshot?, data: Object)

    protected
    revision: Integer

    disposed: YesNo
  }

  // ObjectHandle

  #js.ВнешняяРеализация(модуль = "reactronic")
  type ObjectHandle = object
  {
    protected
    id: Integer

    protected
    data: Object?

    protected
    proxy: Object?

    head: ObjectSnapshot

    editing: ObjectSnapshot?

    editors: Integer

    hint: Text

    при создании(data: Object?, proxy: Object?, handler: ProxyHandler<ObjectHandle>, head: ObjectSnapshot, hint: Text)

    глобальный 
    операция getHint(obj: Object, full: YesNo): Text?
  }

  // PatchSet & ObjectPatch

  #js.ВнешняяРеализация(модуль = "reactronic")
  type PatchSet = Map<Object, Map<MemberName, ValuePatch>>

  #js.ВнешняяРеализация(модуль = "reactronic")
  type ValuePatch = aspect
  {
    memberName: MemberName

    patchKind: Text // "update" | "add" | "remove"

    freshValue: Object?

    formerValue: Object?
  }
}
