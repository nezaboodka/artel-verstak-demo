
import JS = Artel.JavaScript

type MergeListResolution = aspect
{
  isDuplicate: YesNo
}

external
{
  // GetMergeItemKey

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type GetMergeItemKey<T> = operation(item: T): Text?

  // MergeListReader

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type MergeListReader<T> = aspect
  {
    guarded
    {
      isStrict: YesNo

      count: Integer

      addedCount: Integer

      removedCount: Integer

      isMergeInProgress: YesNo
    }

    operation lookup(key: Text): MergeItem<T>?

    operation claim(key: Text): MergeItem<T>?

    operation add(instance: T): MergeItem<T>

    operation remove(item: MergeItem<T>)

    operation move(item: MergeItem<T>, after: MergeItem<T>)

    operation beginMerge()

    operation endMerge(err`: Object? = none)

    operation resetAddedAndRemovedLists()

    operation lastClaimedItem(): MergeItem<T>?

    operation items(): Enumerable<MergeItem<T>>

    operation addedItems(reset: YesNo? /*(!)= none*/): Enumerable<MergeItem<T>>

    operation removedItems(reset: YesNo? /*(!)= none*/): Enumerable<MergeItem<T>>

    operation isAdded(item: MergeItem<T>): YesNo

    operation isMoved(item: MergeItem<T>): YesNo

    operation isRemoved(item: MergeItem<T>): YesNo

    operation isCurrent(item: MergeItem<T>): YesNo

  }

  // MergeItem

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type MergeItem<T> = aspect
  {
    guarded
    {
      instance: T

      prev: MergeItem<T>
    }

    aux: MergeItem<T>
  }

  // MergeList

  #JS.ВнешняяРеализация(модуль = "reactronic")
  type MergeList<T> = object MergeListReader<T>
  {
    guarded
    getKey: GetMergeItemKey<T>

    on create(getKey: GetMergeItemKey<T>, strict: YesNo = no)

    operation lookup(key: Text?): MergeItem<T>?

    operation claim(key: Text, resolution: MergeListResolution? = none, err: Text? = none): MergeItem<T>?

    operation add(instance: T): MergeItem<T>

    operation remove(item: MergeItem<T>)

    operation move(item: MergeItem<T>, after: MergeItem<T>)

    operation beginMerge()

    operation endMerge(err: Object? = none)

    operation resetAddedAndRemovedLists()

    operation lastClaimedItem(): MergeItem<T>?

    operation items(): Enumerable<MergeItem<T>>

    operation addedItems(reset: YesNo? = none): Enumerable<MergeItem<T>>

    operation removedItems(reset: YesNo? = none): Enumerable<MergeItem<T>>

    operation isAdded(item: MergeItem<T>): YesNo

    operation isMoved(item: MergeItem<T>): YesNo

    operation isRemoved(item: MergeItem<T>): YesNo

    operation isCurrent(item: MergeItem<T>): YesNo

    operation markAsMoved(item: MergeItem<T>)

    global 
    operation createMergeItem<T>(instance: T): MergeItem<T>

    isStrict: YesNo

    guarded
    {
      count: Integer

      addedCount: Integer

      removedCount: Integer

      isMergeInProgress: YesNo
    }
  }
}
