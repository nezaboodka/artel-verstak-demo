
import JS = Artel.JavaScript

external
{
  type GetMergedItemKey<T> = operation(item: T): Text?


  type MergeListReader<T> = aspect
  {
    guarded
    is-strict: YesNo

    guarded
    count: Number

    guarded
    added-count: Number

    guarded
    removed-count: Number

    guarded
    is-merge-in-progress: YesNo

    operation lookup(key: Text): MergedItem<T>?

    operation try-merge-as-existing(key: Text): MergedItem<T>?

    operation merge-as-added(instance: T): MergedItem<T>

    operation merge-as-removed(item: MergedItem<T>)

    operation move(item: MergedItem<T>, after: MergedItem<T>)

    operation begin-merge()

    operation end-merge(error`: Object? = none)

    operation reset-added-and-removed-lists()

    operation last-merged-item(): MergedItem<T>?

    operation items(only-after: MergedItem<T>? = none): Enumerable<MergedItem<T>>

    operation added-items(reset: YesNo? = none): Enumerable<MergedItem<T>>

    operation removed-items(reset: YesNo? = none): Enumerable<MergedItem<T>>

    operation is-added(item: MergedItem<T>): YesNo

    operation is-moved(item: MergedItem<T>): YesNo

    operation is-removed(item: MergedItem<T>): YesNo

    operation is-actual(item: MergedItem<T>): YesNo
  }


  type MergedItem<T> = aspect
  {
    guarded
    instance: T

    guarded
    index: Integer

    guarded
    next: MergedItem<T>?

    guarded
    prev: MergedItem<T>?

    aux: MergedItem<T>
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type MergeList<T> = object MergeListReader<T>
  {
    guarded
    get-key: GetMergedItemKey<T>

    // hidden
    // strict
  
    // hidden
    // map
  
    // hidden
    // tag
  
    // hidden
    // current
  
    // hidden
    // added
  
    // hidden
    // removed
  
    // hidden
    // lastNotFoundKey
  
    // hidden
    // strictNextItem?
  
    on create(get-key: GetMergedItemKey<T>, strict: YesNo = no)

    is-strict: YesNo

    guarded
    count: Number

    guarded
    added-count: Number

    guarded
    removed-count: Number

    guarded
    is-merge-in-progress: YesNo

    operation lookup(key: Text?): MergedItem<T>?

    operation try-merge-as-existing(key: Text, resolution: object { isDuplicate: YesNo } | None = none, error`: Text? = none): MergedItem<T>?

    operation merge-as-added(instance: T): MergedItem<T>

    operation merge-as-removed(item: MergedItem<T>)

    operation move(item: MergedItem<T>, after: MergedItem<T>)

    operation begin-merge()

    operation end-merge(err: Object? = none)

    operation reset-added-and-removed-lists()

    operation last-merged-item(): MergedItem<T>?

    operation items(): Enumerable<MergedItem<T>>

    operation added-items(reset: YesNo? = none): Enumerable<MergedItem<T>>

    operation removed-items(reset: YesNo? = none): Enumerable<MergedItem<T>>

    operation is-added(item: MergedItem<T>): YesNo

    operation is-moved(item: MergedItem<T>): YesNo

    operation is-removed(item: MergedItem<T>): YesNo

    operation is-actual(item: MergedItem<T>): YesNo

    operation mark-as-moved(item: MergedItem<T>)

    global 
    operation create-item<T>(instance: T): MergedItem<T>
  }
}
