
import JS = Artel.JavaScript

external
{
  type F<T> = operation(): T


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  type Utils = object
  {
    global
    operation freezeSet<T>(obj: Set<T>? = none): Set<T>?

    global
    operation freezeMap<K, V>(obj: Map<K, V>? = none): Map<K, V>?

    global
    operation copyAllMembers(source: Object?, target: Object?): Object?
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  operation UNDEF(args: JS.МассивПараметров<Object>)

  #JS.ВнешняяРеализация(модуль = "reactronic")
  async
  operation all(promises: Array<JS.Promise<Object?>>): JS.Promise<List<Object?>>

  #JS.ВнешняяРеализация(модуль = "reactronic")
  async
  operation pause(timeout: Integer)

  hidden (in package)
  operation emitLetters(n: Number): Text

  hidden (in package)
  operation objectHasMember<T>(obj: Object?, member: Text): T // obj is T

  hidden (in package)
  operation getCallerInfo(prefix: Text): Text
}
