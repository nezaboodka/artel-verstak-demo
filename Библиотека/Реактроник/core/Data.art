
import JS = Artel.JavaScript

external
{
  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  type AbstractChangeset = aspect
  {
    guarded
    id: Number

    guarded
    hint: Text

    guarded
    timestamp: Number

    guarded
    sealed: YesNo
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  type ValueSnapshot<T = Object?> = object
  {
    content: T

    observers: Set<Observer>?

    guarded
    is-operation: YesNo

    guarded
    origin-snapshot-id: Number?

    on create(content: T)
  }


  hidden (in package)
  type SeparationMode = YesNo // | "isolated" | "disposal"


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  type Observer = aspect
  {
    guarded
    order: Number

    guarded
    observables: Map<ValueSnapshot, Subscription>?

    guarded
    obsolete-since: Number

    операция hint(nop: YesNo? = none): Text

    операция mark-obsolete-due-to(observable`: ValueSnapshot, m: MemberName, changeset: AbstractChangeset, h: ObjectHandle, outer: Text, since: Number, reactive`: Array<Observer>)

    операция run-if-not-up-to-date(now: YesNo, nothrow: YesNo)

  }


  hidden (in package)
  type MemberName = Text /*(!) PropertyKey*/


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  type Subscription = aspect
  {
    guarded
    member-hint: Text

    guarded
    usage-count: Number
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  type ObjectSnapshot = object
  {
    guarded
    changeset: AbstractChangeset

    guarded
    former: object
    {
      snapshot: ObjectSnapshot
    }

    guarded
    data: Object?

    guarded
    changes: Set<MemberName>

    guarded
    conflicts: Map<MemberName, ObjectSnapshot>

    guarded
    revision: Number

    disposed: YesNo

    при создании(changeset: AbstractChangeset, former: ObjectSnapshot?, data: Object)
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  type ObjectHandle = object
  {
    // hidden global
    // generator

    guarded
    id: Number

    guarded
    data: Object?

    guarded
    proxy: Object?

    head: ObjectSnapshot

    editing: ObjectSnapshot?

    editors: Number

    hint: Text

    при создании(data: Object?, proxy: Object?, handler: Object? /*(!)ProxyHandler<ObjectHandle>*/, head: ObjectSnapshot, hint: Text)

    global
    operation getHint(obj: Object, full: YesNo): Text?
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  type PatchSet = Map<Object, Map<MemberName, ValuePatch>>


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden (in package)
  type ValuePatch = aspect
  {
    member-mame: MemberName

    patchKind: Text /*(!)variant
    {
      update = "update"
      add = "add"
      remove = "remove"
    }*/

    fresh-value: Object?

    former-value: Object?
  }
}
