
import JS = Artel.JavaScript

external
{
  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden by package
  const MAX_REVISION: Number


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden by package
  const UNDEFINED_REVISION: Number


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type Changeset = object AbstractChangeset
  {
    global
    idGen: Number

    // hidden global
    // stampGen

    // hidden global
    // pending

    // hidden global
    // oldest

    global
    garbageCollectionSummaryInterval: Number

    global
    lastGarbageCollectionSummaryTimestamp: Number

    global
    totalObjectHandleCount: Number

    global
    totalObjectSnapshotCount: Number
  
    guarded
    id: Number

    guarded
    options: SnapshotOptions

    guarded
    hint: Text

    guarded
    timestamp: Number

    // hidden revision

    // hidden bumper

    items: Map<ObjectHandle, ObjectSnapshot>

    obsolete: List<Observer>

    sealed: YesNo

    on create(options: SnapshotOptions? /*(!) | JS.Null*/)
  
    global
    current: operation(): Changeset

    global
    edit: operation(): Changeset

    global
    markUsed: operation(observable`: ValueSnapshot, os: ObjectSnapshot, m: MemberName, h: ObjectHandle, kind: Kind, weak: YesNo)

    global
    markEdited: operation(oldValue: Object?, newValue: Object?, edited: YesNo, os: ObjectSnapshot, m: MemberName, h: ObjectHandle)

    global
    isConflicting: operation(oldValue: Object?, newValue: Object?): YesNo

    global
    propagateAllChangesThroughSubscriptions: operation(changeset: Changeset)

    global
    revokeAllSubscriptions: operation(changeset: Changeset)

    global
    enqueueReactiveFunctionsToRun: operation(reactive: Array<Observer>)

    operation lookupObjectSnapshot(h: ObjectHandle, m: MemberName): ObjectSnapshot

    operation getObjectSnapshot(h: ObjectHandle, m: MemberName): ObjectSnapshot

    operation getEditableObjectSnapshot(h: ObjectHandle, m: MemberName, value: Object?, token: Object? = none): ObjectSnapshot

    global
    operation takeSnapshot<T>(obj: T): T

    global
    operation dispose`(obj: Object?)

    global
    operation doDispose(ctx: Changeset, h: ObjectHandle): ObjectSnapshot
  
    // hidden isNewSnapshotRequired

    operation acquire(outer: Changeset)

    operation bumpBy(timestamp: Number)

    operation rebase(): List<ObjectSnapshot>?

    // hidden merge

    operation applyOrDiscard(error`: Object? = none): Array<Observer>

    global
    operation sealObjectSnapshot(h: ObjectHandle, os: ObjectSnapshot)

    global
    operation sealObservableValue(o: ValueSnapshot | JS.Symbol, m: MemberName, typeName: Text)

    global
    operation freezeObjectSnapshot(os: ObjectSnapshot): ObjectSnapshot

    operation triggerGarbageCollection()

    // hidden
    // unlinkHistory

    global
    operation _init()
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden by package
  type Dump = object
  {
    global
    valueHint: operation(value: Object?): Text

    global
    operation obj(h: ObjectHandle?, m: MemberName? = none, stamp: Number? = none, snapshotId: Number? = none, originSnapshotId: Number? = none, value: Object? = none): Text

    global
    operation snapshot2(h: ObjectHandle, s: AbstractChangeset, m: MemberName? = none, o: ValueSnapshot? = none): Text

    global
    operation snapshot(os: ObjectSnapshot, m: MemberName? = none): Text

    global
    operation conflicts(conflicts: List<ObjectSnapshot>): Text

    global
    operation conflictingMemberHint(m: MemberName, ours: ObjectSnapshot, theirs: ObjectSnapshot): Text
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden by package
  const EMPTY_SNAPSHOT: ObjectSnapshot;


  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden by package
  const DefaultSnapshotOptions: SnapshotOptions;
}
