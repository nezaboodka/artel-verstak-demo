
import JS = Artel.JavaScript

external
{
  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden by package
  type ReactionImpl = object Reaction
  {
    guarded
    object-handle: ObjectHandle

    guarded
    member-name: MemberName

    operation configure(options: PartialMemberOptions): MemberOptions

    guarded
    options: MemberOptions

    guarded
    unobs: Object?
  
    guarded
    args: ListReader<Object?>

    guarded
    result: Object?

    guarded
    error`: YesNo

    guarded
    stamp: Number

    guarded
    is-up-to-date: YesNo

    operation mark-obsolete()

    operation pull-last-result(args: List<Object?>?): Object?

    on create(h: ObjectHandle, m: MemberName)

    operation reuse-or-relaunch(weak: YesNo, args: List<Object?>?): Launch

    global
    operation get-controller-of(method: F<Object?>): AbstractReaction<Object?>;

    global
    operation configure-impl(self: ReactionImpl?, options: PartialMemberOptions): MemberOptions;

    global
    operation proceed-within-given-launch<T>(launch: Launch?, func: F<T>, args: JS.МассивПараметров<Object?>): T;

    global
    operation why(): Text

    global
    operation brief-why(): Text

    global
    operation dependencies(): List<Text>

    // hidden
    // peek

    // hidden
    // use

    // hidden
    // edit

    // hidden
    // acquire-from-snapshot

    // hidden
    // relaunch

    // hidden global
    // static mark-obsolete
  }


  type Launch = object ValueSnapshot, Observer
  {
    global
    current: Launch?

    global
    queued-reactive-functions: List<Observer>

    global
    deferred-reactive-functions: List<Launch>

    guarded
    margin: Number

    guarded
    transaction: Transaction

    guarded
    reaction: ReactionImpl

    guarded
    changeset: AbstractChangeset

    observables: Map<ValueSnapshot, Subscription>?

    options: OptionsImpl;

    cause: Text?

    args: List<Object?>

    result: Object?

    error`: Object?

    started: Number

    obsolete-due-to: Text?

    obsolete-since: Number

    successor: Launch?
   
    on create(reaction: ReactionImpl, changeset: AbstractChangeset, former: Launch | OptionsImpl)

    guarded
    is-operation: YesNo

    guarded
    origin-snapshot-id: Number

    operation hint(): Text

    guarded
    order: Number

    // get ["#this#"](): string;

    operation why(): Text

    operation brief-why(): Text

    operation dependencies(): List<Text>

    operation wrap<T>(func: F<T>): F<T>

    operation proceed(proxy: Object?, args: List<Object?>?)

    operation mark-obsolete-due-to(observable: ValueSnapshot, m: MemberName, changeset: AbstractChangeset, h: ObjectHandle, outer: Text, since: Number, obsolete: List<Observer>)

    operation relaunch-if-not-up-to-date(now: YesNo, nothrow: YesNo)

    operation is-not-up-to-date(): YesNo

    operation reenterOver(head: Launch): Launch // this

    // hidden global
    // proceed

    // hidden enter

    // hidden leave-or-async

    // hidden leave

    // hidden monitor-enter

    // hidden monitor-leave

    // hidden add-to-deferred-reactive-functions

    // hidden global
    // process-deferred-reactive-functions

    // hidden global
    // mark-used

    // hidden global
    // mark-edited

    // hidden global
    // is-conflicting

    // hidden global
    // propagate-all-changes-through-subscriptions

    // hidden global
    // revoke-all-subscriptions

    // hidden global
    // propagate-member-change-through-subscriptions

    // hidden global
    // enqueue-reactive-functions-to-run

    // hidden global
    // process-queued-reactive-functions

    // hidden unsubscribe-from-all-observables

    // hidden subscribe-to

    // hidden global
    // can-subscribe-to

    // hidden global
    // create-operation

    // hidden global
    // remember-operation-options

    global
    operation init()
  }

  hidden by package
  operation resolve-return(value: Object?): Object?

  hidden by package
  operation reject-rethrow(error`: Object?)
}
