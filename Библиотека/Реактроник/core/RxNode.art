
import JS = Artel.JavaScript

external
{
  type Delegate<T> = operation(element: T, base: operation())


  type SimpleDelegate<T = Object?, R = None> = operation(element: T): R


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type Mode = variant
  {
    default = 0
    independentUpdate = 1
    manualMount = 2
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type Priority = variant
  {
    realtime = 0
    normal = 1
    background = 2
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type RxNode<E = Object?> = /*(!) incomplete */ object
  {
    abstract guarded
    key: Text

    abstract guarded
    driver: RxNodeDriver<E>

    abstract guarded
    declaration: RxNodeDecl<E>

    abstract guarded
    level: Number

    abstract guarded
    owner: RxNode

    abstract
    element: E
    
    abstract guarded
    host: RxNode

    abstract guarded
    children: MergeListReader<RxNode>

    abstract guarded
    seat: MergedItem<RxNode<E>>?

    abstract guarded
    stamp: Number

    abstract guarded
    outer: RxNode;

    abstract guarded
    context: RxNodeContext?

    abstract
    priority: Priority?

    abstract
    childrenShuffling: YesNo

    abstract
    strictOrder: YesNo

    abstract
    operation has(mode: Mode): YesNo

    abstract
    operation configureReactronic(options: PartialMemberOptions): MemberOptions
    
    global guarded
    shortFrameDuration // = 16

    global guarded
    longFrameDuration // = 300

    global
    currentUpdatePriority: Priority

    global
    frameDuration: Number

    global
    operation acquire<E = None>(driver: RxNodeDriver<E>, declaration: RxNodeDecl<E>?, preset: RxNodeDecl<E>?): RxNode<E>

    global guarded
    isFirstUpdate: YesNo

    global guarded
    key: Text

    global guarded
    stamp: Number

    global guarded
    triggers: Object?

    global
    priority: Priority

    global
    childrenShuffling: YesNo

    global
    operation triggerUpdate(node: RxNode<Object?>, triggers: Object?)

    global
    operation triggerFinalize(node: RxNode<Object?>)

    global
    operation updateNestedNodesThenDo(action: operation(error`: Object?))

    global
    operation markAsMounted(node: RxNode<Object?>, yes`: YesNo)

    global
    operation findMatchingHost<E = Object?, R = Object?>(node: RxNode<E>, match: SimpleDelegate<RxNode<E>, YesNo>): RxNode<R>?

    global
    operation findMatchingPrevSibling<E = Object?, R = Object?>(node: RxNode<E>, match: SimpleDelegate<RxNode<E>, YesNo>): RxNode<R>?

    global
    operation forEachChildRecursively<E = Object?>(node: RxNode<E>, action: SimpleDelegate<RxNode<E>>)

    global
    operation getDefaultLoggingOptions(): LoggingOptions?

    global
    operation setDefaultLoggingOptions(logging: LoggingOptions?)
  }
}


type RxNodeDecl<E = Object?> = object
{
  preset: RxNodeDecl<E>? = none

  key: Text? = none

  mode: Mode? = none

  triggers: Object? = none

  initialize: Delegate<E>? = none

  update: Delegate<E>? = none

  finalize: Delegate<E>? = none
};


type RxNodeDriver<E = Object?> = object
{
  guarded
  name: Text

  guarded
  isPartitionSeparator: YesNo

  guarded
  predefine: SimpleDelegate<E>?

  allocate: None | operation(node: RxNode<E>): E = none

  initialize: None | operation(node: RxNode<E>) = none

  mount: None | operation(node: RxNode<E>) = none

  update: None | operation(node: RxNode<E>) = none

  finalize: None | operation(node: RxNode<E>, isLeader: YesNo): YesNo = none
}


type RxNodeContext<T: Object = Object> = aspect
{
  value: T
}

external
{
  #JS.ВнешняяРеализация(модуль = "reactronic")
  type BaseDriver<E = Object?> = /*(!) incomplete*/ object RxNodeDriver<E>
  {
    guarded
    name: Text

    guarded
    isPartitionSeparator: YesNo

    guarded
    predefine: SimpleDelegate<E, None>?

    on create(name: Text, isPartitionSeparator: YesNo, predefine: SimpleDelegate<E, None>? = none)

    abstract
    operation allocate(node: RxNode<E>): E;

    operation initialize(node: RxNode<E>)

    operation mount(node: RxNode<E>)

    operation update(node: RxNode<E>)

    operation finalize(node: RxNode<E>, isLeader: YesNo): YesNo
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type RxNodeVariable<T: Object = Object> = object
  {
    guarded
    defaultValue: T?

    on create(defaultValue: T? = none)

    value: T

    guarded
    valueOrUndefined: T?
  }
}
