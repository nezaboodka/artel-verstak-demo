
import JS = Artel.JavaScript

external
{
  type Delegate<T> = operation(el: T, basis: operation())


  type SimpleDelegate<T = Object?, R = None> = operation(el: T): R


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type Mode = variant
  {
    default             // = 0
    independent-update  // = 1
    manual-mount        // = 2
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type Priority = variant
  {
    realtime    // = 0
    normal      // = 1
    background  // = 2
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type RxNode<E = Object?> = /*(!) incomplete */ object
  {
    abstract hidden set
    key: Text

    abstract hidden set
    driver: RxNodeDriver<E>

    abstract hidden set
    declaration: RxNodeDecl<E>

    abstract hidden set
    level: Number

    abstract hidden set
    owner: RxNode

    abstract
    element: E
    
    abstract hidden set
    host: RxNode

    abstract hidden set
    children: MergeListReader<RxNode>

    abstract hidden set
    seat: MergedItem<RxNode<E>>?

    abstract hidden set
    stamp: Number

    abstract hidden set
    outer: RxNode;

    abstract hidden set
    context: RxNodeContext?

    abstract
    priority: Priority?

    abstract
    children-shuffling: YesNo

    abstract
    strict-order: YesNo

    abstract
    operation has(mode: Mode): YesNo

    abstract
    operation configure-reactronic(options: PartialMemberOptions): MemberOptions
    
    global hidden set
    short-frame-duration // = 16

    global hidden set
    long-frame-duration // = 300

    global
    current-update-priority: Priority

    global
    frame-duration: Number

    global
    operation declare<E = None>(driver: RxNodeDriver<E>, declaration: RxNodeDecl<E>?, preset: RxNodeDecl<E>?): RxNode<E>

    global hidden set
    is-first-update: YesNo

    global hidden set
    key: Text

    global hidden set
    stamp: Number

    global hidden set
    triggers: Object?

    global
    priority: Priority

    global
    children-shuffling: YesNo

    global
    operation trigger-update(node: RxNode<Object?>, triggers: Object?)

    global
    operation trigger-deactivation(node: RxNode<Object?>)

    global
    operation update-nested-nodes-then-do(action: operation(error`: Object?))

    global
    operation mark-as-mounted(node: RxNode<Object?>, yes`: YesNo)

    global
    operation find-matching-host<E = Object?, R = Object?>(node: RxNode<E>, match: SimpleDelegate<RxNode<E>, YesNo>): RxNode<R>?

    global
    operation find-matching-prev-sibling<E = Object?, R = Object?>(node: RxNode<E>, match: SimpleDelegate<RxNode<E>, YesNo>): RxNode<R>?

    global
    operation for-each-child-recursively<E = Object?>(node: RxNode<E>, action: SimpleDelegate<RxNode<E>>)

    global
    operation get-default-logging-options(): LoggingOptions?

    global
    operation set-default-logging-options(logging: LoggingOptions?)
  }
}


type RxNodeDecl<E = Object?> = object
{
  on-change: Delegate<E>? = none

  key: Text? = none

  mode: Mode? = none

  on-create: Delegate<E>? = none

  on-destroy: Delegate<E>? = none

  triggers: Object? = none

  preset: RxNodeDecl<E>? = none
};


type RxNodeDriver<E = Object?> = object
{
  hidden set
  name: Text

  hidden set
  is-partition: YesNo

  hidden set
  predefine: SimpleDelegate<E>?

  allocate: None | operation(node: RxNode<E>): E = none

  create: None | operation(node: RxNode<E>) = none

  destroy: None | operation(node: RxNode<E>, is-leader: YesNo): YesNo = none

  mount: None | operation(node: RxNode<E>) = none

  update: None | operation(node: RxNode<E>) = none

  child: None | operation(
    owner-node: RxNode<E>,
    child-driver: RxNodeDriver<Object?>,
    child-declaration: RxNodeDecl<Object?>? /*= none*/,
    child-preset: RxNodeDecl<Object?>? /*= none*/) = none
}


type RxNodeContext<T: Object = Object> = aspect
{
  value: T
}

external
{
  #JS.ВнешняяРеализация(модуль = "reactronic")
  type BaseDriver<E = Object?> = /*(!) incomplete*/ object RxNodeDriver<E>
  {
    hidden set
    name: Text

    hidden set
    is-partition: YesNo

    hidden set
    predefine: SimpleDelegate<E, None>?

    on create(name: Text, is-partition: YesNo, predefine: SimpleDelegate<E, None>? = none)

    abstract
    operation allocate(node: RxNode<E>): E;

    operation activate(node: RxNode<E>)

    operation mount(node: RxNode<E>)

    operation update(node: RxNode<E>)

    operation destroy(node: RxNode<E>, is-leader: YesNo): YesNo
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type RxNodeVariable<T: Object = Object> = object
  {
    hidden set
    default-value: T?

    on create(default-value: T? = none)

    value: T

    hidden set
    value-or-undefined: T?
  }
}
