
import JS = Artel.JavaScript

external
{
  #JS.ВнешняяРеализация(модуль = "reactronic")
  hidden by package
  type MvccArray<T> = object MvccObject
  {
    // hidden
    // impl

    on create(isObservable: YesNo, array: List<T>)

    length: Number

    operation get-item(n: Number): T

    operation set-item(n: Number, item: T)

    operation to-string(): Text

    operation to-locale-string(): Text

    operation pop(): T?

    operation push(items: JS.МассивПараметров<T>): Число

    operation concat(items: JS.МассивПараметров<T>): List<T>

    // #JS.МассивПараметров
    // operation concat(items: List<ConcatArray<T>>): List<T>

    // #JS.МассивПараметров
    // operation concat(items: List<ConcatArray<T>>): List<T>

    operation join(separator: Text? = none): Text

    operation reverse(): List<T>

    operation shift(): T?

    operation slice(start: Число? = none, end: Число? = none): List<T>

    operation sort(compareFn: operation(a: T, b: T): Число?)

    operation splice(start: Число, deleteCount: Число? = none): List<T>

    operation splice(start: Число, deleteCount: Число, items: JS.МассивПараметров<T>): List<T>

    operation splice(start: Число, deleteCount: Число, items: JS.МассивПараметров<T>): List<T>

    operation unshift(items: JS.МассивПараметров<T>): Число

    operation includes(searchElement: T, fromIndex: Число? = none): YesNo

    operation index-of(searchElement: T, fromIndex: Число? = none): Число

    operation last-index-of(searchElement: T, fromIndex: Число? = none): Число

    operation every(predicate: operation(value: T, index: Число, array: List<T>): /*(!) unknown */ Object?, this-arg: /*(!) any */ Object? = none): YesNo

    operation every<S = T>(predicate: operation(value: T, index: Число, array: List<T>): /*(!) value is */ S, this-arg: /*(!) any */ Object? = none): /*(!) this is */ List<S>

    operation every(predicate: operation(value: T, index: Число, array: List<T>): /*(!) any */ Object?, this-arg: /*(!) any */ Object? = none): /*(!) any */ Object?

    operation some(predicate: operation(value: T, index: Число, array: List<T>): /*(!) unknown */ Object?, this-arg: /*(!) any */ Object? = none): YesNo

    operation for-each(callbackfn: operation(value: T, index: Число, array: List<T>): None, this-arg: /*(!) any */ Object? = none)

    operation map<U>(callbackfn: operation(value: T, index: Число, array: List<T>): U, this-arg: /*(!) any */ Object? = none): List<U>

    operation filter(predicate: operation(value: T, index: Число, array: List<T>): /*(!) unknown */ Object?, this-arg: /*(!) any */ Object? = none): List<T>

    operation filter<S = T>(predicate: operation(value: T, index: Число, array: List<T>): /*(!) value is */ S, this-arg: /*(!) any */ Object? = none): List<S>

    operation filter(predicate: operation(value: T, index: Число, array: List<T>): /*(!) any */ Object?, this-arg: /*(!) any */ Object? = none): List</*(!) any */ Object?>

    operation reduce(callbackfn: operation(previous-value: T, current-value: T, current-index: Число, array: List<T>): T): T

    operation reduce(callbackfn: operation(previous-value: T, current-value: T, current-index: Число, array: List<T>): T, initial-value: T): T

    operation reduce<U>(callbackfn: operation(previous-value: U, current-value: T, current-index: Число, array: List<T>): U, initial-value: U): U

    operation reduce(callbackfn: operation(previous-value: /*(!) any */ Object?, current-value: T, current-index: Число, array: List<T>): /*(!) any */ Object?, initial-value: /*(!) any */ Object? = none): /*(!) any */ Object?

    operation reduce-right(callbackfn: operation(previous-value: T, current-value: T, current-index: Число, array: List<T>): T): T

    operation reduce-right(callbackfn: operation(previous-value: T, current-value: T, current-index: Число, array: List<T>): T, initial-value: T): T

    operation reduce-right<U>(callbackfn: operation(previous-value: U, current-value: T, current-index: Число, array: List<T>): U, initial-value: U): U

    operation reduce-right(callbackfn: operation(previous-value: /*(!) any */ Object?, current-value: T, current-index: Число, array: List<T>): /*(!) any */ Object?, initial-value: /*(!) any */ Object? = none): /*(!) any */ Object?

    operation find<S = T>(predicate: operation(this: None, value: T, index: Number, obj: List<T>): /*(!) value is */ S, this-arg: /*(!) any */ Object? = none): S?

    operation find-index(predicate: operation(value: T, index: Number, obj: List<T>): /*(!) unknown */ Object?, this-arg: /*(!) any */ Object? = none): Число

    operation fill(value: T, start: Number? = none, end: Number? = none): /*(!) any */ Object?

    operation copy-within(target: Number, start: Number, end: Number? = none): /*(!) any */ Object?

    // operation [Symbol.iterator](): IterableIterator<T>

    // operation entries(): IterableIterator<Object { _0: Число, _1: T }>

    // operation keys(): IterableIterator<Integer>

    // operation values(): IterableIterator<T>

    // hidden guarded
    // mutable: List<T>
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type TransactionalArray<T> = object MvccArray<T>
  {
    on create()

    on create(array-length: Число)

    on create(array-length: Число? = none)

    on create(items: JS.МассивПараметров<T>)
  }


  #JS.ВнешняяРеализация(модуль = "reactronic")
  type ObservableArray<T> = object MvccArray<T>
  {
    on create()

    on create(array-length: Число)

    on create(array-length: Число? = none)

    on create(items: JS.МассивПараметров<T>)
  }
}
