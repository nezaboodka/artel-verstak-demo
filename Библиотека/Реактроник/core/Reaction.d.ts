import { F } from "../util/Utils.js";
import { AbstractReaction, MemberOptions } from "../Options.js";
import { MemberName, ObjectHandle, ValueSnapshot, Observer, Subscription, AbstractChangeset } from "./Data.js";
import { Transaction } from "./Transaction.js";
import { OptionsImpl } from "./Mvcc.js";
export declare class ReactionImpl implements AbstractReaction<any> {
    readonly objectHandle: ObjectHandle;
    readonly memberName: MemberName;
    configure(options: Partial<MemberOptions>): MemberOptions;
    get options(): MemberOptions;
    get unobs(): any;
    get args(): ReadonlyArray<any>;
    get result(): any;
    get error(): boolean;
    get stamp(): number;
    get isUpToDate(): boolean;
    markObsolete(): void;
    pullLastResult(args?: any[]): any;
    constructor(h: ObjectHandle, m: MemberName);
    reuseOrRelaunch(weak: boolean, args: any[] | undefined): Launch;
    static getControllerOf(method: F<any>): AbstractReaction<any>;
    static configureImpl(self: ReactionImpl | undefined, options: Partial<MemberOptions>): MemberOptions;
    static proceedWithinGivenLaunch<T>(launch: Launch | undefined, func: F<T>, ...args: any[]): T;
    static why(): string;
    static briefWhy(): string;
    static dependencies(): string[];
    private peek;
    private use;
    private edit;
    private acquireFromSnapshot;
    private relaunch;
    private static markObsolete;
}
declare class Launch extends ValueSnapshot implements Observer {
    static current?: Launch;
    static queuedReactiveFunctions: Array<Observer>;
    static deferredReactiveFunctions: Array<Launch>;
    readonly margin: number;
    readonly transaction: Transaction;
    readonly reaction: ReactionImpl;
    readonly changeset: AbstractChangeset;
    observables: Map<ValueSnapshot, Subscription> | undefined;
    options: OptionsImpl;
    cause: string | undefined;
    args: any[];
    result: any;
    error: any;
    started: number;
    obsoleteDueTo: string | undefined;
    obsoleteSince: number;
    successor: Launch | undefined;
    constructor(reaction: ReactionImpl, changeset: AbstractChangeset, former: Launch | OptionsImpl);
    get isOperation(): boolean;
    get originSnapshotId(): number;
    hint(): string;
    get order(): number;
    get ["#this#"](): string;
    why(): string;
    briefWhy(): string;
    dependencies(): string[];
    wrap<T>(func: F<T>): F<T>;
    proceed(proxy: any, args: any[] | undefined): void;
    markObsoleteDueTo(observable: ValueSnapshot, m: MemberName, changeset: AbstractChangeset, h: ObjectHandle, outer: string, since: number, obsolete: Observer[]): void;
    relaunchIfNotUpToDate(now: boolean, nothrow: boolean): void;
    isNotUpToDate(): boolean;
    reenterOver(head: Launch): this;
    private static proceed;
    private enter;
    private leaveOrAsync;
    private leave;
    private monitorEnter;
    private monitorLeave;
    private addToDeferredReactiveFunctions;
    private static processDeferredReactiveFunctions;
    private static markUsed;
    private static markEdited;
    private static isConflicting;
    private static propagateAllChangesThroughSubscriptions;
    private static revokeAllSubscriptions;
    private static propagateMemberChangeThroughSubscriptions;
    private static enqueueReactiveFunctionsToRun;
    private static processQueuedReactiveFunctions;
    private unsubscribeFromAllObservables;
    private subscribeTo;
    private static canSubscribeTo;
    private static createOperation;
    private static rememberOperationOptions;
    static init(): void;
}
export declare function resolveReturn(value: any): any;
export declare function rejectRethrow(error: any): never;
export {};
