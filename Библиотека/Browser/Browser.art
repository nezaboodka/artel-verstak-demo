/////////////////////////////
/// Window APIs
/////////////////////////////

external
{
  type AddEventListenerOptions = aspect EventListenerOptions
  {
    once: YesNo

    passive: YesNo

    signal: AbortSignal
  }


  type AesCbcParams = aspect Algorithm
  {
    iv: BufferSource
  }


  type AesCtrParams = aspect Algorithm
  {
    counter: BufferSource

    length: Number
  }


  type AesDerivedKeyParams = aspect Algorithm
  {
    length: Number
  }


  type AesGcmParams = aspect Algorithm
  {
    additionalData: BufferSource

    iv: BufferSource

    tagLength: Number
  }


  type AesKeyAlgorithm = aspect KeyAlgorithm
  {
    length: Number
  }


  type AesKeyGenParams = aspect Algorithm
  {
    length: Number
  }


  type Algorithm = aspect
  {
    name: Text
  }


  type AnalyserOptions = aspect AudioNodeOptions
  {
    fftSize: Number

    maxDecibels: Number

    minDecibels: Number

    smoothingTimeConstant: Number
  }


  type AnimationEventInit = aspect EventInit
  {
    animationName: Text

    elapsedTime: Number

    pseudoElement: Text
  }


  type AnimationPlaybackEventInit = aspect EventInit
  {
    currentTime: CSSNumberish?

    timelineTime: CSSNumberish?
  }


  type AssignedNodesOptions = aspect
  {
    flatten: YesNo
  }


  type AudioBufferOptions = aspect
  {
    length: Number

    numberOfChannels: Number

    sampleRate: Number
  }


  type AudioBufferSourceOptions = aspect
  {
    buffer: AudioBuffer?

    detune: Number

    loop`: YesNo

    loopEnd: Number

    loopStart: Number

    playbackRate: Number
  }


  type AudioConfiguration = aspect
  {
    bitrate: Number

    channels: Text

    contentType: Text

    samplerate: Number

    spatialRendering: YesNo
  }


  type AudioContextOptions = aspect
  {
    latencyHint: Object? /*(!)AudioContextLatencyCategory | Number*/

    sampleRate: Number
  }


  type AudioNodeOptions = aspect
  {
    channelCount: Number

    channelCountMode: ChannelCountMode

    channelInterpretation: ChannelInterpretation
  }


  type AudioProcessingEventInit = aspect EventInit
  {
    inputBuffer: AudioBuffer

    outputBuffer: AudioBuffer

    playbackTime: Number
  }


  type AudioTimestamp = aspect
  {
    contextTime: Number

    performanceTime: DOMHighResTimeStamp
  }


  type AudioWorkletNodeOptions = aspect AudioNodeOptions
  {
    numberOfInputs: Number

    numberOfOutputs: Number

    outputChannelCount: Список<Number>

    parameterData: Record<Текст, Number>

    processorOptions: /*(!) any */ Object?
  }


  type AuthenticationExtensionsClientInputs = aspect
  {
    appid: Text

    credProps: YesNo

    hmacCreateSecret: YesNo
  }


  type AuthenticationExtensionsClientOutputs = aspect
  {
    appid: YesNo

    credProps: CredentialPropertiesOutput

    hmacCreateSecret: YesNo
  }


  type AuthenticatorSelectionCriteria = aspect
  {
    authenticatorAttachment: AuthenticatorAttachment

    requireResidentKey: YesNo

    residentKey: ResidentKeyRequirement

    userVerification: UserVerificationRequirement
  }


  type AvcEncoderConfig = aspect
  {
    format: AvcBitstreamFormat
  }


  type BiquadFilterOptions = aspect AudioNodeOptions
  {
    Q: Number

    detune: Number

    frequency: Number

    gain: Number

    type`: BiquadFilterType
  }


  type BlobEventInit = aspect
  {
    data: Blob

    timecode: DOMHighResTimeStamp
  }


  type BlobPropertyBag = aspect
  {
    endings: EndingType

    type`: Text
  }


  type CSSMatrixComponentOptions = aspect
  {
    is2D: YesNo
  }


  type CSSNumericType = aspect
  {
    angle: Number

    flex: Number

    frequency: Number

    length: Number

    percent: Number

    percentHint: CSSNumericBaseType

    resolution: Number

    time: Number
  }


  type CSSStyleSheetInit = aspect
  {
    baseURL: Text

    disabled: YesNo

    media: Object? /*(!)MediaList | Текст*/
  }


  type CacheQueryOptions = aspect
  {
    ignoreMethod: YesNo

    ignoreSearch: YesNo

    ignoreVary: YesNo
  }


  type CanvasRenderingContext2DSettings = aspect
  {
    alpha: YesNo

    colorSpace: PredefinedColorSpace

    desynchronized: YesNo

    willReadFrequently: YesNo
  }


  type ChannelMergerOptions = aspect AudioNodeOptions
  {
    numberOfInputs: Number
  }


  type ChannelSplitterOptions = aspect AudioNodeOptions
  {
    numberOfOutputs: Number
  }


  type CheckVisibilityOptions = aspect
  {
    checkOpacity: YesNo

    checkVisibilityCSS: YesNo
  }


  type ClientQueryOptions = aspect
  {
    includeUncontrolled: YesNo

    type`: ClientTypes
  }


  type ClipboardEventInit = aspect EventInit
  {
    clipboardData: DataTransfer?
  }


  type ClipboardItemOptions = aspect
  {
    presentationStyle: PresentationStyle
  }


  type CloseEventInit = aspect EventInit
  {
    code: Number

    reason: Text

    wasClean: YesNo
  }


  type CompositionEventInit = aspect UIEventInit
  {
    data: Text
  }


  type ComputedEffectTiming = aspect EffectTiming
  {
    activeDuration: CSSNumberish

    currentIteration: Number?

    endTime: CSSNumberish

    localTime: CSSNumberish?

    progress: Number?

    startTime: CSSNumberish
  }


  type ComputedKeyframe = aspect
  {
    composite: CompositeOperationOrAuto

    computedOffset: Number

    easing: Text

    offset: Number?

    /*(!) [property: string]: string | number | null | undefined*/
  }


  type ConstantSourceOptions = aspect
  {
    offset: Number
  }


  type ConstrainBooleanParameters = aspect
  {
    exact: YesNo

    ideal: YesNo
  }


  type ConstrainDOMStringParameters = aspect
  {
    exact: Object? /*(!)Текст | Список<Текст>*/

    ideal: Object? /*(!)Текст | Список<Текст>*/
  }


  type ConstrainDoubleRange = aspect DoubleRange
  {
    exact: Number

    ideal: Number
  }


  type ConstrainULongRange = aspect ULongRange
  {
    exact: Number

    ideal: Number
  }


  type ConvolverOptions = aspect AudioNodeOptions
  {
    buffer: AudioBuffer?

    disableNormalization: YesNo
  }


  type CredentialCreationOptions = aspect
  {
    publicKey: PublicKeyCredentialCreationOptions

    signal: AbortSignal
  }


  type CredentialPropertiesOutput = aspect
  {
    rk: YesNo
  }


  type CredentialRequestOptions = aspect
  {
    mediation: CredentialMediationRequirement

    publicKey: PublicKeyCredentialRequestOptions

    signal: AbortSignal
  }


  type CryptoKeyPair = aspect
  {
    privateKey: CryptoKey

    publicKey: CryptoKey
  }


  type CustomEventInit<T> = aspect EventInit
  {
    detail: T
  }


  type DOMMatrix2DInit = aspect
  {
    a: Number

    b: Number

    c: Number

    d: Number

    e: Number

    f: Number

    m11: Number

    m12: Number

    m21: Number

    m22: Number

    m41: Number

    m42: Number
  }


  type DOMMatrixInit = aspect DOMMatrix2DInit
  {
    is2D: YesNo

    m13: Number

    m14: Number

    m23: Number

    m24: Number

    m31: Number

    m32: Number

    m33: Number

    m34: Number

    m43: Number

    m44: Number
  }


  type DOMPointInit = aspect
  {
    w: Number

    x: Number

    y: Number

    z: Number
  }


  type DOMQuadInit = aspect
  {
    p1: DOMPointInit

    p2: DOMPointInit

    p3: DOMPointInit

    p4: DOMPointInit
  }


  type DOMRectInit = aspect
  {
    height: Number

    width: Number

    x: Number

    y: Number
  }


  type DelayOptions = aspect AudioNodeOptions
  {
    delayTime: Number

    maxDelayTime: Number
  }


  type DeviceMotionEventAccelerationInit = aspect
  {
    x: Number?

    y: Number?

    z: Number?
  }


  type DeviceMotionEventInit = aspect EventInit
  {
    acceleration: DeviceMotionEventAccelerationInit

    accelerationIncludingGravity: DeviceMotionEventAccelerationInit

    interval: Number

    rotationRate: DeviceMotionEventRotationRateInit
  }


  type DeviceMotionEventRotationRateInit = aspect
  {
    alpha: Number?

    beta: Number?

    gamma: Number?
  }


  type DeviceOrientationEventInit = aspect EventInit
  {
    absolute: YesNo

    alpha: Number?

    beta: Number?

    gamma: Number?
  }


  type DisplayMediaStreamOptions = aspect
  {
    audio: Object? /*(!)ДаНет | MediaTrackConstraints*/

    video: Object? /*(!)ДаНет | MediaTrackConstraints*/
  }


  type DocumentTimelineOptions = aspect
  {
    originTime: DOMHighResTimeStamp
  }


  type DoubleRange = aspect
  {
    max: Number

    min: Number
  }


  type DragEventInit = aspect MouseEventInit
  {
    dataTransfer: DataTransfer?
  }


  type DynamicsCompressorOptions = aspect AudioNodeOptions
  {
    attack: Number

    knee: Number

    ratio: Number

    release: Number

    threshold: Number
  }


  type EcKeyAlgorithm = aspect KeyAlgorithm
  {
    namedCurve: NamedCurve
  }


  type EcKeyGenParams = aspect Algorithm
  {
    namedCurve: NamedCurve
  }


  type EcKeyImportParams = aspect Algorithm
  {
    namedCurve: NamedCurve
  }


  type EcdhKeyDeriveParams = aspect Algorithm
  {
    public: CryptoKey
  }


  type EcdsaParams = aspect Algorithm
  {
    hash: HashAlgorithmIdentifier
  }


  type EffectTiming = aspect
  {
    delay: Number

    direction: PlaybackDirection

    duration: Object? /*(!)Number | CSSNumericValue | Текст*/

    easing: Text

    endDelay: Number

    fill: FillMode

    iterationStart: Number

    iterations: Number

    playbackRate: Number
  }


  type ElementCreationOptions = aspect
  {
    is`: Text
  }


  type ElementDefinitionOptions = aspect
  {
    extends: Text
  }


  type EncodedVideoChunkInit = aspect
  {
    data: BufferSource

    duration: Number

    timestamp: Number

    type`: EncodedVideoChunkType
  }


  type EncodedVideoChunkMetadata = aspect
  {
    decoderConfig: VideoDecoderConfig
  }


  type ErrorEventInit = aspect EventInit
  {
    colno: Number

    error`: /*(!) any */ Object?

    filename: Text

    lineno: Number

    message: Text
  }


  type EventInit = aspect
  {
    bubbles: YesNo

    cancelable: YesNo

    composed: YesNo
  }


  type EventListenerOptions = aspect
  {
    capture: YesNo
  }


  type EventModifierInit = aspect UIEventInit
  {
    altKey: YesNo

    ctrlKey: YesNo

    metaKey: YesNo

    modifierAltGraph: YesNo

    modifierCapsLock: YesNo

    modifierFn: YesNo

    modifierFnLock: YesNo

    modifierHyper: YesNo

    modifierNumLock: YesNo

    modifierScrollLock: YesNo

    modifierSuper: YesNo

    modifierSymbol: YesNo

    modifierSymbolLock: YesNo

    shiftKey: YesNo
  }


  type EventSourceInit = aspect
  {
    withCredentials: YesNo
  }


  type FilePropertyBag = aspect BlobPropertyBag
  {
    lastModified: Number
  }


  type FileSystemCreateWritableOptions = aspect
  {
    keepExistingData: YesNo
  }


  type FileSystemFlags = aspect
  {
    create: YesNo

    exclusive: YesNo
  }


  type FileSystemGetDirectoryOptions = aspect
  {
    create: YesNo
  }


  type FileSystemGetFileOptions = aspect
  {
    create: YesNo
  }


  type FileSystemRemoveOptions = aspect
  {
    recursive: YesNo
  }


  type FocusEventInit = aspect UIEventInit
  {
    relatedTarget: EventTarget?
  }


  type FocusOptions = aspect
  {
    preventScroll: YesNo
  }


  type FontFaceDescriptors = aspect
  {
    ascentOverride: Text

    descentOverride: Text

    display: FontDisplay

    featureSettings: Text

    lineGapOverride: Text

    stretch: Text

    style: Text

    unicodeRange: Text

    variant`: Text

    weight: Text
  }


  type FontFaceSetLoadEventInit = aspect EventInit
  {
    fontfaces: Список<FontFace>
  }


  type FormDataEventInit = aspect EventInit
  {
    formData: FormData
  }


  type FullscreenOptions = aspect
  {
    navigationUI: FullscreenNavigationUI
  }


  type GainOptions = aspect AudioNodeOptions
  {
    gain: Number
  }


  type GamepadEffectParameters = aspect
  {
    duration: Number

    startDelay: Number

    strongMagnitude: Number

    weakMagnitude: Number
  }


  type GamepadEventInit = aspect EventInit
  {
    gamepad: Gamepad
  }


  type GetAnimationsOptions = aspect
  {
    subtree: YesNo
  }


  type GetNotificationOptions = aspect
  {
    tag: Text
  }


  type GetRootNodeOptions = aspect
  {
    composed: YesNo
  }


  type HashChangeEventInit = aspect EventInit
  {
    newURL: Text

    oldURL: Text
  }


  type HkdfParams = aspect Algorithm
  {
    hash: HashAlgorithmIdentifier

    info: BufferSource

    salt: BufferSource
  }


  type HmacImportParams = aspect Algorithm
  {
    hash: HashAlgorithmIdentifier

    length: Number
  }


  type HmacKeyAlgorithm = aspect KeyAlgorithm
  {
    hash: KeyAlgorithm

    length: Number
  }


  type HmacKeyGenParams = aspect Algorithm
  {
    hash: HashAlgorithmIdentifier

    length: Number
  }


  type IDBDatabaseInfo = aspect
  {
    name: Text

    version: Number
  }


  type IDBIndexParameters = aspect
  {
    multiEntry: YesNo

    unique: YesNo
  }


  type IDBObjectStoreParameters = aspect
  {
    autoIncrement: YesNo

    keyPath: Object? /*(!)Текст | Список<Текст> | пусто*/
  }


  type IDBTransactionOptions = aspect
  {
    durability: IDBTransactionDurability
  }


  type IDBVersionChangeEventInit = aspect EventInit
  {
    newVersion: Number?

    oldVersion: Number
  }


  type IIRFilterOptions = aspect AudioNodeOptions
  {
    feedback: Список<Number>

    feedforward: Список<Number>
  }


  type IdleRequestOptions = aspect
  {
    timeout: Number
  }


  type ImageBitmapOptions = aspect
  {
    colorSpaceConversion: ColorSpaceConversion

    imageOrientation: ImageOrientation

    premultiplyAlpha: PremultiplyAlpha

    resizeHeight: Number

    resizeQuality: ResizeQuality

    resizeWidth: Number
  }


  type ImageBitmapRenderingContextSettings = aspect
  {
    alpha: YesNo
  }


  type ImageDataSettings = aspect
  {
    colorSpace: PredefinedColorSpace
  }


  type ImageEncodeOptions = aspect
  {
    quality: Number

    type`: Text
  }


  type ImportMeta = aspect
  {
    url: Text
  }


  type InputEventInit = aspect UIEventInit
  {
    data: Text?

    dataTransfer: DataTransfer?

    inputType: Text

    isComposing: YesNo

    targetRanges: Список<StaticRange>
  }


  type IntersectionObserverEntryInit = aspect
  {
    boundingClientRect: DOMRectInit

    intersectionRatio: Number

    intersectionRect: DOMRectInit

    isIntersecting: YesNo

    rootBounds: DOMRectInit?

    target: Element

    time: DOMHighResTimeStamp
  }


  type IntersectionObserverInit = aspect
  {
    root: Object? /*(!)Element | Document | пусто*/

    rootMargin: Text

    threshold: Object? /*(!)Number | Список<Number>*/
  }


  type JsonWebKey = aspect
  {
    alg: Text

    crv: Text

    d: Text

    dp: Text

    dq: Text

    e: Text

    ext: YesNo

    k: Text

    key_ops: Список<Текст>

    kty: Text

    n: Text

    oth: Список<RsaOtherPrimesInfo>

    p: Text

    q: Text

    qi: Text

    use: Text

    x: Text

    y: Text
  }


  type KeyAlgorithm = aspect
  {
    name: Text
  }


  type KeyboardEventInit = aspect EventModifierInit
  {
    code: Text

    isComposing: YesNo

    key: Text

    location: Number

    repeat: YesNo
  }


  type Keyframe = aspect
  {
    composite: CompositeOperationOrAuto

    easing: Text

    offset: Number?

    /*(!) [property: string]: string | number | null | undefined*/
  }


  type KeyframeAnimationOptions = aspect KeyframeEffectOptions
  {
    id: Text

    timeline: AnimationTimeline?
  }


  type KeyframeEffectOptions = aspect EffectTiming
  {
    composite: CompositeOperation

    iterationComposite: IterationCompositeOperation

    pseudoElement: Text?
  }


  type LockInfo = aspect
  {
    clientId: Text

    mode: LockMode

    name: Text
  }


  type LockManagerSnapshot = aspect
  {
    held: Список<LockInfo>

    pending: Список<LockInfo>
  }


  type LockOptions = aspect
  {
    ifAvailable: YesNo

    mode: LockMode

    signal: AbortSignal

    steal: YesNo
  }


  type MIDIConnectionEventInit = aspect EventInit
  {
    port: MIDIPort
  }


  type MIDIMessageEventInit = aspect EventInit
  {
    data: Uint8Array
  }


  type MIDIOptions = aspect
  {
    software: YesNo

    sysex: YesNo
  }


  type MediaCapabilitiesDecodingInfo = aspect MediaCapabilitiesInfo
  {
    configuration: MediaDecodingConfiguration
  }


  type MediaCapabilitiesEncodingInfo = aspect MediaCapabilitiesInfo
  {
    configuration: MediaEncodingConfiguration
  }


  type MediaCapabilitiesInfo = aspect
  {
    powerEfficient: YesNo

    smooth: YesNo

    supported: YesNo
  }


  type MediaConfiguration = aspect
  {
    audio: AudioConfiguration

    video: VideoConfiguration
  }


  type MediaDecodingConfiguration = aspect MediaConfiguration
  {
    type`: MediaDecodingType
  }


  type MediaElementAudioSourceOptions = aspect
  {
    mediaElement: HTMLMediaElement
  }


  type MediaEncodingConfiguration = aspect MediaConfiguration
  {
    type`: MediaEncodingType
  }


  type MediaEncryptedEventInit = aspect EventInit
  {
    initData: ArrayBuffer?

    initDataType: Text
  }


  type MediaImage = aspect
  {
    sizes: Text

    src: Text

    type`: Text
  }


  type MediaKeyMessageEventInit = aspect EventInit
  {
    message: ArrayBuffer

    messageType: MediaKeyMessageType
  }


  type MediaKeySystemConfiguration = aspect
  {
    audioCapabilities: Список<MediaKeySystemMediaCapability>

    distinctiveIdentifier: MediaKeysRequirement

    initDataTypes: Список<Текст>

    label: Text

    persistentState: MediaKeysRequirement

    sessionTypes: Список<Текст>

    videoCapabilities: Список<MediaKeySystemMediaCapability>
  }


  type MediaKeySystemMediaCapability = aspect
  {
    contentType: Text

    encryptionScheme: Text?

    robustness: Text
  }


  type MediaMetadataInit = aspect
  {
    album: Text

    artist: Text

    artwork: Список<MediaImage>

    title: Text
  }


  type MediaPositionState = aspect
  {
    duration: Number

    playbackRate: Number

    position: Number
  }


  type MediaQueryListEventInit = aspect EventInit
  {
    matches: YesNo

    media: Text
  }


  type MediaRecorderOptions = aspect
  {
    audioBitsPerSecond: Number

    bitsPerSecond: Number

    mimeType: Text

    videoBitsPerSecond: Number
  }


  type MediaSessionActionDetails = aspect
  {
    action: MediaSessionAction

    fastSeek: YesNo

    seekOffset: Number

    seekTime: Number
  }


  type MediaStreamAudioSourceOptions = aspect
  {
    mediaStream: MediaStream
  }


  type MediaStreamConstraints = aspect
  {
    audio: Object? /*(!)ДаНет | MediaTrackConstraints*/

    peerIdentity: Text

    preferCurrentTab: YesNo

    video: Object? /*(!)ДаНет | MediaTrackConstraints*/
  }


  type MediaStreamTrackEventInit = aspect EventInit
  {
    track: MediaStreamTrack
  }


  type MediaTrackCapabilities = aspect
  {
    aspectRatio: DoubleRange

    autoGainControl: Список<ДаНет>

    channelCount: ULongRange

    deviceId: Text

    displaySurface: Text

    echoCancellation: Список<ДаНет>

    facingMode: Список<Текст>

    frameRate: DoubleRange

    groupId: Text

    height: ULongRange

    noiseSuppression: Список<ДаНет>

    sampleRate: ULongRange

    sampleSize: ULongRange

    width: ULongRange
  }


  type MediaTrackConstraintSet = aspect
  {
    aspectRatio: ConstrainDouble

    autoGainControl: ConstrainBoolean

    channelCount: ConstrainULong

    deviceId: ConstrainDOMString

    displaySurface: ConstrainDOMString

    echoCancellation: ConstrainBoolean

    facingMode: ConstrainDOMString

    frameRate: ConstrainDouble

    groupId: ConstrainDOMString

    height: ConstrainULong

    noiseSuppression: ConstrainBoolean

    sampleRate: ConstrainULong

    sampleSize: ConstrainULong

    width: ConstrainULong
  }


  type MediaTrackConstraints = aspect MediaTrackConstraintSet
  {
    advanced: Список<MediaTrackConstraintSet>
  }


  type MediaTrackSettings = aspect
  {
    aspectRatio: Number

    autoGainControl: YesNo

    channelCount: Number

    deviceId: Text

    displaySurface: Text

    echoCancellation: YesNo

    facingMode: Text

    frameRate: Number

    groupId: Text

    height: Number

    noiseSuppression: YesNo

    sampleRate: Number

    sampleSize: Number

    width: Number
  }


  type MediaTrackSupportedConstraints = aspect
  {
    aspectRatio: YesNo

    autoGainControl: YesNo

    channelCount: YesNo

    deviceId: YesNo

    displaySurface: YesNo

    echoCancellation: YesNo

    facingMode: YesNo

    frameRate: YesNo

    groupId: YesNo

    height: YesNo

    noiseSuppression: YesNo

    sampleRate: YesNo

    sampleSize: YesNo

    width: YesNo
  }


  type MessageEventInit<T> = aspect EventInit
  {
    data: T

    lastEventId: Text

    origin: Text

    ports: Список<MessagePort>

    source: MessageEventSource?
  }


  type MouseEventInit = aspect EventModifierInit
  {
    button: Number

    buttons: Number

    clientX: Number

    clientY: Number

    movementX: Number

    movementY: Number

    relatedTarget: EventTarget?

    screenX: Number

    screenY: Number
  }


  type MultiCacheQueryOptions = aspect CacheQueryOptions
  {
    cacheName: Text
  }


  type MutationObserverInit = aspect
  {
    attributeFilter: Список<Текст>

    attributeOldValue: YesNo

    attributes: YesNo

    characterData: YesNo

    characterDataOldValue: YesNo

    childList: YesNo

    subtree: YesNo
  }


  type NavigationPreloadState = aspect
  {
    enabled: YesNo

    headerValue: Text
  }


  type NotificationAction = aspect
  {
    action: Text

    icon: Text

    title: Text
  }


  type NotificationOptions = aspect
  {
    actions: Список<NotificationAction>

    badge: Text

    body: Text

    data: /*(!) any */ Object?

    dir: NotificationDirection

    icon: Text

    image: Text

    lang: Text

    renotify: YesNo

    requireInteraction: YesNo

    silent: YesNo?

    tag: Text

    timestamp: EpochTimeStamp

    vibrate: VibratePattern
  }


  type OfflineAudioCompletionEventInit = aspect EventInit
  {
    renderedBuffer: AudioBuffer
  }


  type OfflineAudioContextOptions = aspect
  {
    length: Number

    numberOfChannels: Number

    sampleRate: Number
  }


  type OptionalEffectTiming = aspect
  {
    delay: Number

    direction: PlaybackDirection

    duration: Object? /*(!)Number | Текст*/

    easing: Text

    endDelay: Number

    fill: FillMode

    iterationStart: Number

    iterations: Number

    playbackRate: Number
  }


  type OscillatorOptions = aspect AudioNodeOptions
  {
    detune: Number

    frequency: Number

    periodicWave: PeriodicWave

    type`: OscillatorType
  }


  type PageTransitionEventInit = aspect EventInit
  {
    persisted: YesNo
  }


  type PannerOptions = aspect AudioNodeOptions
  {
    coneInnerAngle: Number

    coneOuterAngle: Number

    coneOuterGain: Number

    distanceModel: DistanceModelType

    maxDistance: Number

    orientationX: Number

    orientationY: Number

    orientationZ: Number

    panningModel: PanningModelType

    positionX: Number

    positionY: Number

    positionZ: Number

    refDistance: Number

    rolloffFactor: Number
  }


  type PaymentCurrencyAmount = aspect
  {
    currency: Text

    value: Text
  }


  type PaymentDetailsBase = aspect
  {
    displayItems: Список<PaymentItem>

    modifiers: Список<PaymentDetailsModifier>
  }


  type PaymentDetailsInit = aspect PaymentDetailsBase
  {
    id: Text

    total: PaymentItem
  }


  type PaymentDetailsModifier = aspect
  {
    additionalDisplayItems: Список<PaymentItem>

    data: /*(!) any */ Object?

    supportedMethods: Text

    total: PaymentItem
  }


  type PaymentDetailsUpdate = aspect PaymentDetailsBase
  {
    paymentMethodErrors: /*(!) any */ Object?

    total: PaymentItem
  }


  type PaymentItem = aspect
  {
    amount: PaymentCurrencyAmount

    label: Text

    pending: YesNo
  }


  type PaymentMethodChangeEventInit = aspect PaymentRequestUpdateEventInit
  {
    methodDetails: /*(!) any */ Object?

    methodName: Text
  }


  type PaymentMethodData = aspect
  {
    data: /*(!) any */ Object?

    supportedMethods: Text
  }


  type PaymentRequestUpdateEventInit = aspect EventInit
  {

  }


  type PaymentValidationErrors = aspect
  {
    error`: Text

    paymentMethod: /*(!) any */ Object?
  }


  type Pbkdf2Params = aspect Algorithm
  {
    hash: HashAlgorithmIdentifier

    iterations: Number

    salt: BufferSource
  }


  type PerformanceMarkOptions = aspect
  {
    detail: /*(!) any */ Object?

    startTime: DOMHighResTimeStamp
  }


  type PerformanceMeasureOptions = aspect
  {
    detail: /*(!) any */ Object?

    duration: DOMHighResTimeStamp

    end: Object? /*(!)Текст | DOMHighResTimeStamp*/

    start: Object? /*(!)Текст | DOMHighResTimeStamp*/
  }


  type PerformanceObserverInit = aspect
  {
    buffered: YesNo

    entryTypes: Список<Текст>

    type`: Text
  }


  type PeriodicWaveConstraints = aspect
  {
    disableNormalization: YesNo
  }


  type PeriodicWaveOptions = aspect PeriodicWaveConstraints
  {
    imag: Object? /*(!)Список<Number> | Float32Array*/

    real: Object? /*(!)Список<Number> | Float32Array*/
  }


  type PermissionDescriptor = aspect
  {
    name: PermissionName
  }


  type PictureInPictureEventInit = aspect EventInit
  {
    pictureInPictureWindow: PictureInPictureWindow
  }


  type PlaneLayout = aspect
  {
    offset: Number

    stride: Number
  }


  type PointerEventInit = aspect MouseEventInit
  {
    coalescedEvents: Список<PointerEvent>

    height: Number

    isPrimary: YesNo

    pointerId: Number

    pointerType: Text

    predictedEvents: Список<PointerEvent>

    pressure: Number

    tangentialPressure: Number

    tiltX: Number

    tiltY: Number

    twist: Number

    width: Number
  }


  type PopStateEventInit = aspect EventInit
  {
    state: /*(!) any */ Object?
  }


  type PositionOptions = aspect
  {
    enableHighAccuracy: YesNo

    maximumAge: Number

    timeout: Number
  }


  type ProgressEventInit = aspect EventInit
  {
    lengthComputable: YesNo

    loaded: Number

    total: Number
  }


  type PromiseRejectionEventInit = aspect EventInit
  {
    promise: Promise</*(!) any */ Object?>

    reason: /*(!) any */ Object?
  }


  type PropertyDefinition = aspect
  {
    inherits: YesNo

    initialValue: Text

    name: Text

    syntax: Text
  }


  type PropertyIndexedKeyframes = aspect
  {
    composite: Object? /*(!)CompositeOperationOrAuto | Список<CompositeOperationOrAuto>*/

    easing: Object? /*(!)Текст | Список<Текст>*/

    offset: Object? /*(!)Number | Список<Number?>*/

    /*(!) [property: string]: string | string[] | number | null | (number | null)[] | undefined*/
  }


  type PublicKeyCredentialCreationOptions = aspect
  {
    attestation: AttestationConveyancePreference

    authenticatorSelection: AuthenticatorSelectionCriteria

    challenge: BufferSource

    excludeCredentials: Список<PublicKeyCredentialDescriptor>

    extensions: AuthenticationExtensionsClientInputs

    pubKeyCredParams: Список<PublicKeyCredentialParameters>

    rp: PublicKeyCredentialRpEntity

    timeout: Number

    user: PublicKeyCredentialUserEntity
  }


  type PublicKeyCredentialDescriptor = aspect
  {
    id: BufferSource

    transports: Список<AuthenticatorTransport>

    type`: PublicKeyCredentialType
  }


  type PublicKeyCredentialEntity = aspect
  {
    name: Text
  }


  type PublicKeyCredentialParameters = aspect
  {
    alg: COSEAlgorithmIdentifier

    type`: PublicKeyCredentialType
  }


  type PublicKeyCredentialRequestOptions = aspect
  {
    allowCredentials: Список<PublicKeyCredentialDescriptor>

    challenge: BufferSource

    extensions: AuthenticationExtensionsClientInputs

    rpId: Text

    timeout: Number

    userVerification: UserVerificationRequirement
  }


  type PublicKeyCredentialRpEntity = aspect PublicKeyCredentialEntity
  {
    id: Text
  }


  type PublicKeyCredentialUserEntity = aspect PublicKeyCredentialEntity
  {
    displayName: Text

    id: BufferSource
  }


  type PushSubscriptionJSON = aspect
  {
    endpoint: Text

    expirationTime: EpochTimeStamp?

    keys: Record<Текст, Текст>
  }


  type PushSubscriptionOptionsInit = aspect
  {
    applicationServerKey: Object? /*(!)BufferSource | Текст | пусто*/

    userVisibleOnly: YesNo
  }


  type QueuingStrategy<T> = aspect
  {
    highWaterMark: Number

    size: QueuingStrategySize<T>
  }


  type QueuingStrategyInit = aspect
  {
    highWaterMark: Number
  }


  type RTCAnswerOptions = aspect RTCOfferAnswerOptions
  {

  }


  type RTCCertificateExpiration = aspect
  {
    expires: Number
  }


  type RTCConfiguration = aspect
  {
    bundlePolicy: RTCBundlePolicy

    certificates: Список<RTCCertificate>

    iceCandidatePoolSize: Number

    iceServers: Список<RTCIceServer>

    iceTransportPolicy: RTCIceTransportPolicy

    rtcpMuxPolicy: RTCRtcpMuxPolicy
  }


  type RTCDTMFToneChangeEventInit = aspect EventInit
  {
    tone: Text
  }


  type RTCDataChannelEventInit = aspect EventInit
  {
    channel: RTCDataChannel
  }


  type RTCDataChannelInit = aspect
  {
    id: Number

    maxPacketLifeTime: Number

    maxRetransmits: Number

    negotiated: YesNo

    ordered: YesNo

    protocol: Text
  }


  type RTCDtlsFingerprint = aspect
  {
    algorithm: Text

    value: Text
  }


  type RTCEncodedAudioFrameMetadata = aspect
  {
    contributingSources: Список<Number>

    synchronizationSource: Number
  }


  type RTCEncodedVideoFrameMetadata = aspect
  {
    dependencies: Список<Number>

    frameId: Number

    height: Number

    spatialIndex: Number

    synchronizationSource: Number

    temporalIndex: Number

    width: Number
  }


  type RTCErrorEventInit = aspect EventInit
  {
    error`: RTCError
  }


  type RTCErrorInit = aspect
  {
    errorDetail: RTCErrorDetailType

    httpRequestStatusCode: Number

    receivedAlert: Number

    sctpCauseCode: Number

    sdpLineNumber: Number

    sentAlert: Number
  }


  type RTCIceCandidateInit = aspect
  {
    candidate: Text

    sdpMLineIndex: Number?

    sdpMid: Text?

    usernameFragment: Text?
  }


  type RTCIceCandidatePair = aspect
  {
    local: RTCIceCandidate

    remote: RTCIceCandidate
  }


  type RTCIceCandidatePairStats = aspect RTCStats
  {
    availableIncomingBitrate: Number

    availableOutgoingBitrate: Number

    bytesReceived: Number

    bytesSent: Number

    currentRoundTripTime: Number

    lastPacketReceivedTimestamp: DOMHighResTimeStamp

    lastPacketSentTimestamp: DOMHighResTimeStamp

    localCandidateId: Text

    nominated: YesNo

    remoteCandidateId: Text

    requestsReceived: Number

    requestsSent: Number

    responsesReceived: Number

    responsesSent: Number

    state: RTCStatsIceCandidatePairState

    totalRoundTripTime: Number

    transportId: Text
  }


  type RTCIceServer = aspect
  {
    credential: Text

    urls: Object? /*(!)Текст | Список<Текст>*/

    username: Text
  }


  type RTCInboundRtpStreamStats = aspect RTCReceivedRtpStreamStats
  {
    audioLevel: Number

    bytesReceived: Number

    concealedSamples: Number

    concealmentEvents: Number

    decoderImplementation: Text

    estimatedPlayoutTimestamp: DOMHighResTimeStamp

    fecPacketsDiscarded: Number

    fecPacketsReceived: Number

    firCount: Number

    frameHeight: Number

    frameWidth: Number

    framesDecoded: Number

    framesDropped: Number

    framesPerSecond: Number

    framesReceived: Number

    headerBytesReceived: Number

    insertedSamplesForDeceleration: Number

    jitterBufferDelay: Number

    jitterBufferEmittedCount: Number

    keyFramesDecoded: Number

    kind: Text

    lastPacketReceivedTimestamp: DOMHighResTimeStamp

    mid: Text

    nackCount: Number

    packetsDiscarded: Number

    pliCount: Number

    qpSum: Number

    remoteId: Text

    removedSamplesForAcceleration: Number

    silentConcealedSamples: Number

    totalAudioEnergy: Number

    totalDecodeTime: Number

    totalInterFrameDelay: Number

    totalProcessingDelay: Number

    totalSamplesDuration: Number

    totalSamplesReceived: Number

    totalSquaredInterFrameDelay: Number

    trackIdentifier: Text
  }


  type RTCLocalSessionDescriptionInit = aspect
  {
    sdp: Text

    type`: RTCSdpType
  }


  type RTCOfferAnswerOptions = aspect
  {

  }


  type RTCOfferOptions = aspect RTCOfferAnswerOptions
  {
    iceRestart: YesNo

    offerToReceiveAudio: YesNo

    offerToReceiveVideo: YesNo
  }


  type RTCOutboundRtpStreamStats = aspect RTCSentRtpStreamStats
  {
    firCount: Number

    frameHeight: Number

    frameWidth: Number

    framesEncoded: Number

    framesPerSecond: Number

    framesSent: Number

    headerBytesSent: Number

    hugeFramesSent: Number

    keyFramesEncoded: Number

    mediaSourceId: Text

    nackCount: Number

    pliCount: Number

    qpSum: Number

    qualityLimitationResolutionChanges: Number

    remoteId: Text

    retransmittedBytesSent: Number

    retransmittedPacketsSent: Number

    rid: Text

    targetBitrate: Number

    totalEncodeTime: Number

    totalEncodedBytesTarget: Number

    totalPacketSendDelay: Number
  }


  type RTCPeerConnectionIceErrorEventInit = aspect EventInit
  {
    address: Text?

    errorCode: Number

    errorText: Text

    port: Number?

    url: Text
  }


  type RTCPeerConnectionIceEventInit = aspect EventInit
  {
    candidate: RTCIceCandidate?

    url: Text?
  }


  type RTCReceivedRtpStreamStats = aspect RTCRtpStreamStats
  {
    jitter: Number

    packetsLost: Number

    packetsReceived: Number
  }


  type RTCRtcpParameters = aspect
  {
    cname: Text

    reducedSize: YesNo
  }


  type RTCRtpCapabilities = aspect
  {
    codecs: Список<RTCRtpCodecCapability>

    headerExtensions: Список<RTCRtpHeaderExtensionCapability>
  }


  type RTCRtpCodec = aspect
  {
    channels: Number

    clockRate: Number

    mimeType: Text

    sdpFmtpLine: Text
  }


  type RTCRtpCodecCapability = aspect RTCRtpCodec
  {

  }


  type RTCRtpCodecParameters = aspect RTCRtpCodec
  {
    payloadType: Number
  }


  type RTCRtpCodingParameters = aspect
  {
    rid: Text
  }


  type RTCRtpContributingSource = aspect
  {
    audioLevel: Number

    rtpTimestamp: Number

    source: Number

    timestamp: DOMHighResTimeStamp
  }


  type RTCRtpEncodingParameters = aspect RTCRtpCodingParameters
  {
    active: YesNo

    maxBitrate: Number

    maxFramerate: Number

    networkPriority: RTCPriorityType

    priority: RTCPriorityType

    scaleResolutionDownBy: Number
  }


  type RTCRtpHeaderExtensionCapability = aspect
  {
    uri: Text
  }


  type RTCRtpHeaderExtensionParameters = aspect
  {
    encrypted: YesNo

    id: Number

    uri: Text
  }


  type RTCRtpParameters = aspect
  {
    codecs: Список<RTCRtpCodecParameters>

    headerExtensions: Список<RTCRtpHeaderExtensionParameters>

    rtcp: RTCRtcpParameters
  }


  type RTCRtpReceiveParameters = aspect RTCRtpParameters
  {

  }


  type RTCRtpSendParameters = aspect RTCRtpParameters
  {
    degradationPreference: RTCDegradationPreference

    encodings: Список<RTCRtpEncodingParameters>

    transactionId: Text
  }


  type RTCRtpStreamStats = aspect RTCStats
  {
    codecId: Text

    kind: Text

    ssrc: Number

    transportId: Text
  }


  type RTCRtpSynchronizationSource = aspect RTCRtpContributingSource
  {

  }


  type RTCRtpTransceiverInit = aspect
  {
    direction: RTCRtpTransceiverDirection

    sendEncodings: Список<RTCRtpEncodingParameters>

    streams: Список<MediaStream>
  }


  type RTCSentRtpStreamStats = aspect RTCRtpStreamStats
  {
    bytesSent: Number

    packetsSent: Number
  }


  type RTCSessionDescriptionInit = aspect
  {
    sdp: Text

    type`: RTCSdpType
  }


  type RTCStats = aspect
  {
    id: Text

    timestamp: DOMHighResTimeStamp

    type`: RTCStatsType
  }


  type RTCTrackEventInit = aspect EventInit
  {
    receiver: RTCRtpReceiver

    streams: Список<MediaStream>

    track: MediaStreamTrack

    transceiver: RTCRtpTransceiver
  }


  type RTCTransportStats = aspect RTCStats
  {
    bytesReceived: Number

    bytesSent: Number

    dtlsCipher: Text

    dtlsState: RTCDtlsTransportState

    localCertificateId: Text

    remoteCertificateId: Text

    selectedCandidatePairId: Text

    srtpCipher: Text

    tlsVersion: Text
  }


  type ReadableStreamGetReaderOptions = aspect
  {
    mode: ReadableStreamReaderMode
  }


  type ReadableStreamReadDoneResult<T> = aspect
  {
    done: YesNo

    value: T
  }


  type ReadableStreamReadValueResult<T> = aspect
  {
    done: YesNo

    value: T
  }


  type ReadableWritablePair<R, W> = aspect
  {
    readable: ReadableStream<R>

    writable: WritableStream<W>
  }


  type RegistrationOptions = aspect
  {
    scope: Text

    type`: WorkerType

    updateViaCache: ServiceWorkerUpdateViaCache
  }


  type ReportingObserverOptions = aspect
  {
    buffered: YesNo

    types: Список<Текст>
  }


  type RequestInit = aspect
  {
    body: BodyInit?

    cache: RequestCache

    credentials: RequestCredentials

    headers: HeadersInit

    integrity: Text

    keepalive: YesNo

    method: Text

    mode: RequestMode

    redirect: RequestRedirect

    referrer: Text

    referrerPolicy: ReferrerPolicy

    signal: AbortSignal?

    window: Empty
  }


  type ResizeObserverOptions = aspect
  {
    box: ResizeObserverBoxOptions
  }


  type ResponseInit = aspect
  {
    headers: HeadersInit

    status: Number

    statusText: Text
  }


  type RsaHashedImportParams = aspect Algorithm
  {
    hash: HashAlgorithmIdentifier
  }


  type RsaHashedKeyAlgorithm = aspect RsaKeyAlgorithm
  {
    hash: KeyAlgorithm
  }


  type RsaHashedKeyGenParams = aspect RsaKeyGenParams
  {
    hash: HashAlgorithmIdentifier
  }


  type RsaKeyAlgorithm = aspect KeyAlgorithm
  {
    modulusLength: Number

    publicExponent: BigInteger
  }


  type RsaKeyGenParams = aspect Algorithm
  {
    modulusLength: Number

    publicExponent: BigInteger
  }


  type RsaOaepParams = aspect Algorithm
  {
    label: BufferSource
  }


  type RsaOtherPrimesInfo = aspect
  {
    d: Text

    r: Text

    t: Text
  }


  type RsaPssParams = aspect Algorithm
  {
    saltLength: Number
  }


  type SVGBoundingBoxOptions = aspect
  {
    clipped: YesNo

    fill: YesNo

    markers: YesNo

    stroke: YesNo
  }


  type ScrollIntoViewOptions = aspect ScrollOptions
  {
    block: ScrollLogicalPosition

    inline: ScrollLogicalPosition
  }


  type ScrollOptions = aspect
  {
    behavior: ScrollBehavior
  }


  type ScrollToOptions = aspect ScrollOptions
  {
    left: Number

    top: Number
  }


  type SecurityPolicyViolationEventInit = aspect EventInit
  {
    blockedURI: Text

    columnNumber: Number

    disposition: SecurityPolicyViolationEventDisposition

    documentURI: Text

    effectiveDirective: Text

    lineNumber: Number

    originalPolicy: Text

    referrer: Text

    sample: Text

    sourceFile: Text

    statusCode: Number

    violatedDirective: Text
  }


  type ShadowRootInit = aspect
  {
    delegatesFocus: YesNo

    mode: ShadowRootMode

    slotAssignment: SlotAssignmentMode
  }


  type ShareData = aspect
  {
    files: Список<File>

    text: Text

    title: Text

    url: Text
  }


  type SpeechSynthesisErrorEventInit = aspect SpeechSynthesisEventInit
  {
    error`: SpeechSynthesisErrorCode
  }


  type SpeechSynthesisEventInit = aspect EventInit
  {
    charIndex: Number

    charLength: Number

    elapsedTime: Number

    name: Text

    utterance: SpeechSynthesisUtterance
  }


  type StaticRangeInit = aspect
  {
    endContainer: Node

    endOffset: Number

    startContainer: Node

    startOffset: Number
  }


  type StereoPannerOptions = aspect AudioNodeOptions
  {
    pan: Number
  }


  type StorageEstimate = aspect
  {
    quota: Number

    usage: Number
  }


  type StorageEventInit = aspect EventInit
  {
    key: Text?

    newValue: Text?

    oldValue: Text?

    storageArea: Storage?

    url: Text
  }


  type StreamPipeOptions = aspect
  {
    preventAbort: YesNo

    preventCancel: YesNo

    preventClose: YesNo

    signal: AbortSignal
  }


  type StructuredSerializeOptions = aspect
  {
    transfer: Список<Transferable>
  }


  type SubmitEventInit = aspect EventInit
  {
    submitter: HTMLElement?
  }


  type TextDecodeOptions = aspect
  {
    stream: YesNo
  }


  type TextDecoderOptions = aspect
  {
    fatal: YesNo

    ignoreBOM: YesNo
  }


  type TextEncoderEncodeIntoResult = aspect
  {
    read: Number

    written: Number
  }


  type ToggleEventInit = aspect EventInit
  {
    newState: Text

    oldState: Text
  }


  type TouchEventInit = aspect EventModifierInit
  {
    changedTouches: Список<Touch>

    targetTouches: Список<Touch>

    touches: Список<Touch>
  }


  type TouchInit = aspect
  {
    altitudeAngle: Number

    azimuthAngle: Number

    clientX: Number

    clientY: Number

    force: Number

    identifier: Number

    pageX: Number

    pageY: Number

    radiusX: Number

    radiusY: Number

    rotationAngle: Number

    screenX: Number

    screenY: Number

    target: EventTarget

    touchType: TouchType
  }


  type TrackEventInit = aspect EventInit
  {
    track: TextTrack?
  }


  type Transformer<I, O> = aspect
  {
    flush: TransformerFlushCallback<O>

    readableType: Empty

    start: TransformerStartCallback<O>

    transform: TransformerTransformCallback<I, O>

    writableType: Empty
  }


  type TransitionEventInit = aspect EventInit
  {
    elapsedTime: Number

    propertyName: Text

    pseudoElement: Text
  }


  type UIEventInit = aspect EventInit
  {
    detail: Number

    view: Window?
  }


  type ULongRange = aspect
  {
    max: Number

    min: Number
  }


  type UnderlyingByteSource = aspect
  {
    autoAllocateChunkSize: Number

    cancel: UnderlyingSourceCancelCallback

    pull: operation(controller: ReadableByteStreamController): PromiseLike<Ничего>?

    start: operation(controller: ReadableByteStreamController): /*(!) any */ Object?

    type`: Text // "bytes"
  }


  type UnderlyingDefaultSource<R> = aspect
  {
    cancel: UnderlyingSourceCancelCallback

    pull: operation(controller: ReadableStreamDefaultController<R>): PromiseLike<Ничего>?

    start: operation(controller: ReadableStreamDefaultController<R>): /*(!) any */ Object?

    type`: Empty
  }


  type UnderlyingSink<W> = aspect
  {
    abort: UnderlyingSinkAbortCallback

    close: UnderlyingSinkCloseCallback

    start: UnderlyingSinkStartCallback

    type`: Empty

    write: UnderlyingSinkWriteCallback<W>
  }


  type UnderlyingSource<R> = aspect
  {
    autoAllocateChunkSize: Number

    cancel: UnderlyingSourceCancelCallback

    pull: UnderlyingSourcePullCallback<R>

    start: UnderlyingSourceStartCallback<R>

    type`: ReadableStreamType
  }


  type ValidityStateFlags = aspect
  {
    badInput: YesNo

    customError: YesNo

    patternMismatch: YesNo

    rangeOverflow: YesNo

    rangeUnderflow: YesNo

    stepMismatch: YesNo

    tooLong: YesNo

    tooShort: YesNo

    typeMismatch: YesNo

    valueMissing: YesNo
  }


  type VideoColorSpaceInit = aspect
  {
    fullRange: YesNo?

    matrix: VideoMatrixCoefficients?

    primaries: VideoColorPrimaries?

    transfer: VideoTransferCharacteristics?
  }


  type VideoConfiguration = aspect
  {
    bitrate: Number

    colorGamut: ColorGamut

    contentType: Text

    framerate: Number

    hdrMetadataType: HdrMetadataType

    height: Number

    scalabilityMode: Text

    transferFunction: TransferFunction

    width: Number
  }


  type VideoDecoderConfig = aspect
  {
    codec: Text

    codedHeight: Number

    codedWidth: Number

    colorSpace: VideoColorSpaceInit

    description: BufferSource

    displayAspectHeight: Number

    displayAspectWidth: Number

    hardwareAcceleration: HardwareAcceleration

    optimizeForLatency: YesNo
  }


  type VideoDecoderInit = aspect
  {
    error`: WebCodecsErrorCallback

    output: VideoFrameOutputCallback
  }


  type VideoDecoderSupport = aspect
  {
    config: VideoDecoderConfig

    supported: YesNo
  }


  type VideoEncoderConfig = aspect
  {
    alpha: AlphaOption

    avc: AvcEncoderConfig

    bitrate: Number

    bitrateMode: VideoEncoderBitrateMode

    codec: Text

    displayHeight: Number

    displayWidth: Number

    framerate: Number

    hardwareAcceleration: HardwareAcceleration

    height: Number

    latencyMode: LatencyMode

    scalabilityMode: Text

    width: Number
  }


  type VideoEncoderEncodeOptions = aspect
  {
    keyFrame: YesNo
  }


  type VideoEncoderInit = aspect
  {
    error`: WebCodecsErrorCallback

    output: EncodedVideoChunkOutputCallback
  }


  type VideoEncoderSupport = aspect
  {
    config: VideoEncoderConfig

    supported: YesNo
  }


  type VideoFrameBufferInit = aspect
  {
    codedHeight: Number

    codedWidth: Number

    colorSpace: VideoColorSpaceInit

    displayHeight: Number

    displayWidth: Number

    duration: Number

    format: VideoPixelFormat

    layout: Список<PlaneLayout>

    timestamp: Number

    visibleRect: DOMRectInit
  }


  type VideoFrameCallbackMetadata = aspect
  {
    captureTime: DOMHighResTimeStamp

    expectedDisplayTime: DOMHighResTimeStamp

    height: Number

    mediaTime: Number

    presentationTime: DOMHighResTimeStamp

    presentedFrames: Number

    processingDuration: Number

    receiveTime: DOMHighResTimeStamp

    rtpTimestamp: Number

    width: Number
  }


  type VideoFrameCopyToOptions = aspect
  {
    layout: Список<PlaneLayout>

    rect: DOMRectInit
  }


  type VideoFrameInit = aspect
  {
    alpha: AlphaOption

    displayHeight: Number

    displayWidth: Number

    duration: Number

    timestamp: Number

    visibleRect: DOMRectInit
  }


  type WaveShaperOptions = aspect AudioNodeOptions
  {
    curve: Object? /*(!)Список<Number> | Float32Array*/

    oversample: OverSampleType
  }


  type WebGLContextAttributes = aspect
  {
    alpha: YesNo

    antialias: YesNo

    depth: YesNo

    desynchronized: YesNo

    failIfMajorPerformanceCaveat: YesNo

    powerPreference: WebGLPowerPreference

    premultipliedAlpha: YesNo

    preserveDrawingBuffer: YesNo

    stencil: YesNo
  }


  type WebGLContextEventInit = aspect EventInit
  {
    statusMessage: Text
  }


  type WebTransportCloseInfo = aspect
  {
    closeCode: Number

    reason: Text
  }


  type WebTransportErrorOptions = aspect
  {
    source: WebTransportErrorSource

    streamErrorCode: Number?
  }


  type WebTransportHash = aspect
  {
    algorithm: Text

    value: BufferSource
  }


  type WebTransportOptions = aspect
  {
    allowPooling: YesNo

    congestionControl: WebTransportCongestionControl

    requireUnreliable: YesNo

    serverCertificateHashes: Список<WebTransportHash>
  }


  type WebTransportSendStreamOptions = aspect
  {
    sendOrder: Number?
  }


  type WheelEventInit = aspect MouseEventInit
  {
    deltaMode: Number

    deltaX: Number

    deltaY: Number

    deltaZ: Number
  }


  type WindowPostMessageOptions = aspect StructuredSerializeOptions
  {
    targetOrigin: Text
  }


  type WorkerOptions = aspect
  {
    credentials: RequestCredentials

    name: Text

    type`: WorkerType
  }


  type WorkletOptions = aspect
  {
    credentials: RequestCredentials
  }


  type WriteParams = aspect
  {
    data: Object? /*(!)BufferSource | Blob | Текст | пусто*/

    position: Number?

    size: Number?

    type`: WriteCommandType
  }


  // type NodeFilter = Object? /*(!)operation(node: Node): Number | объект { operation acceptNode(node: Node): Number }*/

  NodeFilter: object
  {
    guarded FILTER_ACCEPT = 1
    guarded FILTER_REJECT = 2
    guarded FILTER_SKIP = 3
    guarded SHOW_ALL = 0xFFFFFFFF
    guarded SHOW_ELEMENT = 0x1
    guarded SHOW_ATTRIBUTE = 0x2
    guarded SHOW_TEXT = 0x4
    guarded SHOW_CDATA_SECTION = 0x8
    guarded SHOW_ENTITY_REFERENCE = 0x10
    guarded SHOW_ENTITY = 0x20
    guarded SHOW_PROCESSING_INSTRUCTION = 0x40
    guarded SHOW_COMMENT = 0x80
    guarded SHOW_DOCUMENT = 0x100
    guarded SHOW_DOCUMENT_TYPE = 0x200
    guarded SHOW_DOCUMENT_FRAGMENT = 0x400
    guarded SHOW_NOTATION = 0x800
  }


  type XPathNSResolver = Object? /*(!)operation(prefix: Text?): Text? | объект { operation lookupNamespaceURI(prefix: Text?): Text? }*/

  /**
  * The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays)
  */

  type ANGLE_instanced_arrays = aspect
  {
    operation drawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei)

    operation drawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type`: GLenum, offset: GLintptr, primcount: GLsizei)

    operation vertexAttribDivisorANGLE(index: GLuint, divisor: GLuint)

    guarded
    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE
  }


  type ARIAMixin = aspect
  {
    ariaAtomic: Text?

    ariaAutoComplete: Text?

    ariaBusy: Text?

    ariaChecked: Text?

    ariaColCount: Text?

    ariaColIndex: Text?

    ariaColSpan: Text?

    ariaCurrent: Text?

    ariaDisabled: Text?

    ariaExpanded: Text?

    ariaHasPopup: Text?

    ariaHidden: Text?

    ariaInvalid: Text?

    ariaKeyShortcuts: Text?

    ariaLabel: Text?

    ariaLevel: Text?

    ariaLive: Text?

    ariaModal: Text?

    ariaMultiLine: Text?

    ariaMultiSelectable: Text?

    ariaOrientation: Text?

    ariaPlaceholder: Text?

    ariaPosInSet: Text?

    ariaPressed: Text?

    ariaReadOnly: Text?

    ariaRequired: Text?

    ariaRoleDescription: Text?

    ariaRowCount: Text?

    ariaRowIndex: Text?

    ariaRowSpan: Text?

    ariaSelected: Text?

    ariaSetSize: Text?

    ariaSort: Text?

    ariaValueMax: Text?

    ariaValueMin: Text?

    ariaValueNow: Text?

    ariaValueText: Text?

    role: Text?
  }


  /**
  * A controller object that allows you to abort one or more DOM requests as and when desired.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController)
  */

  type AbortController = object
  {
    guarded
    signal: AbortSignal

    on create()

    operation abort(reason: /*(!) any */ Object? = empty)
  }


  type AbortSignalEventMap = aspect
  {
    abort: Event
  }


  /**
  * A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)
  */

  type AbortSignalOnAbort = operation(this: AbortSignal, ev: Event): /*(!) any */ Object?

  type AbortSignal = object EventTarget
  {
    prototype: AbortSignal

    guarded
    aborted: YesNo

    onabort: AbortSignalOnAbort?

    guarded
    reason: /*(!) any */ Object?

    operation throwIfAborted()

    operation addEventListener<K = /*(!) keyof AbortSignalEventMap */ Object?>(type`: K, listener: operation(this: AbortSignal, ev: /*(!) AbortSignalEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AbortSignalEventMap */ Object?>(type`: K, listener: operation(this: AbortSignal, ev: /*(!) AbortSignalEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    on create() //: AbortSignal

    operation abort(reason: /*(!) any */ Object? = empty): AbortSignal

    operation timeout(milliseconds: Number): AbortSignal
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange) */

  type AbstractRange = object
  {
    guarded
    collapsed: YesNo

    guarded
    endContainer: Node

    guarded
    endOffset: Number

    guarded
    startContainer: Node

    guarded
    startOffset: Number

    on create() // : AbstractRange
  }


  type AbstractWorkerEventMap = aspect
  {
    error`: ErrorEvent
  }


  type AbstractWorkerOnError = operation(this: AbstractWorker, ev: ErrorEvent): /*(!) any */ Object?

  type AbstractWorker = aspect
  {
    onerror: AbstractWorkerOnError?

    operation addEventListener<K = /*(!) keyof AbstractWorkerEventMap */ Object?>(type`: K, listener: operation(this: AbstractWorker, ev: /*(!) AbstractWorkerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AbstractWorkerEventMap */ Object?>(type`: K, listener: operation(this: AbstractWorker, ev: /*(!) AbstractWorkerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /**
  * A node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode)
  */


  type AnalyserNode = object AudioNode
  {
    prototype: AnalyserNode

    fftSize: Number

    guarded
    frequencyBinCount: Number

    maxDecibels: Number

    minDecibels: Number

    smoothingTimeConstant: Number

    on create(context: BaseAudioContext, options: AnalyserOptions? = empty)

    operation getByteFrequencyData(array: Uint8Array)

    operation getByteTimeDomainData(array: Uint8Array)

    operation getFloatFrequencyData(array: Float32Array)

    operation getFloatTimeDomainData(array: Float32Array)
  }


  type Animatable = aspect
  {
    operation animate(keyframes: Object? /*(!)Список<Keyframe> | PropertyIndexedKeyframes | пусто*/, options: Object? /*(!)Number | KeyframeAnimationOptions | пусто*/ = empty): Animation

    operation getAnimations(options: GetAnimationsOptions? = empty): Список<Animation>
  }


  type AnimationEventMap = aspect
  {
    cancel: AnimationPlaybackEvent

    finish: AnimationPlaybackEvent

    remove: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation) */

  type AnimationOnCancelOrFinish = operation(this: Animation, ev: AnimationPlaybackEvent): /*(!) any */ Object?
  type AnimationOnRemove = operation(this: Animation, ev: Event): /*(!) any */ Object?

  type Animation = object EventTarget
  {
    prototype: Animation

    currentTime: CSSNumberish?

    effect: AnimationEffect?

    guarded
    finished: Promise<Animation>

    id: Text

    oncancel: AnimationOnCancelOrFinish?

    onfinish: AnimationOnCancelOrFinish?

    onremove: AnimationOnRemove?

    guarded
    pending: YesNo

    guarded
    playState: AnimationPlayState

    playbackRate: Number

    guarded
    ready: Promise<Animation>

    guarded
    replaceState: AnimationReplaceState

    startTime: CSSNumberish?

    timeline: AnimationTimeline?

    on create(effect: AnimationEffect? = empty, timeline: AnimationTimeline? = empty)

    operation cancel()

    operation commitStyles()

    operation finish()

    operation pause()

    operation persist()

    operation play()

    operation reverse()

    operation updatePlaybackRate(playbackRate: Number)

    operation addEventListener<K = /*(!) keyof AnimationEventMap */ Object?>(type`: K, listener: operation(this: Animation, ev: /*(!) AnimationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AnimationEventMap */ Object?>(type`: K, listener: operation(this: Animation, ev: /*(!) AnimationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect) */

  type AnimationEffect = object
  {
    prototype: AnimationEffect

    on create()

    operation getComputedTiming(): ComputedEffectTiming

    operation getTiming(): EffectTiming

    operation updateTiming(timing: OptionalEffectTiming? = empty)
  }


  /**
  * Events providing information related to animations.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent)
  */

  type AnimationEvent = object Event
  {
    guarded
    animationName: Text

    guarded
    elapsedTime: Number

    guarded
    pseudoElement: Text

    prototype: AnimationEvent

    on create(type`: Text, animationEventInitDict: AnimationEventInit? = empty)
  }


  type AnimationFrameProvider = aspect
  {
    operation cancelAnimationFrame(handle: Number)

    operation requestAnimationFrame(callback: FrameRequestCallback): Number
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent) */

  type AnimationPlaybackEvent = object Event
  {
    guarded
    currentTime: CSSNumberish?

    guarded
    timelineTime: CSSNumberish?

    prototype: AnimationPlaybackEvent

    on create(type`: Text, eventInitDict: AnimationPlaybackEventInit? = empty)
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline) */

  type AnimationTimeline = object
  {
    guarded
    currentTime: CSSNumberish?

    prototype: AnimationTimeline

    on create(): AnimationTimeline
  }


  /**
  * A DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr)
  */

  type Attr = object Node
  {
    guarded
    ownerDocument: Document

    prototype: Attr

    on create()
  }


  /**
  * A short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer)
  */

  type AudioBuffer = object
  {
    guarded
    duration: Number

    guarded
    length: Number

    guarded
    numberOfChannels: Number

    guarded
    sampleRate: Number

    prototype: AudioBuffer

    on create(options: AudioBufferOptions)

    operation copyFromChannel(destination: Float32Array, channelNumber: Number, bufferOffset: Number? = empty)

    operation copyToChannel(source: Float32Array, channelNumber: Number, bufferOffset: Number? = empty)

    operation getChannelData(channel: Number): Float32Array
  }


  /**
  * An AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode)
  */

  type AudioBufferSourceNode = object AudioScheduledSourceNode
  {
    buffer: AudioBuffer?

    guarded
    detune: AudioParam

    loop`: YesNo

    loopEnd: Number

    loopStart: Number

    guarded
    playbackRate: AudioParam

    prototype: AudioBufferSourceNode

    on create(context: BaseAudioContext, options: AudioBufferSourceOptions? = empty)

    operation start(when: Number? = empty, offset: Number? = empty, duration: Number? = empty)

    operation addEventListener<K = /*(!) keyof AudioScheduledSourceNodeEventMap */ Object?>(type`: K, listener: operation(this: AudioBufferSourceNode, ev: /*(!) AudioScheduledSourceNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AudioScheduledSourceNodeEventMap */ Object?>(type`: K, listener: operation(this: AudioBufferSourceNode, ev: /*(!) AudioScheduledSourceNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /**
  * An audio-processing graph built from audio modules linked together, each represented by an AudioNode.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext)
  */

  type AudioContext = object BaseAudioContext
  {
    guarded
    baseLatency: Number

    guarded
    outputLatency: Number

    prototype: AudioContext
    
    on create(contextOptions: AudioContextOptions? = empty)

    operation close(): Promise<Ничего>

    operation createMediaElementSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode

    operation createMediaStreamDestination(): MediaStreamAudioDestinationNode

    operation createMediaStreamSource(mediaStream: MediaStream): MediaStreamAudioSourceNode

    operation getOutputTimestamp(): AudioTimestamp

    operation resume(): Promise<Ничего>

    operation suspend(): Promise<Ничего>

    operation addEventListener<K = /*(!) keyof BaseAudioContextEventMap */ Object?>(type`: K, listener: operation(this: AudioContext, ev: /*(!) BaseAudioContextEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof BaseAudioContextEventMap */ Object?>(type`: K, listener: operation(this: AudioContext, ev: /*(!) BaseAudioContextEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /**
  * AudioDestinationNode has no output (as it is the output, no more AudioNode can be linked after it in the audio graph) and one input. The number of channels in the input must be between 0 and the maxChannelCount value or an exception is raised.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode)
  */

  type AudioDestinationNode = object AudioNode
  {
    guarded
    maxChannelCount: Number

    prototype: AudioDestinationNode
  }


  /**
  * The position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener)
  */

  type AudioListener = object
  {
    prototype: AudioListener
  }


  /**
  * A generic interface for representing an audio processing module. Examples include:
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode)
  */

  type AudioNode = aspect EventTarget
  {
    channelCount: Number

    channelCountMode: ChannelCountMode

    channelInterpretation: ChannelInterpretation

    guarded
    context: BaseAudioContext

    guarded
    numberOfInputs: Number

    guarded
    numberOfOutputs: Number

    prototype: AudioNode

    on create()

    operation connect(destinationNode: AudioNode, output: Number? = empty, input: Number? = empty): AudioNode

    operation connect(destinationParam: AudioParam, output: Number? = empty)

    operation disconnect()

    operation disconnect(output: Number)

    operation disconnect(destinationNode: AudioNode)

    operation disconnect(destinationNode: AudioNode, output: Number)

    operation disconnect(destinationNode: AudioNode, output: Number, input: Number)

    operation disconnect(destinationParam: AudioParam)

    operation disconnect(destinationParam: AudioParam, output: Number)
  }


  /**
  * The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam)
  */

  type AudioParam = object
  {
    automationRate: AutomationRate

    guarded
    defaultValue: Number

    guarded
    maxValue: Number

    guarded
    minValue: Number

    value: Number

    prototype: AudioParam

    on create()

    operation cancelAndHoldAtTime(cancelTime: Number): AudioParam

    operation cancelScheduledValues(cancelTime: Number): AudioParam

    operation exponentialRampToValueAtTime(value: Number, endTime: Number): AudioParam

    operation linearRampToValueAtTime(value: Number, endTime: Number): AudioParam

    operation setTargetAtTime(target: Number, startTime: Number, timeConstant: Number): AudioParam

    operation setValueAtTime(value: Number, startTime: Number): AudioParam

    operation setValueCurveAtTime(values: Object? /*(!)Список<Number> | Float32Array*/, startTime: Number, duration: Number): AudioParam
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParamMap) */

  type AudioParamMap = aspect
  {
    prototype: AudioParamMap

    on create()

    operation forEach(callbackfn: operation(value: AudioParam, key: Text, parent: AudioParamMap), thisArg: /*(!) any */ Object? = empty)
  }


  type AudioScheduledSourceNodeEventMap = aspect
  {
    ended: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode) */

  type AudioScheduledSourceNode = object AudioNode
  {
    onended: (operation(this: AudioScheduledSourceNode, ev: Event): /*(!) any */ Object?)?

    prototype: AudioScheduledSourceNode
    
    on create(): AudioScheduledSourceNode

    operation start(when: Number? = empty)

    operation stop(when: Number? = empty)

    operation addEventListener<K = /*(!) keyof AudioScheduledSourceNodeEventMap */ Object?>(type`: K, listener: operation(this: AudioScheduledSourceNode, ev: /*(!) AudioScheduledSourceNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AudioScheduledSourceNodeEventMap */ Object?>(type`: K, listener: operation(this: AudioScheduledSourceNode, ev: /*(!) AudioScheduledSourceNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorklet)
  */

  type AudioWorklet = aspect Worklet
  {
    prototype: AudioWorklet
    on create()
  }


  type AudioWorkletNodeEventMap = aspect
  {
    processorerror: Event
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode)
  */

  type AudioWorkletNode = object AudioNode
  {
    onprocessorerror: (operation(this: AudioWorkletNode, ev: Event): /*(!) any */ Object?)?

    guarded
    parameters: AudioParamMap

    guarded
    port: MessagePort

    prototype: AudioWorkletNode
    
    on create(context: BaseAudioContext, name: Text, options: AudioWorkletNodeOptions? = empty)

    operation addEventListener<K = /*(!) keyof AudioWorkletNodeEventMap */ Object?>(type`: K, listener: operation(this: AudioWorkletNode, ev: /*(!) AudioWorkletNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AudioWorkletNodeEventMap */ Object?>(type`: K, listener: operation(this: AudioWorkletNode, ev: /*(!) AudioWorkletNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse)
  */

  type AuthenticatorAssertionResponse = object AuthenticatorResponse
  {
    guarded
    authenticatorData: ArrayBuffer

    guarded
    signature: ArrayBuffer

    guarded
    userHandle: ArrayBuffer?

    prototype: AuthenticatorAssertionResponse

    on create()
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse)
  */

  type AuthenticatorAttestationResponse = object AuthenticatorResponse
  {
    guarded
    attestationObject: ArrayBuffer

    prototype: AuthenticatorAttestationResponse

    operation getAuthenticatorData(): ArrayBuffer

    operation getPublicKey(): ArrayBuffer?

    operation getPublicKeyAlgorithm(): COSEAlgorithmIdentifier

    operation getTransports(): Список<Текст>
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse)
  */

  type AuthenticatorResponse = object
  {
    guarded
    clientDataJSON: ArrayBuffer

    prototype: AuthenticatorResponse
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/BarProp) */

  type BarProp = aspect
  {
    guarded
    visible: YesNo

    prototype: BarProp
  }


  type BaseAudioContextEventMap = aspect
  {
    statechange: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext) */

  type BaseAudioContext = object EventTarget
  {
    prototype: BaseAudioContext

    operation addEventListener<K = /*(!) keyof BaseAudioContextEventMap */ Object?>(type`: K, listener: operation(this: BaseAudioContext, ev: /*(!) BaseAudioContextEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof BaseAudioContextEventMap */ Object?>(type`: K, listener: operation(this: BaseAudioContext, ev: /*(!) BaseAudioContextEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /**
  * The beforeunload event is fired when the window, the document and its resources are about to be unloaded.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BeforeUnloadEvent)
  */

  type BeforeUnloadEvent = object Event
  {
    returnValue: /*(!) any */ Object?

    prototype: BeforeUnloadEvent
  }


  /**
  * A simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode)
  */

  type BiquadFilterNode = object AudioNode
  {
    guarded
    Q: AudioParam

    guarded
    detune: AudioParam

    guarded
    frequency: AudioParam

    guarded
    gain: AudioParam

    type`: BiquadFilterType

    prototype: BiquadFilterNode

    on create(context: BaseAudioContext, options: BiquadFilterOptions? = empty)

    operation getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array)
  }


  /**
  * A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)
  */

  type Blob = object
  {
    guarded
    size: Number

    guarded
    type`: Text

    prototype: Blob
    
    on create(blobParts: Список<BlobPart>? = empty, options: BlobPropertyBag? = empty)

    operation arrayBuffer(): Promise<ArrayBuffer>

    operation slice(start: Number? = empty, end: Number? = empty, contentType: Text? = empty): Blob

    operation stream(): ReadableStream<Uint8Array>

    operation text(): Promise<Текст>
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent) */

  type BlobEvent = object Event
  {
    guarded
    data: Blob

    guarded
    timecode: DOMHighResTimeStamp

    prototype: BlobEvent

    on create(type`: Text, eventInitDict: BlobEventInit)
  }


  type Body = aspect
  {
    guarded
    body: ReadableStream<Uint8Array>?

    guarded
    bodyUsed: YesNo

    operation arrayBuffer(): Promise<ArrayBuffer>

    operation blob(): Promise<Blob>

    operation formData(): Promise<FormData>

    operation json(): Promise</*(!) any */ Object?>

    operation text(): Promise<Текст>
  }


  type BroadcastChannelEventMap = aspect
  {
    message: MessageEvent

    messageerror: MessageEvent
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel) */

  type BroadcastChannel = object EventTarget
  {
    guarded
    name: Text

    onmessage: (operation(this: BroadcastChannel, ev: MessageEvent): /*(!) any */ Object?)?

    onmessageerror: (operation(this: BroadcastChannel, ev: MessageEvent): /*(!) any */ Object?)?

    prototype: BroadcastChannel

    on create(name: Text)

    operation close()

    operation postMessage(message: /*(!) any */ Object?)

    operation addEventListener<K = /*(!) keyof BroadcastChannelEventMap */ Object?>(type`: K, listener: operation(this: BroadcastChannel, ev: /*(!) BroadcastChannelEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof BroadcastChannelEventMap */ Object?>(type`: K, listener: operation(this: BroadcastChannel, ev: /*(!) BroadcastChannelEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /**
  * This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)
  */

  type ByteLengthQueuingStrategy = object QueuingStrategy<ArrayBufferView>
  {
    guarded
    highWaterMark: Number

    guarded
    size: QueuingStrategySize<ArrayBufferView>

    prototype: ByteLengthQueuingStrategy

    on create(init: QueuingStrategyInit)
  }


  /**
  * A CDATA section that can be used within XML to include extended portions of unescaped text. The symbols < and & don’t need escaping as they normally do when inside a CDATA section.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CDATASection)
  */

  type CDATASection = object Text
  {
    prototype: CDATASection
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation) */

  type CSSAnimation = object Animation
  {
    guarded
    animationName: Text

    prototype: CSSAnimation

    operation addEventListener<K = /*(!) keyof AnimationEventMap */ Object?>(type`: K, listener: operation(this: CSSAnimation, ev: /*(!) AnimationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AnimationEventMap */ Object?>(type`: K, listener: operation(this: CSSAnimation, ev: /*(!) AnimationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /**
  * A single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule)
  */

  type CSSConditionRule = aspect CSSGroupingRule
  {
    guarded
    conditionText: Text
  }


  /*(!) var */ CSSConditionRule: object { prototype: CSSConditionRule; on create(): CSSConditionRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule) */

  type CSSContainerRule = aspect CSSConditionRule
  {
    guarded
    containerName: Text

    guarded
    containerQuery: Text
  }


  /*(!) var */ CSSContainerRule: object { prototype: CSSContainerRule; on create(): CSSContainerRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule) */

  type CSSCounterStyleRule = aspect CSSRule
  {
    additiveSymbols: Text

    fallback: Text

    name: Text

    negative: Text

    pad: Text

    prefix: Text

    range: Text

    speakAs: Text

    suffix: Text

    symbols: Text

    system: Text
  }


  /*(!) var */ CSSCounterStyleRule: object { prototype: CSSCounterStyleRule; on create(): CSSCounterStyleRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule) */

  type CSSFontFaceRule = aspect CSSRule
  {
    guarded
    style: CSSStyleDeclaration
  }


  /*(!) var */ CSSFontFaceRule: object { prototype: CSSFontFaceRule; on create(): CSSFontFaceRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule) */

  type CSSFontFeatureValuesRule = aspect CSSRule
  {
    fontFamily: Text
  }


  /*(!) var */ CSSFontFeatureValuesRule: object { prototype: CSSFontFeatureValuesRule; on create(): CSSFontFeatureValuesRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule) */

  type CSSFontPaletteValuesRule = aspect CSSRule
  {
    guarded
    basePalette: Text

    guarded
    fontFamily: Text

    guarded
    name: Text

    guarded
    overrideColors: Text
  }


  /*(!) var */ CSSFontPaletteValuesRule: object { prototype: CSSFontPaletteValuesRule; on create(): CSSFontPaletteValuesRule }


  /**
  * Any CSS at-rule that contains other rules nested within it.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule)
  */

  type CSSGroupingRule = aspect CSSRule
  {
    guarded
    cssRules: CSSRuleList

    operation deleteRule(index: Number)

    operation insertRule(rule: Text, index: Number? = empty): Number
  }


  /*(!) var */ CSSGroupingRule: object { prototype: CSSGroupingRule; on create(): CSSGroupingRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImageValue) */

  type CSSImageValue = aspect CSSStyleValue
  {

  }


  /*(!) var */ CSSImageValue: object { prototype: CSSImageValue; on create(): CSSImageValue }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule) */

  type CSSImportRule = aspect CSSRule
  {
    guarded
    href: Text

    guarded
    layerName: Text?

    guarded
    media: MediaList

    guarded
    styleSheet: CSSStyleSheet?
  }


  /*(!) var */ CSSImportRule: object { prototype: CSSImportRule; on create(): CSSImportRule }


  /**
  * An object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a @keyframes at-rule. It implements the CSSRule interface with a type value of 8 (CSSRule.KEYFRAME_RULE).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule)
  */

  type CSSKeyframeRule = aspect CSSRule
  {
    keyText: Text

    guarded
    style: CSSStyleDeclaration
  }


  /*(!) var */ CSSKeyframeRule: object { prototype: CSSKeyframeRule; on create(): CSSKeyframeRule }


  /**
  * An object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole @keyframes at-rule. It implements the CSSRule interface with a type value of 7 (CSSRule.KEYFRAMES_RULE).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule)
  */

  type CSSKeyframesRule = aspect CSSRule
  {
    guarded
    cssRules: CSSRuleList

    guarded
    length: Number

    name: Text

    operation appendRule(rule: Text)

    operation deleteRule(select: Text)

    operation findRule(select: Text): CSSKeyframeRule?

    /*(!) [index: number]: CSSKeyframeRule*/
  }


  /*(!) var */ CSSKeyframesRule: object { prototype: CSSKeyframesRule; on create(): CSSKeyframesRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue) */

  type CSSKeywordValue = aspect CSSStyleValue
  {
    value: Text
  }


  /*(!) var */ CSSKeywordValue: object { prototype: CSSKeywordValue; on create(value: Text): CSSKeywordValue }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule) */

  type CSSLayerBlockRule = aspect CSSGroupingRule
  {
    guarded
    name: Text
  }


  /*(!) var */ CSSLayerBlockRule: object { prototype: CSSLayerBlockRule; on create(): CSSLayerBlockRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule) */

  type CSSLayerStatementRule = aspect CSSRule
  {
    guarded
    nameList: ReadonlyArray<Текст>
  }


  /*(!) var */ CSSLayerStatementRule: object { prototype: CSSLayerStatementRule; on create(): CSSLayerStatementRule }


  type CSSMathClamp = aspect CSSMathValue
  {
    guarded
    lower: CSSNumericValue

    guarded
    upper: CSSNumericValue

    guarded
    value: CSSNumericValue
  }


  /*(!) var */ CSSMathClamp: object { prototype: CSSMathClamp; on create(lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert) */

  type CSSMathInvert = aspect CSSMathValue
  {
    guarded
    value: CSSNumericValue
  }


  /*(!) var */ CSSMathInvert: object { prototype: CSSMathInvert; on create(arg: CSSNumberish): CSSMathInvert }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax) */

  type CSSMathMax = aspect CSSMathValue
  {
    guarded
    values: CSSNumericArray
  }


  /*(!) var */ CSSMathMax: object { prototype: CSSMathMax; #js.МассивПараметров on create(args: Список<CSSNumberish>): CSSMathMax }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin) */

  type CSSMathMin = aspect CSSMathValue
  {
    guarded
    values: CSSNumericArray
  }


  /*(!) var */ CSSMathMin: object { prototype: CSSMathMin; #js.МассивПараметров on create(args: Список<CSSNumberish>): CSSMathMin }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate) */

  type CSSMathNegate = aspect CSSMathValue
  {
    guarded
    value: CSSNumericValue
  }


  /*(!) var */ CSSMathNegate: object { prototype: CSSMathNegate; on create(arg: CSSNumberish): CSSMathNegate }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct) */

  type CSSMathProduct = aspect CSSMathValue
  {
    guarded
    values: CSSNumericArray
  }


  /*(!) var */ CSSMathProduct: object { prototype: CSSMathProduct; #js.МассивПараметров on create(args: Список<CSSNumberish>): CSSMathProduct }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum) */

  type CSSMathSum = aspect CSSMathValue
  {
    guarded
    values: CSSNumericArray
  }


  /*(!) var */ CSSMathSum: object { prototype: CSSMathSum; #js.МассивПараметров on create(args: Список<CSSNumberish>): CSSMathSum }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue) */

  type CSSMathValue = aspect CSSNumericValue
  {
    guarded
    operator: CSSMathOperator
  }


  /*(!) var */ CSSMathValue: object { prototype: CSSMathValue; on create(): CSSMathValue }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent) */

  type CSSMatrixComponent = aspect CSSTransformComponent
  {
    matrix: DOMMatrix
  }


  /*(!) var */ CSSMatrixComponent: object { prototype: CSSMatrixComponent; on create(matrix: DOMMatrixReadOnly, options: CSSMatrixComponentOptions? = empty): CSSMatrixComponent }


  /**
  * A single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMediaRule)
  */

  type CSSMediaRule = aspect CSSConditionRule
  {
    guarded
    media: MediaList
  }


  /*(!) var */ CSSMediaRule: object { prototype: CSSMediaRule; on create(): CSSMediaRule }


  /**
  * An object representing a single CSS @namespace at-rule. It implements the CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule)
  */

  type CSSNamespaceRule = aspect CSSRule
  {
    guarded
    namespaceURI: Text

    guarded
    prefix: Text
  }


  /*(!) var */ CSSNamespaceRule: object { prototype: CSSNamespaceRule; on create(): CSSNamespaceRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray) */

  type CSSNumericArray = aspect
  {
    guarded
    length: Number

    operation forEach(callbackfn: operation(value: CSSNumericValue, key: Number, parent: CSSNumericArray), thisArg: /*(!) any */ Object? = empty)

    /*(!) [index: number]: CSSNumericValue*/
  }


  /*(!) var */ CSSNumericArray: object { prototype: CSSNumericArray; on create(): CSSNumericArray }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue) */

  type CSSNumericValue = aspect CSSStyleValue
  {
    #js.МассивПараметров
    operation add(values: Список<CSSNumberish>): CSSNumericValue

    #js.МассивПараметров
    operation div(values: Список<CSSNumberish>): CSSNumericValue

    #js.МассивПараметров
    operation equals(value: Список<CSSNumberish>): YesNo

    #js.МассивПараметров
    operation max(values: Список<CSSNumberish>): CSSNumericValue

    #js.МассивПараметров
    operation min(values: Список<CSSNumberish>): CSSNumericValue

    #js.МассивПараметров
    operation mul(values: Список<CSSNumberish>): CSSNumericValue

    #js.МассивПараметров
    operation sub(values: Список<CSSNumberish>): CSSNumericValue

    operation to(unit: Text): CSSUnitValue

    #js.МассивПараметров
    operation toSum(units: Список<Текст>): CSSMathSum

    operation type`(): CSSNumericType
  }


  /*(!) var */ CSSNumericValue: object { prototype: CSSNumericValue; on create(): CSSNumericValue; operation parse(cssText: Text): CSSNumericValue }


  /**
  * CSSPageRule is an interface representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule)
  */

  type CSSPageRule = aspect CSSGroupingRule
  {
    selectorText: Text

    guarded
    style: CSSStyleDeclaration
  }


  /*(!) var */ CSSPageRule: object { prototype: CSSPageRule; on create(): CSSPageRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective) */

  type CSSPerspective = aspect CSSTransformComponent
  {
    length: CSSPerspectiveValue
  }


  /*(!) var */ CSSPerspective: object { prototype: CSSPerspective; on create(length: CSSPerspectiveValue): CSSPerspective }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule) */

  type CSSPropertyRule = aspect CSSRule
  {
    guarded
    inherits: YesNo

    guarded
    initialValue: Text?

    guarded
    name: Text

    guarded
    syntax: Text
  }


  /*(!) var */ CSSPropertyRule: object { prototype: CSSPropertyRule; on create(): CSSPropertyRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate) */

  type CSSRotate = aspect CSSTransformComponent
  {
    angle: CSSNumericValue

    x: CSSNumberish

    y: CSSNumberish

    z: CSSNumberish
  }


  /*(!) var */ CSSRotate: object { prototype: CSSRotate; on create(angle: CSSNumericValue): CSSRotate; on create(x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate }


  /**
  * A single CSS rule. There are several types of rules, listed in the Type constants section below.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule)
  */

  type CSSRule = aspect
  {
    guarded
    STYLE_RULE: 1

    guarded
    CHARSET_RULE: 2

    guarded
    IMPORT_RULE: 3

    guarded
    MEDIA_RULE: 4

    guarded
    FONT_FACE_RULE: 5

    guarded
    PAGE_RULE: 6

    guarded
    NAMESPACE_RULE: 10

    guarded
    KEYFRAMES_RULE: 7

    guarded
    KEYFRAME_RULE: 8

    guarded
    SUPPORTS_RULE: 12
  }


  /*(!) var */ CSSRule: object { prototype: CSSRule; on create(): CSSRule; guarded STYLE_RULE: 1; guarded CHARSET_RULE: 2; guarded IMPORT_RULE: 3; guarded MEDIA_RULE: 4; guarded FONT_FACE_RULE: 5; guarded PAGE_RULE: 6; guarded NAMESPACE_RULE: 10; guarded KEYFRAMES_RULE: 7; guarded KEYFRAME_RULE: 8; guarded SUPPORTS_RULE: 12 }


  /**
  * A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList)
  */

  type CSSRuleList = aspect
  {
    guarded
    length: Number

    operation item(index: Number): CSSRule?

    /*(!) [index: number]: CSSRule*/
  }


  /*(!) var */ CSSRuleList: object { prototype: CSSRuleList; on create(): CSSRuleList }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale) */

  type CSSScale = aspect CSSTransformComponent
  {
    x: CSSNumberish

    y: CSSNumberish

    z: CSSNumberish
  }


  /*(!) var */ CSSScale: object { prototype: CSSScale; on create(x: CSSNumberish, y: CSSNumberish, z: CSSNumberish? = empty): CSSScale }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew) */

  type CSSSkew = aspect CSSTransformComponent
  {
    ax: CSSNumericValue

    ay: CSSNumericValue
  }


  /*(!) var */ CSSSkew: object { prototype: CSSSkew; on create(ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX) */

  type CSSSkewX = aspect CSSTransformComponent
  {
    ax: CSSNumericValue
  }


  /*(!) var */ CSSSkewX: object { prototype: CSSSkewX; on create(ax: CSSNumericValue): CSSSkewX }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY) */

  type CSSSkewY = aspect CSSTransformComponent
  {
    ay: CSSNumericValue
  }


  /*(!) var */ CSSSkewY: object { prototype: CSSSkewY; on create(ay: CSSNumericValue): CSSSkewY }


  /**
  * An object that is a CSS declaration block, and exposes style information and various style-related methods and properties.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration)
  */

  type CSSStyleDeclaration = aspect
  {
    alignmentBaseline: Text

    baselineShift: Text

    clipRule: Text

    colorInterpolation: Text

    colorInterpolationFilters: Text

    dominantBaseline: Text

    fill: Text

    fillOpacity: Text

    fillRule: Text

    floodColor: Text

    floodOpacity: Text

    lightingColor: Text

    marker: Text

    markerEnd: Text

    markerMid: Text

    markerStart: Text

    shapeRendering: Text

    stopColor: Text

    stopOpacity: Text

    stroke: Text

    strokeDasharray: Text

    strokeDashoffset: Text

    strokeLinecap: Text

    strokeLinejoin: Text

    strokeMiterlimit: Text

    strokeOpacity: Text

    strokeWidth: Text

    textAnchor: Text

    /*(!) [index: number]: string*/
  }


  /*(!) var */ CSSStyleDeclaration: object { prototype: CSSStyleDeclaration; on create(): CSSStyleDeclaration }


  /**
  * CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule)
  */

  type CSSStyleRule = aspect CSSRule
  {
    guarded
    cssRules: CSSRuleList

    selectorText: Text

    guarded
    style: CSSStyleDeclaration

    guarded
    styleMap: StylePropertyMap

    operation deleteRule(index: Number)

    operation insertRule(rule: Text, index: Number? = empty): Number
  }


  /*(!) var */ CSSStyleRule: object { prototype: CSSStyleRule; on create(): CSSStyleRule }


  /**
  * A single CSS style sheet. It inherits properties and methods from its parent, StyleSheet.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet)
  */

  type CSSStyleSheet = aspect StyleSheet
  {

  }


  /*(!) var */ CSSStyleSheet: object { prototype: CSSStyleSheet; on create(options: CSSStyleSheetInit? = empty): CSSStyleSheet }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue) */

  type CSSStyleValue = aspect
  {
    operation toString(): Text
  }


  /*(!) var */ CSSStyleValue: object { prototype: CSSStyleValue; on create(): CSSStyleValue; operation parse(property: Text, cssText: Text): CSSStyleValue; operation parseAll(property: Text, cssText: Text): Список<CSSStyleValue> }


  /**
  * An object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSupportsRule)
  */

  type CSSSupportsRule = aspect CSSConditionRule
  {

  }


  /*(!) var */ CSSSupportsRule: object { prototype: CSSSupportsRule; on create(): CSSSupportsRule }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent) */

  type CSSTransformComponent = aspect
  {
    is2D: YesNo

    operation toMatrix(): DOMMatrix

    operation toString(): Text
  }


  /*(!) var */ CSSTransformComponent: object { prototype: CSSTransformComponent; on create(): CSSTransformComponent }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue) */

  type CSSTransformValue = aspect CSSStyleValue
  {
    guarded
    is2D: YesNo

    guarded
    length: Number

    operation toMatrix(): DOMMatrix

    operation forEach(callbackfn: operation(value: CSSTransformComponent, key: Number, parent: CSSTransformValue), thisArg: /*(!) any */ Object? = empty)

    /*(!) [index: number]: CSSTransformComponent*/
  }


  /*(!) var */ CSSTransformValue: object { prototype: CSSTransformValue; on create(transforms: Список<CSSTransformComponent>): CSSTransformValue }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition) */

  type CSSTransition = aspect Animation
  {
    guarded
    transitionProperty: Text

    operation addEventListener<K = /*(!) keyof AnimationEventMap */ Object?>(type`: K, listener: operation(this: CSSTransition, ev: /*(!) AnimationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AnimationEventMap */ Object?>(type`: K, listener: operation(this: CSSTransition, ev: /*(!) AnimationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ CSSTransition: object { prototype: CSSTransition; on create(): CSSTransition }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate) */

  type CSSTranslate = aspect CSSTransformComponent
  {
    x: CSSNumericValue

    y: CSSNumericValue

    z: CSSNumericValue
  }


  /*(!) var */ CSSTranslate: object { prototype: CSSTranslate; on create(x: CSSNumericValue, y: CSSNumericValue, z: CSSNumericValue? = empty): CSSTranslate }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue) */

  type CSSUnitValue = aspect CSSNumericValue
  {
    guarded
    unit: Text

    value: Number
  }


  /*(!) var */ CSSUnitValue: object { prototype: CSSUnitValue; on create(value: Number, unit: Text): CSSUnitValue }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue) */

  type CSSUnparsedValue = aspect CSSStyleValue
  {
    guarded
    length: Number

    operation forEach(callbackfn: operation(value: CSSUnparsedSegment, key: Number, parent: CSSUnparsedValue), thisArg: /*(!) any */ Object? = empty)

    /*(!) [index: number]: CSSUnparsedSegment*/
  }


  /*(!) var */ CSSUnparsedValue: object { prototype: CSSUnparsedValue; on create(members: Список<CSSUnparsedSegment>): CSSUnparsedValue }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue) */

  type CSSVariableReferenceValue = aspect
  {
    guarded
    fallback: CSSUnparsedValue?

    variable: Text
  }


  /*(!) var */ CSSVariableReferenceValue: object { prototype: CSSVariableReferenceValue; on create(variable: Text, fallback: CSSUnparsedValue? = empty): CSSVariableReferenceValue }


  /**
  * Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache)
  */

  type Cache = aspect
  {
    operation add(request: Object? /*(!)RequestInfo | URL*/): Promise<Ничего>

    operation addAll(requests: Список<RequestInfo>): Promise<Ничего>

    operation delete(request: Object? /*(!)RequestInfo | URL*/, options: CacheQueryOptions? = empty): Promise<ДаНет>

    operation keys(request: Object? /*(!)RequestInfo | URL | пусто*/ = empty, options: CacheQueryOptions? = empty): Promise<ReadonlyArray<Request>>

    operation match(request: Object? /*(!)RequestInfo | URL*/, options: CacheQueryOptions? = empty): Promise<Response?>

    operation matchAll(request: Object? /*(!)RequestInfo | URL | пусто*/ = empty, options: CacheQueryOptions? = empty): Promise<ReadonlyArray<Response>>

    operation put(request: Object? /*(!)RequestInfo | URL*/, response: Response): Promise<Ничего>
  }


  /*(!) var */ Cache: object { prototype: Cache; on create(): Cache }


  /**
  * The storage for Cache objects.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage)
  */

  type CacheStorage = aspect
  {
    operation delete(cacheName: Text): Promise<ДаНет>

    operation has(cacheName: Text): Promise<ДаНет>

    operation keys(): Promise<Список<Текст>>

    operation match(request: Object? /*(!)RequestInfo | URL*/, options: MultiCacheQueryOptions? = empty): Promise<Response?>

    operation open(cacheName: Text): Promise<Cache>
  }


  /*(!) var */ CacheStorage: object { prototype: CacheStorage; on create(): CacheStorage }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack) */

  type CanvasCaptureMediaStreamTrack = aspect MediaStreamTrack
  {
    guarded
    canvas: HTMLCanvasElement

    operation requestFrame()

    operation addEventListener<K = /*(!) keyof MediaStreamTrackEventMap */ Object?>(type`: K, listener: operation(this: CanvasCaptureMediaStreamTrack, ev: /*(!) MediaStreamTrackEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MediaStreamTrackEventMap */ Object?>(type`: K, listener: operation(this: CanvasCaptureMediaStreamTrack, ev: /*(!) MediaStreamTrackEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ CanvasCaptureMediaStreamTrack: object { prototype: CanvasCaptureMediaStreamTrack; on create(): CanvasCaptureMediaStreamTrack }


  type CanvasCompositing = aspect
  {
    globalAlpha: Number

    globalCompositeOperation: GlobalCompositeOperation
  }


  type CanvasDrawImage = aspect
  {
    operation drawImage(image: CanvasImageSource, dx: Number, dy: Number)

    operation drawImage(image: CanvasImageSource, dx: Number, dy: Number, dw: Number, dh: Number)

    operation drawImage(image: CanvasImageSource, sx: Number, sy: Number, sw: Number, sh: Number, dx: Number, dy: Number, dw: Number, dh: Number)
  }


  type CanvasDrawPath = aspect
  {
    operation beginPath()

    operation clip(fillRule: CanvasFillRule? = empty)

    operation clip(path: Path2D, fillRule: CanvasFillRule? = empty)

    operation fill(fillRule: CanvasFillRule? = empty)

    operation fill(path: Path2D, fillRule: CanvasFillRule? = empty)

    operation isPointInPath(x: Number, y: Number, fillRule: CanvasFillRule? = empty): YesNo

    operation isPointInPath(path: Path2D, x: Number, y: Number, fillRule: CanvasFillRule? = empty): YesNo

    operation isPointInStroke(x: Number, y: Number): YesNo

    operation isPointInStroke(path: Path2D, x: Number, y: Number): YesNo

    operation stroke()

    operation stroke(path: Path2D)
  }


  type CanvasFillStrokeStyles = aspect
  {
    fillStyle: Object? /*(!)Текст | CanvasGradient | CanvasPattern*/

    strokeStyle: Object? /*(!)Текст | CanvasGradient | CanvasPattern*/

    operation createConicGradient(startAngle: Number, x: Number, y: Number): CanvasGradient

    operation createLinearGradient(x0: Number, y0: Number, x1: Number, y1: Number): CanvasGradient

    operation createPattern(image: CanvasImageSource, repetition: Text?): CanvasPattern?

    operation createRadialGradient(x0: Number, y0: Number, r0: Number, x1: Number, y1: Number, r1: Number): CanvasGradient
  }


  type CanvasFilters = aspect
  {
    filter: Text
  }


  /**
  * An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
  */

  type CanvasGradient = aspect
  {
    operation addColorStop(offset: Number, color: Text)
  }


  /*(!) var */ CanvasGradient: object { prototype: CanvasGradient; on create(): CanvasGradient }


  type CanvasImageData = aspect
  {
    operation createImageData(sw: Number, sh: Number, settings: ImageDataSettings? = empty): ImageData

    operation createImageData(imagedata: ImageData): ImageData

    operation getImageData(sx: Number, sy: Number, sw: Number, sh: Number, settings: ImageDataSettings? = empty): ImageData

    operation putImageData(imagedata: ImageData, dx: Number, dy: Number)

    operation putImageData(imagedata: ImageData, dx: Number, dy: Number, dirtyX: Number, dirtyY: Number, dirtyWidth: Number, dirtyHeight: Number)
  }


  type CanvasImageSmoothing = aspect
  {
    imageSmoothingEnabled: YesNo

    imageSmoothingQuality: ImageSmoothingQuality
  }


  type CanvasPath = aspect
  {
    operation arc(x: Number, y: Number, radius: Number, startAngle: Number, endAngle: Number, counterclockwise: YesNo? = empty)

    operation arcTo(x1: Number, y1: Number, x2: Number, y2: Number, radius: Number)

    operation bezierCurveTo(cp1x: Number, cp1y: Number, cp2x: Number, cp2y: Number, x: Number, y: Number)

    operation closePath()

    operation ellipse(x: Number, y: Number, radiusX: Number, radiusY: Number, rotation: Number, startAngle: Number, endAngle: Number, counterclockwise: YesNo? = empty)

    operation lineTo(x: Number, y: Number)

    operation moveTo(x: Number, y: Number)

    operation quadraticCurveTo(cpx: Number, cpy: Number, x: Number, y: Number)

    operation rect(x: Number, y: Number, w: Number, h: Number)

    operation roundRect(x: Number, y: Number, w: Number, h: Number, radii: Object? /*(!)Number | DOMPointInit | Список<Object? /*(!)Number | DOMPointInit*/> | пусто*/ = empty)
  }


  type CanvasPathDrawingStyles = aspect
  {
    lineCap: CanvasLineCap

    lineDashOffset: Number

    lineJoin: CanvasLineJoin

    lineWidth: Number

    miterLimit: Number

    operation getLineDash(): Список<Number>

    operation setLineDash(segments: Список<Number>)
  }


  /**
  * An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern)
  */

  type CanvasPattern = aspect
  {
    operation setTransform(transform: DOMMatrix2DInit? = empty)
  }


  /*(!) var */ CanvasPattern: object { prototype: CanvasPattern; on create(): CanvasPattern }


  type CanvasRect = aspect
  {
    operation clearRect(x: Number, y: Number, w: Number, h: Number)

    operation fillRect(x: Number, y: Number, w: Number, h: Number)

    operation strokeRect(x: Number, y: Number, w: Number, h: Number)
  }


  /**
  * The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D)
  */

  type CanvasRenderingContext2D = aspect CanvasCompositing, CanvasDrawImage, CanvasDrawPath, CanvasFillStrokeStyles, CanvasFilters, CanvasImageData, CanvasImageSmoothing, CanvasPath, CanvasPathDrawingStyles, CanvasRect, CanvasShadowStyles, CanvasState, CanvasText, CanvasTextDrawingStyles, CanvasTransform, CanvasUserInterface
  {
    guarded
    canvas: HTMLCanvasElement

    operation getContextAttributes(): CanvasRenderingContext2DSettings
  }


  /*(!) var */ CanvasRenderingContext2D: object { prototype: CanvasRenderingContext2D; on create(): CanvasRenderingContext2D }


  type CanvasShadowStyles = aspect
  {
    shadowBlur: Number

    shadowColor: Text

    shadowOffsetX: Number

    shadowOffsetY: Number
  }


  type CanvasState = aspect
  {
    operation reset()

    operation restore()

    operation save()
  }


  type CanvasText = aspect
  {
    operation fillText(text: Text, x: Number, y: Number, maxWidth: Number? = empty)

    operation measureText(text: Text): TextMetrics

    operation strokeText(text: Text, x: Number, y: Number, maxWidth: Number? = empty)
  }


  type CanvasTextDrawingStyles = aspect
  {
    direction: CanvasDirection

    font: Text

    fontKerning: CanvasFontKerning

    textAlign: CanvasTextAlign

    textBaseline: CanvasTextBaseline
  }


  type CanvasTransform = aspect
  {
    operation getTransform(): DOMMatrix

    operation resetTransform()

    operation rotate(angle: Number)

    operation scale(x: Number, y: Number)

    operation setTransform(a: Number, b: Number, c: Number, d: Number, e: Number, f: Number)

    operation setTransform(transform: DOMMatrix2DInit? = empty)

    operation transform(a: Number, b: Number, c: Number, d: Number, e: Number, f: Number)

    operation translate(x: Number, y: Number)
  }


  type CanvasUserInterface = aspect
  {
    operation drawFocusIfNeeded(element: Element)

    operation drawFocusIfNeeded(path: Path2D, element: Element)
  }


  /**
  * The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ChannelMergerNode)
  */

  type ChannelMergerNode = aspect AudioNode
  {

  }


  /*(!) var */ ChannelMergerNode: object { prototype: ChannelMergerNode; on create(context: BaseAudioContext, options: ChannelMergerOptions? = empty): ChannelMergerNode }


  /**
  * The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ChannelSplitterNode)
  */

  type ChannelSplitterNode = aspect AudioNode
  {

  }


  /*(!) var */ ChannelSplitterNode: object { prototype: ChannelSplitterNode; on create(context: BaseAudioContext, options: ChannelSplitterOptions? = empty): ChannelSplitterNode }


  /**
  * The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData)
  */

  type CharacterData = aspect Node, ChildNode, NonDocumentTypeChildNode
  {
    data: Text

    guarded
    length: Number

    guarded
    ownerDocument: Document

    operation appendData(data: Text)

    operation deleteData(offset: Number, count: Number)

    operation insertData(offset: Number, data: Text)

    operation replaceData(offset: Number, count: Number, data: Text)

    operation substringData(offset: Number, count: Number): Text
  }


  /*(!) var */ CharacterData: object { prototype: CharacterData; on create(): CharacterData }


  type ChildNode = aspect Node
  {
    #js.МассивПараметров
    operation after(nodes: Список<Object? /*(!)Node | Текст*/>)

    #js.МассивПараметров
    operation before(nodes: Список<Object? /*(!)Node | Текст*/>)

    operation remove()

    #js.МассивПараметров
    operation replaceWith(nodes: Список<Object? /*(!)Node | Текст*/>)
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard)
  */

  type Clipboard = aspect EventTarget
  {
    operation read(): Promise<ClipboardItems>

    operation readText(): Promise<Текст>

    operation write(data: ClipboardItems): Promise<Ничего>

    operation writeText(data: Text): Promise<Ничего>
  }


  /*(!) var */ Clipboard: object { prototype: Clipboard; on create(): Clipboard }


  /**
  * Events providing information related to modification of the clipboard, that is cut, copy, and paste events.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent)
  */

  type ClipboardEvent = aspect Event
  {
    guarded
    clipboardData: DataTransfer?
  }


  /*(!) var */ ClipboardEvent: object { prototype: ClipboardEvent; on create(type`: Text, eventInitDict: ClipboardEventInit? = empty): ClipboardEvent }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem)
  */

  type ClipboardItem = aspect
  {
    guarded
    types: ReadonlyArray<Текст>

    operation getType(type`: Text): Promise<Blob>
  }


  /*(!) var */ ClipboardItem: object { prototype: ClipboardItem; on create(items: Record<Текст, Object? /*(!)Текст | Blob | PromiseLike<Object? /*(!)Текст | Blob*/>*/>, options: ClipboardItemOptions? = empty): ClipboardItem }


  /**
  * A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent)
  */

  type CloseEvent = aspect Event
  {
    guarded
    code: Number

    guarded
    reason: Text

    guarded
    wasClean: YesNo
  }


  /*(!) var */ CloseEvent: object { prototype: CloseEvent; on create(type`: Text, eventInitDict: CloseEventInit? = empty): CloseEvent }


  /**
  * Textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Comment)
  */

  type Comment = aspect CharacterData
  {

  }


  /*(!) var */ Comment: object { prototype: Comment; on create(data: Text? = empty): Comment }


  /**
  * The DOM CompositionEvent represents events that occur due to the user indirectly entering text.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent)
  */

  type CompositionEvent = aspect UIEvent
  {

  }


  /*(!) var */ CompositionEvent: object { prototype: CompositionEvent; on create(type`: Text, eventInitDict: CompositionEventInit? = empty): CompositionEvent }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream) */

  type CompressionStream = aspect GenericTransformStream
  {

  }


  /*(!) var */ CompressionStream: object { prototype: CompressionStream; on create(format: CompressionFormat): CompressionStream }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode) */

  type ConstantSourceNode = aspect AudioScheduledSourceNode
  {
    guarded
    offset: AudioParam

    operation addEventListener<K = /*(!) keyof AudioScheduledSourceNodeEventMap */ Object?>(type`: K, listener: operation(this: ConstantSourceNode, ev: /*(!) AudioScheduledSourceNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AudioScheduledSourceNodeEventMap */ Object?>(type`: K, listener: operation(this: ConstantSourceNode, ev: /*(!) AudioScheduledSourceNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ ConstantSourceNode: object { prototype: ConstantSourceNode; on create(context: BaseAudioContext, options: ConstantSourceOptions? = empty): ConstantSourceNode }


  /**
  * An AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode)
  */

  type ConvolverNode = aspect AudioNode
  {
    buffer: AudioBuffer?

    normalize: YesNo
  }


  /*(!) var */ ConvolverNode: object { prototype: ConvolverNode; on create(context: BaseAudioContext, options: ConvolverOptions? = empty): ConvolverNode }


  /**
  * This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)
  */

  type CountQueuingStrategy = aspect QueuingStrategy
  {
    guarded
    highWaterMark: Number

    guarded
    size: QueuingStrategySize
  }


  /*(!) var */ CountQueuingStrategy: object { prototype: CountQueuingStrategy; on create(init: QueuingStrategyInit): CountQueuingStrategy }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential)
  */

  type Credential = aspect
  {
    guarded
    id: Text

    guarded
    type`: Text
  }


  /*(!) var */ Credential: object { prototype: Credential; on create(): Credential }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer)
  */

  type CredentialsContainer = aspect
  {
    operation create(options: CredentialCreationOptions? = empty): Promise<Credential?>

    operation get(options: CredentialRequestOptions? = empty): Promise<Credential?>

    operation preventSilentAccess(): Promise<Ничего>

    operation store(credential: Credential): Promise<Credential>
  }


  /*(!) var */ CredentialsContainer: object { prototype: CredentialsContainer; on create(): CredentialsContainer }


  /**
  * Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto)
  */

  type Crypto = aspect
  {
    guarded
    subtle: SubtleCrypto

    operation getRandomValues<T = ArrayBufferView?>(array: T): T

    operation randomUUID(): /*(!) `${string}-${string}-${string}-${string}-${string}` */ Object?
  }


  /*(!) var */ Crypto: object { prototype: Crypto; on create(): Crypto }


  /**
  * The CryptoKey dictionary of the Web Crypto API represents a cryptographic key.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey)
  */

  type CryptoKey = aspect
  {
    guarded
    algorithm: KeyAlgorithm

    guarded
    extractable: YesNo

    guarded
    type`: KeyType

    guarded
    usages: Список<KeyUsage>
  }


  /*(!) var */ CryptoKey: object { prototype: CryptoKey; on create(): CryptoKey }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry) */

  type CustomElementRegistry = aspect
  {
    operation define(name: Text, constructor: CustomElementConstructor, options: ElementDefinitionOptions? = empty)

    operation get(name: Text): CustomElementConstructor?

    operation upgrade(root: Node)

    operation whenDefined(name: Text): Promise<CustomElementConstructor>
  }


  /*(!) var */ CustomElementRegistry: object { prototype: CustomElementRegistry; on create(): CustomElementRegistry }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent) */

  type CustomEvent<T> = aspect Event
  {

  }


  /*(!) var */ CustomEvent: object { prototype: CustomEvent; on create(type`: Text, eventInitDict: CustomEventInit<T>? = empty): CustomEvent<T> }


  /**
  * An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException)
  */

  type DOMException = aspect Error
  {
    guarded
    INDEX_SIZE_ERR: 1

    guarded
    DOMSTRING_SIZE_ERR: 2

    guarded
    HIERARCHY_REQUEST_ERR: 3

    guarded
    WRONG_DOCUMENT_ERR: 4

    guarded
    INVALID_CHARACTER_ERR: 5

    guarded
    NO_DATA_ALLOWED_ERR: 6

    guarded
    NO_MODIFICATION_ALLOWED_ERR: 7

    guarded
    NOT_FOUND_ERR: 8

    guarded
    NOT_SUPPORTED_ERR: 9

    guarded
    INUSE_ATTRIBUTE_ERR: 10

    guarded
    INVALID_STATE_ERR: 11

    guarded
    SYNTAX_ERR: 12

    guarded
    INVALID_MODIFICATION_ERR: 13

    guarded
    NAMESPACE_ERR: 14

    guarded
    INVALID_ACCESS_ERR: 15

    guarded
    VALIDATION_ERR: 16

    guarded
    TYPE_MISMATCH_ERR: 17

    guarded
    SECURITY_ERR: 18

    guarded
    NETWORK_ERR: 19

    guarded
    ABORT_ERR: 20

    guarded
    URL_MISMATCH_ERR: 21

    guarded
    QUOTA_EXCEEDED_ERR: 22

    guarded
    TIMEOUT_ERR: 23

    guarded
    INVALID_NODE_TYPE_ERR: 24

    guarded
    DATA_CLONE_ERR: 25
  }


  /*(!) var */ DOMException: object { prototype: DOMException; on create(message: Text? = empty, name: Text? = empty): DOMException; guarded INDEX_SIZE_ERR: 1; guarded DOMSTRING_SIZE_ERR: 2; guarded HIERARCHY_REQUEST_ERR: 3; guarded WRONG_DOCUMENT_ERR: 4; guarded INVALID_CHARACTER_ERR: 5; guarded NO_DATA_ALLOWED_ERR: 6; guarded NO_MODIFICATION_ALLOWED_ERR: 7; guarded NOT_FOUND_ERR: 8; guarded NOT_SUPPORTED_ERR: 9; guarded INUSE_ATTRIBUTE_ERR: 10; guarded INVALID_STATE_ERR: 11; guarded SYNTAX_ERR: 12; guarded INVALID_MODIFICATION_ERR: 13; guarded NAMESPACE_ERR: 14; guarded INVALID_ACCESS_ERR: 15; guarded VALIDATION_ERR: 16; guarded TYPE_MISMATCH_ERR: 17; guarded SECURITY_ERR: 18; guarded NETWORK_ERR: 19; guarded ABORT_ERR: 20; guarded URL_MISMATCH_ERR: 21; guarded QUOTA_EXCEEDED_ERR: 22; guarded TIMEOUT_ERR: 23; guarded INVALID_NODE_TYPE_ERR: 24; guarded DATA_CLONE_ERR: 25 }


  /**
  * An object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation)
  */

  type DOMImplementation = aspect
  {

  }


  /*(!) var */ DOMImplementation: object { prototype: DOMImplementation; on create(): DOMImplementation }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix) */

  type DOMMatrix = aspect DOMMatrixReadOnly
  {
    a: Number

    b: Number

    c: Number

    d: Number

    e: Number

    f: Number

    m11: Number

    m12: Number

    m13: Number

    m14: Number

    m21: Number

    m22: Number

    m23: Number

    m24: Number

    m31: Number

    m32: Number

    m33: Number

    m34: Number

    m41: Number

    m42: Number

    m43: Number

    m44: Number

    operation invertSelf(): DOMMatrix

    operation multiplySelf(other: DOMMatrixInit? = empty): DOMMatrix

    operation preMultiplySelf(other: DOMMatrixInit? = empty): DOMMatrix

    operation rotateAxisAngleSelf(x: Number? = empty, y: Number? = empty, z: Number? = empty, angle: Number? = empty): DOMMatrix

    operation rotateFromVectorSelf(x: Number? = empty, y: Number? = empty): DOMMatrix

    operation rotateSelf(rotX: Number? = empty, rotY: Number? = empty, rotZ: Number? = empty): DOMMatrix

    operation scale3dSelf(scale: Number? = empty, originX: Number? = empty, originY: Number? = empty, originZ: Number? = empty): DOMMatrix

    operation scaleSelf(scaleX: Number? = empty, scaleY: Number? = empty, scaleZ: Number? = empty, originX: Number? = empty, originY: Number? = empty, originZ: Number? = empty): DOMMatrix

    operation setMatrixValue(transformList: Text): DOMMatrix

    operation skewXSelf(sx: Number? = empty): DOMMatrix

    operation skewYSelf(sy: Number? = empty): DOMMatrix

    operation translateSelf(tx: Number? = empty, ty: Number? = empty, tz: Number? = empty): DOMMatrix
  }


  /*(!) var */ DOMMatrix: object { prototype: DOMMatrix; on create(init: Object? /*(!)Текст | Список<Number> | пусто*/ = empty): DOMMatrix; operation fromFloat32Array(array32: Float32Array): DOMMatrix; operation fromFloat64Array(array64: Float64Array): DOMMatrix; operation fromMatrix(other: DOMMatrixInit? = empty): DOMMatrix }


  type SVGMatrix = DOMMatrix

  /*(!) var */ SVGMatrix: /*(!) typeof DOMMatrix */ Object?


  type WebKitCSSMatrix = DOMMatrix

  /*(!) var */ WebKitCSSMatrix: /*(!) typeof DOMMatrix */ Object?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly) */

  type DOMMatrixReadOnly = aspect
  {
    operation toJSON(): /*(!) any */ Object?

    operation toString(): Text
  }


  /*(!) var */ DOMMatrixReadOnly: object { prototype: DOMMatrixReadOnly; on create(init: Object? /*(!)Текст | Список<Number> | пусто*/ = empty): DOMMatrixReadOnly; operation fromFloat32Array(array32: Float32Array): DOMMatrixReadOnly; operation fromFloat64Array(array64: Float64Array): DOMMatrixReadOnly; operation fromMatrix(other: DOMMatrixInit? = empty): DOMMatrixReadOnly }


  /**
  * Provides the ability to parse XML or HTML source code from a string into a DOM Document.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMParser)
  */

  type DOMParser = aspect
  {
    operation parseFromString(string: Text, type`: DOMParserSupportedType): Document
  }


  /*(!) var */ DOMParser: object { prototype: DOMParser; on create(): DOMParser }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint) */

  type DOMPoint = aspect DOMPointReadOnly
  {
    w: Number

    x: Number

    y: Number

    z: Number
  }


  /*(!) var */ DOMPoint: object { prototype: DOMPoint; on create(x: Number? = empty, y: Number? = empty, z: Number? = empty, w: Number? = empty): DOMPoint; operation fromPoint(other: DOMPointInit? = empty): DOMPoint }


  type SVGPoint = DOMPoint

  /*(!) var */ SVGPoint: /*(!) typeof DOMPoint */ Object?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly) */

  type DOMPointReadOnly = aspect
  {
    guarded
    w: Number

    guarded
    x: Number

    guarded
    y: Number

    guarded
    z: Number

    operation matrixTransform(matrix: DOMMatrixInit? = empty): DOMPoint

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ DOMPointReadOnly: object { prototype: DOMPointReadOnly; on create(x: Number? = empty, y: Number? = empty, z: Number? = empty, w: Number? = empty): DOMPointReadOnly; operation fromPoint(other: DOMPointInit? = empty): DOMPointReadOnly }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad) */

  type DOMQuad = aspect
  {
    guarded
    p1: DOMPoint

    guarded
    p2: DOMPoint

    guarded
    p3: DOMPoint

    guarded
    p4: DOMPoint

    operation getBounds(): DOMRect

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ DOMQuad: object { prototype: DOMQuad; on create(p1: DOMPointInit? = empty, p2: DOMPointInit? = empty, p3: DOMPointInit? = empty, p4: DOMPointInit? = empty): DOMQuad; operation fromQuad(other: DOMQuadInit? = empty): DOMQuad; operation fromRect(other: DOMRectInit? = empty): DOMQuad }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect) */

  type DOMRect = aspect DOMRectReadOnly
  {
    height: Number

    width: Number

    x: Number

    y: Number
  }


  /*(!) var */ DOMRect: object { prototype: DOMRect; on create(x: Number? = empty, y: Number? = empty, width: Number? = empty, height: Number? = empty): DOMRect; operation fromRect(other: DOMRectInit? = empty): DOMRect }


  type SVGRect = DOMRect

  /*(!) var */ SVGRect: /*(!) typeof DOMRect */ Object?


  type DOMRectList = aspect
  {
    guarded
    length: Number

    operation item(index: Number): DOMRect?

    /*(!) [index: number]: DOMRect*/
  }


  /*(!) var */ DOMRectList: object { prototype: DOMRectList; on create(): DOMRectList }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly) */

  type DOMRectReadOnly = aspect
  {
    guarded
    bottom: Number

    guarded
    height: Number

    guarded
    left: Number

    guarded
    right: Number

    guarded
    top: Number

    guarded
    width: Number

    guarded
    x: Number

    guarded
    y: Number

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ DOMRectReadOnly: object { prototype: DOMRectReadOnly; on create(x: Number? = empty, y: Number? = empty, width: Number? = empty, height: Number? = empty): DOMRectReadOnly; operation fromRect(other: DOMRectInit? = empty): DOMRectReadOnly }


  /**
  * A type returned by some APIs which contains a list of DOMString (strings).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList)
  */

  type DOMStringList = aspect
  {
    guarded
    length: Number

    operation contains(string: Text): YesNo

    operation item(index: Number): Text?

    /*(!) [index: number]: string*/
  }


  /*(!) var */ DOMStringList: object { prototype: DOMStringList; on create(): DOMStringList }


  /**
  * Used by the dataset HTML attribute to represent data for custom attributes added to elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringMap)
  */

  type DOMStringMap = aspect
  {
    /*(!) [name: string]: string | undefined*/
  }


  /*(!) var */ DOMStringMap: object { prototype: DOMStringMap; on create(): DOMStringMap }


  /**
  * A set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList)
  */

  type DOMTokenList = aspect
  {
    guarded
    length: Number

    value: Text

    operation toString(): Text

    #js.МассивПараметров
    operation add(tokens: Список<Текст>)

    operation contains(token: Text): YesNo

    operation item(index: Number): Text?

    #js.МассивПараметров
    operation remove(tokens: Список<Текст>)

    operation replace(token: Text, newToken: Text): YesNo

    operation supports(token: Text): YesNo

    operation toggle(token: Text, force: YesNo? = empty): YesNo

    operation forEach(callbackfn: operation(value: Text, key: Number, parent: DOMTokenList), thisArg: /*(!) any */ Object? = empty)

    /*(!) [index: number]: string*/
  }


  /*(!) var */ DOMTokenList: object { prototype: DOMTokenList; on create(): DOMTokenList }


  /**
  * Used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer)
  */

  type DataTransfer = aspect
  {
    dropEffect: Object? /*(!)"none" | "copy" | "link" | "move"*/

    effectAllowed: Object? /*(!)"none" | "copy" | "copyLink" | "copyMove" | "link" | "linkMove" | "move" | "all" | "uninitialized"*/

    guarded
    files: FileList

    guarded
    items: DataTransferItemList

    guarded
    types: ReadonlyArray<Текст>

    operation clearData(format: Text? = empty)

    operation getData(format: Text): Text

    operation setData(format: Text, data: Text)

    operation setDragImage(image: Element, x: Number, y: Number)
  }


  /*(!) var */ DataTransfer: object { prototype: DataTransfer; on create(): DataTransfer }


  /**
  * One drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem)
  */

  type DataTransferItem = aspect
  {
    guarded
    kind: Text

    guarded
    type`: Text

    operation getAsFile(): File?

    operation getAsString(callback: FunctionStringCallback?)

    operation webkitGetAsEntry(): FileSystemEntry?
  }


  /*(!) var */ DataTransferItem: object { prototype: DataTransferItem; on create(): DataTransferItem }


  /**
  * A list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList)
  */

  type DataTransferItemList = aspect
  {
    guarded
    length: Number

    operation add(data: Text, type`: Text): DataTransferItem?

    operation add(data: File): DataTransferItem?

    operation clear()

    operation remove(index: Number)

    /*(!) [index: number]: DataTransferItem*/
  }


  /*(!) var */ DataTransferItemList: object { prototype: DataTransferItemList; on create(): DataTransferItemList }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DecompressionStream) */

  type DecompressionStream = aspect GenericTransformStream
  {

  }


  /*(!) var */ DecompressionStream: object { prototype: DecompressionStream; on create(format: CompressionFormat): DecompressionStream }


  /**
  * A delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DelayNode)
  */

  type DelayNode = aspect AudioNode
  {
    guarded
    delayTime: AudioParam
  }


  /*(!) var */ DelayNode: object { prototype: DelayNode; on create(context: BaseAudioContext, options: DelayOptions? = empty): DelayNode }


  /**
  * The DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent)
  */

  type DeviceMotionEvent = aspect Event
  {
    guarded
    acceleration: DeviceMotionEventAcceleration?

    guarded
    accelerationIncludingGravity: DeviceMotionEventAcceleration?

    guarded
    interval: Number

    guarded
    rotationRate: DeviceMotionEventRotationRate?
  }


  /*(!) var */ DeviceMotionEvent: object { prototype: DeviceMotionEvent; on create(type`: Text, eventInitDict: DeviceMotionEventInit? = empty): DeviceMotionEvent }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration)
  */

  type DeviceMotionEventAcceleration = aspect
  {
    guarded
    x: Number?

    guarded
    y: Number?

    guarded
    z: Number?
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate)
  */

  type DeviceMotionEventRotationRate = aspect
  {
    guarded
    alpha: Number?

    guarded
    beta: Number?

    guarded
    gamma: Number?
  }


  /**
  * The DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent)
  */

  type DeviceOrientationEvent = aspect Event
  {
    guarded
    absolute: YesNo

    guarded
    alpha: Number?

    guarded
    beta: Number?

    guarded
    gamma: Number?
  }


  /*(!) var */ DeviceOrientationEvent: object { prototype: DeviceOrientationEvent; on create(type`: Text, eventInitDict: DeviceOrientationEventInit? = empty): DeviceOrientationEvent }


  type DocumentEventMap = aspect GlobalEventHandlersEventMap
  {
    DOMContentLoaded: Event

    fullscreenchange: Event

    fullscreenerror: Event

    pointerlockchange: Event

    pointerlockerror: Event

    readystatechange: Event

    visibilitychange: Event
  }


  /**
  * Any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document)
  */

  type Document = aspect Node, DocumentOrShadowRoot, FontFaceSource, GlobalEventHandlers, NonElementParentNode, ParentNode, XPathEvaluatorBase
  {
    operation location(href: Object? /*(!)Текст | Location*/): /*(!) no_type */ Object?

    guarded
    ownerDocument: Empty

    operation createElement(tagName: Text, options: ElementCreationOptions? = empty): HTMLElement

    operation createElementNS<K = /*(!) keyof SVGElementTagNameMap */ Object?>(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: K): /*(!) SVGElementTagNameMap[K] */ Object?

    operation createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: Text): SVGElement

    operation createElementNS<K = /*(!) keyof MathMLElementTagNameMap */ Object?>(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: K): /*(!) MathMLElementTagNameMap[K] */ Object?

    operation createElementNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: Text): MathMLElement

    operation createElementNS(namespaceURI: Text?, qualifiedName: Text, options: ElementCreationOptions? = empty): Element

    operation createElementNS(namespace: Text?, qualifiedName: Text, options: Object? /*(!)Текст | ElementCreationOptions | пусто*/ = empty): Element

    operation createEvent(eventInterface: "AnimationPlaybackEvent"): AnimationPlaybackEvent

    operation createEvent(eventInterface: "AudioProcessingEvent"): AudioProcessingEvent

    operation createEvent(eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent

    operation createEvent(eventInterface: "BlobEvent"): BlobEvent

    operation createEvent(eventInterface: "ClipboardEvent"): ClipboardEvent

    operation createEvent(eventInterface: "CloseEvent"): CloseEvent

    operation createEvent(eventInterface: "CompositionEvent"): CompositionEvent

    operation createEvent(eventInterface: "CustomEvent"): CustomEvent

    operation createEvent(eventInterface: "DeviceMotionEvent"): DeviceMotionEvent

    operation createEvent(eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent

    operation createEvent(eventInterface: "DragEvent"): DragEvent

    operation createEvent(eventInterface: "ErrorEvent"): ErrorEvent

    operation createEvent(eventInterface: "Event"): Event

    operation createEvent(eventInterface: "Events"): Event

    operation createEvent(eventInterface: "FocusEvent"): FocusEvent

    operation createEvent(eventInterface: "FontFaceSetLoadEvent"): FontFaceSetLoadEvent

    operation createEvent(eventInterface: "FormDataEvent"): FormDataEvent

    operation createEvent(eventInterface: "GamepadEvent"): GamepadEvent

    operation createEvent(eventInterface: "HashChangeEvent"): HashChangeEvent

    operation createEvent(eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent

    operation createEvent(eventInterface: "InputEvent"): InputEvent

    operation createEvent(eventInterface: "KeyboardEvent"): KeyboardEvent

    operation createEvent(eventInterface: "MIDIConnectionEvent"): MIDIConnectionEvent

    operation createEvent(eventInterface: "MIDIMessageEvent"): MIDIMessageEvent

    operation createEvent(eventInterface: "MediaEncryptedEvent"): MediaEncryptedEvent

    operation createEvent(eventInterface: "MediaKeyMessageEvent"): MediaKeyMessageEvent

    operation createEvent(eventInterface: "MediaQueryListEvent"): MediaQueryListEvent

    operation createEvent(eventInterface: "MediaStreamTrackEvent"): MediaStreamTrackEvent

    operation createEvent(eventInterface: "MessageEvent"): MessageEvent

    operation createEvent(eventInterface: "MouseEvent"): MouseEvent

    operation createEvent(eventInterface: "MouseEvents"): MouseEvent

    operation createEvent(eventInterface: "MutationEvent"): MutationEvent

    operation createEvent(eventInterface: "MutationEvents"): MutationEvent

    operation createEvent(eventInterface: "OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent

    operation createEvent(eventInterface: "PageTransitionEvent"): PageTransitionEvent

    operation createEvent(eventInterface: "PaymentMethodChangeEvent"): PaymentMethodChangeEvent

    operation createEvent(eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent

    operation createEvent(eventInterface: "PictureInPictureEvent"): PictureInPictureEvent

    operation createEvent(eventInterface: "PointerEvent"): PointerEvent

    operation createEvent(eventInterface: "PopStateEvent"): PopStateEvent

    operation createEvent(eventInterface: "ProgressEvent"): ProgressEvent

    operation createEvent(eventInterface: "PromiseRejectionEvent"): PromiseRejectionEvent

    operation createEvent(eventInterface: "RTCDTMFToneChangeEvent"): RTCDTMFToneChangeEvent

    operation createEvent(eventInterface: "RTCDataChannelEvent"): RTCDataChannelEvent

    operation createEvent(eventInterface: "RTCErrorEvent"): RTCErrorEvent

    operation createEvent(eventInterface: "RTCPeerConnectionIceErrorEvent"): RTCPeerConnectionIceErrorEvent

    operation createEvent(eventInterface: "RTCPeerConnectionIceEvent"): RTCPeerConnectionIceEvent

    operation createEvent(eventInterface: "RTCTrackEvent"): RTCTrackEvent

    operation createEvent(eventInterface: "SecurityPolicyViolationEvent"): SecurityPolicyViolationEvent

    operation createEvent(eventInterface: "SpeechSynthesisErrorEvent"): SpeechSynthesisErrorEvent

    operation createEvent(eventInterface: "SpeechSynthesisEvent"): SpeechSynthesisEvent

    operation createEvent(eventInterface: "StorageEvent"): StorageEvent

    operation createEvent(eventInterface: "SubmitEvent"): SubmitEvent

    operation createEvent(eventInterface: "ToggleEvent"): ToggleEvent

    operation createEvent(eventInterface: "TouchEvent"): TouchEvent

    operation createEvent(eventInterface: "TrackEvent"): TrackEvent

    operation createEvent(eventInterface: "TransitionEvent"): TransitionEvent

    operation createEvent(eventInterface: "UIEvent"): UIEvent

    operation createEvent(eventInterface: "UIEvents"): UIEvent

    operation createEvent(eventInterface: "WebGLContextEvent"): WebGLContextEvent

    operation createEvent(eventInterface: "WheelEvent"): WheelEvent

    operation createEvent(eventInterface: Text): Event

    operation getElementsByTagName<K = /*(!) keyof SVGElementTagNameMap */ Object?>(qualifiedName: K): HTMLCollectionOf</*(!) SVGElementTagNameMap[K] */ Object?>

    operation getElementsByTagName<K = /*(!) keyof MathMLElementTagNameMap */ Object?>(qualifiedName: K): HTMLCollectionOf</*(!) MathMLElementTagNameMap[K] */ Object?>

    operation getElementsByTagName(qualifiedName: Text): HTMLCollectionOf<Element>

    operation getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: Text): HTMLCollectionOf<SVGElement>

    operation getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: Text): HTMLCollectionOf<MathMLElement>

    operation getElementsByTagNameNS(namespace: Text?, localName: Text): HTMLCollectionOf<Element>

    operation open(url: Object? /*(!)Текст | URL*/, name: Text, features: Text): WindowProxy?

    operation addEventListener<K = /*(!) keyof DocumentEventMap */ Object?>(type`: K, listener: operation(this: Document, ev: /*(!) DocumentEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof DocumentEventMap */ Object?>(type`: K, listener: operation(this: Document, ev: /*(!) DocumentEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ Document: object { prototype: Document; on create(): Document }


  /**
  * A minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentFragment)
  */

  type DocumentFragment = aspect Node, NonElementParentNode, ParentNode
  {
    guarded
    ownerDocument: Document

    operation getElementById(elementId: Text): HTMLElement?
  }


  /*(!) var */ DocumentFragment: object { prototype: DocumentFragment; on create(): DocumentFragment }


  type DocumentOrShadowRoot = aspect
  {
    guarded
    activeElement: Element?

    adoptedStyleSheets: Список<CSSStyleSheet>

    guarded
    fullscreenElement: Element?

    guarded
    pictureInPictureElement: Element?

    guarded
    pointerLockElement: Element?

    guarded
    styleSheets: StyleSheetList

    operation elementFromPoint(x: Number, y: Number): Element?

    operation elementsFromPoint(x: Number, y: Number): Список<Element>

    operation getAnimations(): Список<Animation>
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentTimeline) */

  type DocumentTimeline = aspect AnimationTimeline
  {

  }


  /*(!) var */ DocumentTimeline: object { prototype: DocumentTimeline; on create(options: DocumentTimelineOptions? = empty): DocumentTimeline }


  /**
  * A Node containing a doctype.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType)
  */

  type DocumentType = aspect Node, ChildNode
  {
    guarded
    name: Text

    guarded
    ownerDocument: Document

    guarded
    publicId: Text

    guarded
    systemId: Text
  }


  /*(!) var */ DocumentType: object { prototype: DocumentType; on create(): DocumentType }


  /**
  * A DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DragEvent)
  */

  type DragEvent = aspect MouseEvent
  {
    guarded
    dataTransfer: DataTransfer?
  }


  /*(!) var */ DragEvent: object { prototype: DragEvent; on create(type`: Text, eventInitDict: DragEventInit? = empty): DragEvent }


  /**
  * Inherits properties from its parent, AudioNode.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode)
  */

  type DynamicsCompressorNode = aspect AudioNode
  {
    guarded
    attack: AudioParam

    guarded
    knee: AudioParam

    guarded
    ratio: AudioParam

    guarded
    reduction: Number

    guarded
    release: AudioParam

    guarded
    threshold: AudioParam
  }


  /*(!) var */ DynamicsCompressorNode: object { prototype: DynamicsCompressorNode; on create(context: BaseAudioContext, options: DynamicsCompressorOptions? = empty): DynamicsCompressorNode }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_blend_minmax) */

  type EXT_blend_minmax = aspect
  {
    guarded
    MIN_EXT = 0x8007

    guarded
    MAX_EXT = 0x8008
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_float) */

  type EXT_color_buffer_float = aspect
  {

  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_half_float) */

  type EXT_color_buffer_half_float = aspect
  {
    guarded
    RGBA16F_EXT = 0x881A

    guarded
    RGB16F_EXT = 0x881B

    guarded
    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211

    guarded
    UNSIGNED_NORMALIZED_EXT = 0x8C17
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_float_blend) */

  type EXT_float_blend = aspect
  {

  }


  /**
  * The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_frag_depth)
  */

  type EXT_frag_depth = aspect
  {

  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_sRGB) */

  type EXT_sRGB = aspect
  {
    guarded
    SRGB_EXT = 0x8C40

    guarded
    SRGB_ALPHA_EXT = 0x8C42

    guarded
    SRGB8_ALPHA8_EXT = 0x8C43

    guarded
    FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_shader_texture_lod) */

  type EXT_shader_texture_lod = aspect
  {

  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_bptc) */

  type EXT_texture_compression_bptc = aspect
  {
    guarded
    COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C

    guarded
    COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D

    guarded
    COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E

    guarded
    COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_rgtc) */

  type EXT_texture_compression_rgtc = aspect
  {
    guarded
    COMPRESSED_RED_RGTC1_EXT = 0x8DBB

    guarded
    COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC

    guarded
    COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD

    guarded
    COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE
  }


  /**
  * The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_filter_anisotropic)
  */

  type EXT_texture_filter_anisotropic = aspect
  {
    guarded
    TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE

    guarded
    MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_norm16) */

  type EXT_texture_norm16 = aspect
  {
    guarded
    R16_EXT = 0x822A

    guarded
    RG16_EXT = 0x822C

    guarded
    RGB16_EXT = 0x8054

    guarded
    RGBA16_EXT = 0x805B

    guarded
    R16_SNORM_EXT = 0x8F98

    guarded
    RG16_SNORM_EXT = 0x8F99

    guarded
    RGB16_SNORM_EXT = 0x8F9A

    guarded
    RGBA16_SNORM_EXT = 0x8F9B
  }


  type ElementEventMap = aspect
  {
    fullscreenchange: Event

    fullscreenerror: Event
  }


  /**
  * Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element)
  */

  type Element = aspect Node, ARIAMixin, Animatable, ChildNode, InnerHTML, NonDocumentTypeChildNode, ParentNode, Slottable
  {
    guarded
    ownerDocument: Document

    operation checkVisibility(options: CheckVisibilityOptions? = empty): YesNo

    operation closest<K = /*(!) keyof SVGElementTagNameMap */ Object?>(selector: K): /*(!) SVGElementTagNameMap[K] */ Object?

    operation closest<K = /*(!) keyof MathMLElementTagNameMap */ Object?>(selector: K): /*(!) MathMLElementTagNameMap[K] */ Object?

    operation closest<E = Element>(selectors: Text): E?

    operation getElementsByTagName<K = /*(!) keyof SVGElementTagNameMap */ Object?>(qualifiedName: K): HTMLCollectionOf</*(!) SVGElementTagNameMap[K] */ Object?>

    operation getElementsByTagName<K = /*(!) keyof MathMLElementTagNameMap */ Object?>(qualifiedName: K): HTMLCollectionOf</*(!) MathMLElementTagNameMap[K] */ Object?>

    operation getElementsByTagName(qualifiedName: Text): HTMLCollectionOf<Element>

    operation getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: Text): HTMLCollectionOf<SVGElement>

    operation getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: Text): HTMLCollectionOf<MathMLElement>

    operation getElementsByTagNameNS(namespace: Text?, localName: Text): HTMLCollectionOf<Element>

    operation scroll(x: Number, y: Number)

    operation scrollBy(x: Number, y: Number)

    operation scrollTo(x: Number, y: Number)

    operation addEventListener<K = /*(!) keyof ElementEventMap */ Object?>(type`: K, listener: operation(this: Element, ev: /*(!) ElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof ElementEventMap */ Object?>(type`: K, listener: operation(this: Element, ev: /*(!) ElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ Element: object { prototype: Element; on create(): Element }


  type ElementCSSInlineStyle = aspect
  {
    guarded
    attributeStyleMap: StylePropertyMap

    guarded
    style: CSSStyleDeclaration
  }


  type ElementContentEditable = aspect
  {
    contentEditable: Text

    enterKeyHint: Text

    inputMode: Text

    guarded
    isContentEditable: YesNo
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals) */

  type ElementInternals = aspect ARIAMixin
  {
    guarded
    form: HTMLFormElement?

    guarded
    labels: NodeList

    guarded
    shadowRoot: ShadowRoot?

    guarded
    validationMessage: Text

    guarded
    validity: ValidityState

    guarded
    willValidate: YesNo

    operation checkValidity(): YesNo

    operation reportValidity(): YesNo

    operation setFormValue(value: Object? /*(!)File | Текст | FormData | пусто*/, state: Object? /*(!)File | Текст | FormData | пусто | пусто*/ = empty)

    operation setValidity(flags: ValidityStateFlags? = empty, message: Text? = empty, anchor: HTMLElement? = empty)
  }


  /*(!) var */ ElementInternals: object { prototype: ElementInternals; on create(): ElementInternals }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk) */

  type EncodedVideoChunk = aspect
  {
    guarded
    byteLength: Number

    guarded
    duration: Number?

    guarded
    timestamp: Number

    guarded
    type`: EncodedVideoChunkType

    operation copyTo(destination: BufferSource)
  }


  /*(!) var */ EncodedVideoChunk: object { prototype: EncodedVideoChunk; on create(init: EncodedVideoChunkInit): EncodedVideoChunk }


  /**
  * Events providing information related to errors in scripts or in files.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent)
  */

  type ErrorEvent = aspect Event
  {
    guarded
    colno: Number

    guarded
    error`: /*(!) any */ Object?

    guarded
    filename: Text

    guarded
    lineno: Number

    guarded
    message: Text
  }


  /*(!) var */ ErrorEvent: object { prototype: ErrorEvent; on create(type`: Text, eventInitDict: ErrorEventInit? = empty): ErrorEvent }


  /**
  * An event which takes place in the DOM.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event)
  */

  type Event = aspect
  {
    guarded
    NONE: 0

    guarded
    CAPTURING_PHASE: 1

    guarded
    AT_TARGET: 2

    guarded
    BUBBLING_PHASE: 3
  }


  /*(!) var */ Event: object { prototype: Event; on create(type`: Text, eventInitDict: EventInit? = empty): Event; guarded NONE: 0; guarded CAPTURING_PHASE: 1; guarded AT_TARGET: 2; guarded BUBBLING_PHASE: 3 }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventCounts) */

  type EventCounts = aspect
  {
    operation forEach(callbackfn: operation(value: Number, key: Text, parent: EventCounts), thisArg: /*(!) any */ Object? = empty)
  }


  /*(!) var */ EventCounts: object { prototype: EventCounts; on create(): EventCounts }


  type EventListener = aspect
  {
    /*(!) (evt: Event): void*/
  }


  type EventListenerObject = aspect
  {
    operation handleEvent(object`: Event)
  }


  type EventSourceEventMap = aspect
  {
    error`: Event

    message: MessageEvent

    open: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource) */

  type EventSource = aspect EventTarget
  {
    onerror: (operation(this: EventSource, ev: Event): /*(!) any */ Object?)?

    onmessage: (operation(this: EventSource, ev: MessageEvent): /*(!) any */ Object?)?

    onopen: (operation(this: EventSource, ev: Event): /*(!) any */ Object?)?

    guarded
    readyState: Number

    guarded
    url: Text

    guarded
    withCredentials: YesNo

    operation close()

    guarded
    CONNECTING: 0

    guarded
    OPEN: 1

    guarded
    CLOSED: 2

    operation addEventListener<K = /*(!) keyof EventSourceEventMap */ Object?>(type`: K, listener: operation(this: EventSource, ev: /*(!) EventSourceEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: operation(this: EventSource, event: MessageEvent): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof EventSourceEventMap */ Object?>(type`: K, listener: operation(this: EventSource, ev: /*(!) EventSourceEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: operation(this: EventSource, event: MessageEvent): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ EventSource: object { prototype: EventSource; on create(url: Object? /*(!)Текст | URL*/, eventSourceInitDict: EventSourceInit? = empty): EventSource; guarded CONNECTING: 0; guarded OPEN: 1; guarded CLOSED: 2 }


  /**
  * EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget)
  */

  type EventTarget = aspect
  {
    operation addEventListener(type`: Text, callback: EventListenerOrEventListenerObject?, options: Object? /*(!)AddEventListenerOptions | ДаНет | пусто*/ = empty)

    operation dispatchEvent(event: Event): YesNo

    operation removeEventListener(type`: Text, callback: EventListenerOrEventListenerObject?, options: Object? /*(!)EventListenerOptions | ДаНет | пусто*/ = empty)
  }


  /*(!) var */ EventTarget: object { prototype: EventTarget; on create(): EventTarget }


  /**
  * Provides information about files and allows JavaScript in a web page to access their content.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/File)
  */

  type File = aspect Blob
  {
    guarded
    lastModified: Number

    guarded
    name: Text

    guarded
    webkitRelativePath: Text
  }


  /*(!) var */ File: object { prototype: File; on create(fileBits: Список<BlobPart>, fileName: Text, options: FilePropertyBag? = empty): File }


  /**
  * An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type="file"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList)
  */

  type FileList = aspect
  {
    guarded
    length: Number

    operation item(index: Number): File?

    /*(!) [index: number]: File*/
  }


  /*(!) var */ FileList: object { prototype: FileList; on create(): FileList }


  type FileReaderEventMap = aspect
  {
    abort: ProgressEvent<FileReader>

    error`: ProgressEvent<FileReader>

    load: ProgressEvent<FileReader>

    loadend: ProgressEvent<FileReader>

    loadstart: ProgressEvent<FileReader>

    progress: ProgressEvent<FileReader>
  }


  /**
  * Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader)
  */

  type FileReader = aspect EventTarget
  {
    guarded
    error`: DOMException?

    onabort: (operation(this: FileReader, ev: ProgressEvent<FileReader>): /*(!) any */ Object?)?

    onerror: (operation(this: FileReader, ev: ProgressEvent<FileReader>): /*(!) any */ Object?)?

    onload: (operation(this: FileReader, ev: ProgressEvent<FileReader>): /*(!) any */ Object?)?

    onloadend: (operation(this: FileReader, ev: ProgressEvent<FileReader>): /*(!) any */ Object?)?

    onloadstart: (operation(this: FileReader, ev: ProgressEvent<FileReader>): /*(!) any */ Object?)?

    onprogress: (operation(this: FileReader, ev: ProgressEvent<FileReader>): /*(!) any */ Object?)?

    guarded
    readyState: Object? /*(!)/*(!) typeof FileReader.EMPTY */ Object? | /*(!) typeof FileReader.LOADING */ Object? | /*(!) typeof FileReader.DONE */ Object?*/

    guarded
    result: Object? /*(!)Текст | ArrayBuffer | пусто*/

    operation abort()

    operation readAsArrayBuffer(blob: Blob)

    operation readAsBinaryString(blob: Blob)

    operation readAsDataURL(blob: Blob)

    operation readAsText(blob: Blob, encoding: Text? = empty)

    guarded
    EMPTY: 0

    guarded
    LOADING: 1

    guarded
    DONE: 2

    operation addEventListener<K = /*(!) keyof FileReaderEventMap */ Object?>(type`: K, listener: operation(this: FileReader, ev: /*(!) FileReaderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof FileReaderEventMap */ Object?>(type`: K, listener: operation(this: FileReader, ev: /*(!) FileReaderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ FileReader: object { prototype: FileReader; on create(): FileReader; guarded EMPTY: 0; guarded LOADING: 1; guarded DONE: 2 }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem) */

  type FileSystem = aspect
  {
    guarded
    name: Text

    guarded
    root: FileSystemDirectoryEntry
  }


  /*(!) var */ FileSystem: object { prototype: FileSystem; on create(): FileSystem }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry) */

  type FileSystemDirectoryEntry = aspect FileSystemEntry
  {
    operation createReader(): FileSystemDirectoryReader

    operation getDirectory(path: Text? = empty, options: FileSystemFlags? = empty, successCallback: FileSystemEntryCallback? = empty, errorCallback: ErrorCallback? = empty)

    operation getFile(path: Text? = empty, options: FileSystemFlags? = empty, successCallback: FileSystemEntryCallback? = empty, errorCallback: ErrorCallback? = empty)
  }


  /*(!) var */ FileSystemDirectoryEntry: object { prototype: FileSystemDirectoryEntry; on create(): FileSystemDirectoryEntry }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle)
  */

  type FileSystemDirectoryHandle = aspect FileSystemHandle
  {
    guarded
    kind: "directory"

    operation getDirectoryHandle(name: Text, options: FileSystemGetDirectoryOptions? = empty): Promise<FileSystemDirectoryHandle>

    operation getFileHandle(name: Text, options: FileSystemGetFileOptions? = empty): Promise<FileSystemFileHandle>

    operation removeEntry(name: Text, options: FileSystemRemoveOptions? = empty): Promise<Ничего>

    operation resolve(possibleDescendant: FileSystemHandle): Promise<Список<Текст>?>
  }


  /*(!) var */ FileSystemDirectoryHandle: object { prototype: FileSystemDirectoryHandle; on create(): FileSystemDirectoryHandle }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader) */

  type FileSystemDirectoryReader = aspect
  {
    operation readEntries(successCallback: FileSystemEntriesCallback, errorCallback: ErrorCallback? = empty)
  }


  /*(!) var */ FileSystemDirectoryReader: object { prototype: FileSystemDirectoryReader; on create(): FileSystemDirectoryReader }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry) */

  type FileSystemEntry = aspect
  {
    guarded
    filesystem: FileSystem

    guarded
    fullPath: Text

    guarded
    isDirectory: YesNo

    guarded
    isFile: YesNo

    guarded
    name: Text

    operation getParent(successCallback: FileSystemEntryCallback? = empty, errorCallback: ErrorCallback? = empty)
  }


  /*(!) var */ FileSystemEntry: object { prototype: FileSystemEntry; on create(): FileSystemEntry }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry) */

  type FileSystemFileEntry = aspect FileSystemEntry
  {
    operation file(successCallback: FileCallback, errorCallback: ErrorCallback? = empty)
  }


  /*(!) var */ FileSystemFileEntry: object { prototype: FileSystemFileEntry; on create(): FileSystemFileEntry }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle)
  */

  type FileSystemFileHandle = aspect FileSystemHandle
  {
    guarded
    kind: "file"

    operation createWritable(options: FileSystemCreateWritableOptions? = empty): Promise<FileSystemWritableFileStream>

    operation getFile(): Promise<File>
  }


  /*(!) var */ FileSystemFileHandle: object { prototype: FileSystemFileHandle; on create(): FileSystemFileHandle }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle)
  */

  type FileSystemHandle = aspect
  {
    guarded
    kind: FileSystemHandleKind

    guarded
    name: Text

    operation isSameEntry(other: FileSystemHandle): Promise<ДаНет>
  }


  /*(!) var */ FileSystemHandle: object { prototype: FileSystemHandle; on create(): FileSystemHandle }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream)
  */

  type FileSystemWritableFileStream = aspect WritableStream
  {
    operation seek(position: Number): Promise<Ничего>

    operation truncate(size: Number): Promise<Ничего>

    operation write(data: FileSystemWriteChunkType): Promise<Ничего>
  }


  /*(!) var */ FileSystemWritableFileStream: object { prototype: FileSystemWritableFileStream; on create(): FileSystemWritableFileStream }


  /**
  * Focus-related events like focus, blur, focusin, or focusout.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent)
  */

  type FocusEvent = aspect UIEvent
  {
    guarded
    relatedTarget: EventTarget?
  }


  /*(!) var */ FocusEvent: object { prototype: FocusEvent; on create(type`: Text, eventInitDict: FocusEventInit? = empty): FocusEvent }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace) */

  type FontFace = aspect
  {
    ascentOverride: Text

    descentOverride: Text

    display: FontDisplay

    family: Text

    featureSettings: Text

    lineGapOverride: Text

    guarded
    loaded: Promise<FontFace>

    guarded
    status: FontFaceLoadStatus

    stretch: Text

    style: Text

    unicodeRange: Text

    variant`: Text

    weight: Text

    operation load(): Promise<FontFace>
  }


  /*(!) var */ FontFace: object { prototype: FontFace; on create(family: Text, source: Object? /*(!)Текст | BinaryData*/, descriptors: FontFaceDescriptors? = empty): FontFace }


  type FontFaceSetEventMap = aspect
  {
    loading: Event

    loadingdone: Event

    loadingerror: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet) */

  type FontFaceSet = aspect EventTarget
  {
    onloading: (operation(this: FontFaceSet, ev: Event): /*(!) any */ Object?)?

    onloadingdone: (operation(this: FontFaceSet, ev: Event): /*(!) any */ Object?)?

    onloadingerror: (operation(this: FontFaceSet, ev: Event): /*(!) any */ Object?)?

    guarded
    ready: Promise<FontFaceSet>

    guarded
    status: FontFaceSetLoadStatus

    operation check(font: Text, text: Text? = empty): YesNo

    operation load(font: Text, text: Text? = empty): Promise<Список<FontFace>>

    operation forEach(callbackfn: operation(value: FontFace, key: FontFace, parent: FontFaceSet), thisArg: /*(!) any */ Object? = empty)

    operation addEventListener<K = /*(!) keyof FontFaceSetEventMap */ Object?>(type`: K, listener: operation(this: FontFaceSet, ev: /*(!) FontFaceSetEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof FontFaceSetEventMap */ Object?>(type`: K, listener: operation(this: FontFaceSet, ev: /*(!) FontFaceSetEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ FontFaceSet: object { prototype: FontFaceSet; on create(initialFaces: Список<FontFace>): FontFaceSet }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent) */

  type FontFaceSetLoadEvent = aspect Event
  {
    guarded
    fontfaces: ReadonlyArray<FontFace>
  }


  /*(!) var */ FontFaceSetLoadEvent: object { prototype: FontFaceSetLoadEvent; on create(type`: Text, eventInitDict: FontFaceSetLoadEventInit? = empty): FontFaceSetLoadEvent }


  type FontFaceSource = aspect
  {
    guarded
    fonts: FontFaceSet
  }


  /**
  * Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData)
  */

  type FormData = aspect
  {
    operation append(name: Text, value: Object? /*(!)Текст | Blob*/)

    operation append(name: Text, value: Text)

    operation append(name: Text, blobValue: Blob, filename: Text? = empty)

    operation delete(name: Text)

    operation get(name: Text): FormDataEntryValue?

    operation getAll(name: Text): Список<FormDataEntryValue>

    operation has(name: Text): YesNo

    operation set(name: Text, value: Object? /*(!)Текст | Blob*/)

    operation set(name: Text, value: Text)

    operation set(name: Text, blobValue: Blob, filename: Text? = empty)

    operation forEach(callbackfn: operation(value: FormDataEntryValue, key: Text, parent: FormData), thisArg: /*(!) any */ Object? = empty)
  }


  /*(!) var */ FormData: object { prototype: FormData; on create(form: HTMLFormElement? = empty, submitter: HTMLElement? = empty): FormData }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent) */

  type FormDataEvent = aspect Event
  {
    guarded
    formData: FormData
  }


  /*(!) var */ FormDataEvent: object { prototype: FormDataEvent; on create(type`: Text, eventInitDict: FormDataEventInit): FormDataEvent }


  /**
  * A change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode)
  */

  type GainNode = aspect AudioNode
  {
    guarded
    gain: AudioParam
  }


  /*(!) var */ GainNode: object { prototype: GainNode; on create(context: BaseAudioContext, options: GainOptions? = empty): GainNode }


  /**
  * This Gamepad API interface defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad)
  */

  type Gamepad = aspect
  {
    guarded
    axes: ReadonlyArray<Number>

    guarded
    buttons: ReadonlyArray<GamepadButton>

    guarded
    connected: YesNo

    guarded
    hapticActuators: ReadonlyArray<GamepadHapticActuator>

    guarded
    id: Text

    guarded
    index: Number

    guarded
    mapping: GamepadMappingType

    guarded
    timestamp: DOMHighResTimeStamp

    guarded
    vibrationActuator: GamepadHapticActuator?
  }


  /*(!) var */ Gamepad: object { prototype: Gamepad; on create(): Gamepad }


  /**
  * An individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton)
  */

  type GamepadButton = aspect
  {
    guarded
    pressed: YesNo

    guarded
    touched: YesNo

    guarded
    value: Number
  }


  /*(!) var */ GamepadButton: object { prototype: GamepadButton; on create(): GamepadButton }


  /**
  * This Gamepad API interface contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected and Window.gamepaddisconnected are fired in response to.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent)
  */

  type GamepadEvent = aspect Event
  {
    guarded
    gamepad: Gamepad
  }


  /*(!) var */ GamepadEvent: object { prototype: GamepadEvent; on create(type`: Text, eventInitDict: GamepadEventInit): GamepadEvent }


  /**
  * This Gamepad API interface represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator)
  */

  type GamepadHapticActuator = aspect
  {
    guarded
    type`: GamepadHapticActuatorType

    operation playEffect(type`: GamepadHapticEffectType, params: GamepadEffectParameters? = empty): Promise<GamepadHapticsResult>

    operation reset(): Promise<GamepadHapticsResult>
  }


  /*(!) var */ GamepadHapticActuator: object { prototype: GamepadHapticActuator; on create(): GamepadHapticActuator }


  type GenericTransformStream = aspect
  {
    guarded
    readable: ReadableStream

    guarded
    writable: WritableStream
  }


  /**
  * An object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation)
  */

  type Geolocation = aspect
  {
    operation clearWatch(watchId: Number)

    operation getCurrentPosition(successCallback: PositionCallback, errorCallback: PositionErrorCallback? = empty, options: PositionOptions? = empty)

    operation watchPosition(successCallback: PositionCallback, errorCallback: PositionErrorCallback? = empty, options: PositionOptions? = empty): Number
  }


  /*(!) var */ Geolocation: object { prototype: Geolocation; on create(): Geolocation }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates)
  */

  type GeolocationCoordinates = aspect
  {
    guarded
    accuracy: Number

    guarded
    altitude: Number?

    guarded
    altitudeAccuracy: Number?

    guarded
    heading: Number?

    guarded
    latitude: Number

    guarded
    longitude: Number

    guarded
    speed: Number?
  }


  /*(!) var */ GeolocationCoordinates: object { prototype: GeolocationCoordinates; on create(): GeolocationCoordinates }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition)
  */

  type GeolocationPosition = aspect
  {
    guarded
    coords: GeolocationCoordinates

    guarded
    timestamp: EpochTimeStamp
  }


  /*(!) var */ GeolocationPosition: object { prototype: GeolocationPosition; on create(): GeolocationPosition }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError) */

  type GeolocationPositionError = aspect
  {
    guarded
    code: Number

    guarded
    message: Text

    guarded
    PERMISSION_DENIED: 1

    guarded
    POSITION_UNAVAILABLE: 2

    guarded
    TIMEOUT: 3
  }


  /*(!) var */ GeolocationPositionError: object { prototype: GeolocationPositionError; on create(): GeolocationPositionError; guarded PERMISSION_DENIED: 1; guarded POSITION_UNAVAILABLE: 2; guarded TIMEOUT: 3 }


  type GlobalEventHandlersEventMap = aspect
  {
    abort: UIEvent

    animationcancel: AnimationEvent

    animationend: AnimationEvent

    animationiteration: AnimationEvent

    animationstart: AnimationEvent

    auxclick: MouseEvent

    beforeinput: InputEvent

    blur: FocusEvent

    cancel: Event

    canplay: Event

    canplaythrough: Event

    change: Event

    click: MouseEvent

    close: Event

    compositionend: CompositionEvent

    compositionstart: CompositionEvent

    compositionupdate: CompositionEvent

    contextmenu: MouseEvent

    copy: ClipboardEvent

    cuechange: Event

    cut: ClipboardEvent

    dblclick: MouseEvent

    drag: DragEvent

    dragend: DragEvent

    dragenter: DragEvent

    dragleave: DragEvent

    dragover: DragEvent

    dragstart: DragEvent

    drop: DragEvent

    durationchange: Event

    emptied: Event

    ended: Event

    error: ErrorEvent

    focus: FocusEvent

    focusin: FocusEvent

    focusout: FocusEvent

    formdata: FormDataEvent

    gotpointercapture: PointerEvent

    input: Event

    invalid: Event

    keydown: KeyboardEvent

    keypress: KeyboardEvent

    keyup: KeyboardEvent

    load: Event

    loadeddata: Event

    loadedmetadata: Event

    loadstart: Event

    lostpointercapture: PointerEvent

    mousedown: MouseEvent

    mouseenter: MouseEvent

    mouseleave: MouseEvent

    mousemove: MouseEvent

    mouseout: MouseEvent

    mouseover: MouseEvent

    mouseup: MouseEvent

    paste: ClipboardEvent

    pause: Event

    play: Event

    playing: Event

    pointercancel: PointerEvent

    pointerdown: PointerEvent

    pointerenter: PointerEvent

    pointerleave: PointerEvent

    pointermove: PointerEvent

    pointerout: PointerEvent

    pointerover: PointerEvent

    pointerup: PointerEvent

    progress: ProgressEvent

    ratechange: Event

    reset: Event

    resize: UIEvent

    scroll: Event

    scrollend: Event

    securitypolicyviolation: SecurityPolicyViolationEvent

    seeked: Event

    seeking: Event

    select: Event

    selectionchange: Event

    selectstart: Event

    slotchange: Event

    stalled: Event

    submit: SubmitEvent

    suspend: Event

    timeupdate: Event

    toggle: Event

    touchcancel: TouchEvent

    touchend: TouchEvent

    touchmove: TouchEvent

    touchstart: TouchEvent

    transitioncancel: TransitionEvent

    transitionend: TransitionEvent

    transitionrun: TransitionEvent

    transitionstart: TransitionEvent

    volumechange: Event

    waiting: Event

    webkitanimationend: Event

    webkitanimationiteration: Event

    webkitanimationstart: Event

    webkittransitionend: Event

    wheel: WheelEvent
  }


  type GlobalEventHandlers = aspect
  {
    operation addEventListener<K = /*(!) keyof GlobalEventHandlersEventMap */ Object?>(type`: K, listener: operation(this: GlobalEventHandlers, ev: /*(!) GlobalEventHandlersEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof GlobalEventHandlersEventMap */ Object?>(type`: K, listener: operation(this: GlobalEventHandlers, ev: /*(!) GlobalEventHandlersEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection) */

  type HTMLAllCollection = aspect
  {
    guarded
    length: Number

    operation item(nameOrIndex: Text? = empty): Object? /*(!)HTMLCollection | Element | пусто*/

    operation namedItem(name: Text): Object? /*(!)HTMLCollection | Element | пусто*/

    /*(!) [index: number]: Element*/
  }


  /*(!) var */ HTMLAllCollection: object { prototype: HTMLAllCollection; on create(): HTMLAllCollection }


  /**
  * Hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement)
  */

  type HTMLAnchorElement = aspect HTMLElement, HTMLHyperlinkElementUtils
  {
    ping: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLAnchorElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLAnchorElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLAnchorElement: object { prototype: HTMLAnchorElement; on create(): HTMLAnchorElement }


  /**
  * Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement)
  */

  type HTMLAreaElement = aspect HTMLElement, HTMLHyperlinkElementUtils
  {
    ping: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLAreaElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLAreaElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLAreaElement: object { prototype: HTMLAreaElement; on create(): HTMLAreaElement }


  /**
  * Provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAudioElement)
  */

  type HTMLAudioElement = aspect HTMLMediaElement
  {
    operation addEventListener<K = /*(!) keyof HTMLMediaElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLAudioElement, ev: /*(!) HTMLMediaElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLMediaElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLAudioElement, ev: /*(!) HTMLMediaElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLAudioElement: object { prototype: HTMLAudioElement; on create(): HTMLAudioElement }


  /**
  * A HTML line break element (<br>). It inherits from HTMLElement.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBRElement)
  */

  type HTMLBRElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLBRElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLBRElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLBRElement: object { prototype: HTMLBRElement; on create(): HTMLBRElement }


  /**
  * Contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement)
  */

  type HTMLBaseElement = aspect HTMLElement
  {
    href: Text

    target: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLBaseElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLBaseElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLBaseElement: object { prototype: HTMLBaseElement; on create(): HTMLBaseElement }


  type HTMLBodyElementEventMap = aspect HTMLElementEventMap, WindowEventHandlersEventMap
  {

  }


  /**
  * Provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement)
  */

  type HTMLBodyElement = aspect HTMLElement, WindowEventHandlers
  {
    operation addEventListener<K = /*(!) keyof HTMLBodyElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLBodyElement, ev: /*(!) HTMLBodyElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLBodyElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLBodyElement, ev: /*(!) HTMLBodyElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLBodyElement: object { prototype: HTMLBodyElement; on create(): HTMLBodyElement }


  /**
  * Provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement)
  */

  type HTMLButtonElement = aspect HTMLElement, PopoverInvokerElement
  {
    disabled: YesNo

    guarded
    form: HTMLFormElement?

    formAction: Text

    formEnctype: Text

    formMethod: Text

    formNoValidate: YesNo

    formTarget: Text

    guarded
    labels: NodeListOf<HTMLLabelElement>

    name: Text

    type`: Object? /*(!)"submit" | "reset" | "button"*/

    guarded
    validationMessage: Text

    guarded
    validity: ValidityState

    value: Text

    guarded
    willValidate: YesNo

    operation checkValidity(): YesNo

    operation reportValidity(): YesNo

    operation setCustomValidity(error`: Text)

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLButtonElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLButtonElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLButtonElement: object { prototype: HTMLButtonElement; on create(): HTMLButtonElement }


  /**
  * Provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement)
  */

  type HTMLCanvasElement = aspect HTMLElement
  {
    height: Number

    width: Number

    operation captureStream(frameRequestRate: Number? = empty): MediaStream

    operation getContext(contextId: "2d", options: CanvasRenderingContext2DSettings? = empty): CanvasRenderingContext2D?

    operation getContext(contextId: "bitmaprenderer", options: ImageBitmapRenderingContextSettings? = empty): ImageBitmapRenderingContext?

    operation getContext(contextId: "webgl", options: WebGLContextAttributes? = empty): WebGLRenderingContext?

    operation getContext(contextId: "webgl2", options: WebGLContextAttributes? = empty): WebGL2RenderingContext?

    operation getContext(contextId: Text, options: /*(!) any */ Object? = empty): RenderingContext?

    operation toBlob(callback: BlobCallback, type`: Text? = empty, quality: /*(!) any */ Object? = empty)

    operation toDataURL(type`: Text? = empty, quality: /*(!) any */ Object? = empty): Text

    operation transferControlToOffscreen(): OffscreenCanvas

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLCanvasElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLCanvasElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLCanvasElement: object { prototype: HTMLCanvasElement; on create(): HTMLCanvasElement }


  /**
  * A generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection)
  */

  type HTMLCollectionBase = aspect
  {
    guarded
    length: Number

    operation item(index: Number): Element?

    /*(!) [index: number]: Element*/
  }


  type HTMLCollection = aspect HTMLCollectionBase
  {
    operation namedItem(name: Text): Element?
  }


  /*(!) var */ HTMLCollection: object { prototype: HTMLCollection; on create(): HTMLCollection }


  type HTMLCollectionOf<T = Element> = aspect HTMLCollectionBase
  {
    operation item(index: Number): T?

    operation namedItem(name: Text): T?

    /*(!) [index: number]: T*/
  }


  /**
  * Provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDListElement)
  */

  type HTMLDListElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDListElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDListElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLDListElement: object { prototype: HTMLDListElement; on create(): HTMLDListElement }


  /**
  * Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement)
  */

  type HTMLDataElement = aspect HTMLElement
  {
    value: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDataElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDataElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLDataElement: object { prototype: HTMLDataElement; on create(): HTMLDataElement }


  /**
  * Provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement)
  */

  type HTMLDataListElement = aspect HTMLElement
  {
    guarded
    options: HTMLCollectionOf<HTMLOptionElement>

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDataListElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDataListElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLDataListElement: object { prototype: HTMLDataListElement; on create(): HTMLDataListElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement) */

  type HTMLDetailsElement = aspect HTMLElement
  {
    open: YesNo

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDetailsElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDetailsElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLDetailsElement: object { prototype: HTMLDetailsElement; on create(): HTMLDetailsElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement) */

  type HTMLDialogElement = aspect HTMLElement
  {
    open: YesNo

    returnValue: Text

    operation close(returnValue: Text? = empty)

    operation show()

    operation showModal()

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDialogElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDialogElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLDialogElement: object { prototype: HTMLDialogElement; on create(): HTMLDialogElement }


  /**
  * Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDivElement)
  */

  type HTMLDivElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDivElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLDivElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLDivElement: object { prototype: HTMLDivElement; on create(): HTMLDivElement }


  type HTMLElementEventMap = aspect ElementEventMap, GlobalEventHandlersEventMap
  {

  }


  /**
  * Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)
  */

  type HTMLElement = aspect Element, ElementCSSInlineStyle, ElementContentEditable, GlobalEventHandlers, HTMLOrSVGElement
  {
    accessKey: Text

    guarded
    accessKeyLabel: Text

    autocapitalize: Text

    dir: Text

    draggable: YesNo

    hidden`: YesNo

    inert: YesNo

    innerText: Text

    lang: Text

    guarded
    offsetHeight: Number

    guarded
    offsetLeft: Number

    guarded
    offsetParent: Element?

    guarded
    offsetTop: Number

    guarded
    offsetWidth: Number

    outerText: Text

    popover: Text?

    spellcheck: YesNo

    title: Text

    translate: YesNo

    operation attachInternals(): ElementInternals

    operation click()

    operation hidePopover()

    operation showPopover()

    operation togglePopover(force: YesNo? = empty)

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLElement: object { prototype: HTMLElement; on create(): HTMLElement }


  /**
  * Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement)
  */

  type HTMLEmbedElement = aspect HTMLElement
  {
    type`: Text

    operation getSVGDocument(): Document?

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLEmbedElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLEmbedElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLEmbedElement: object { prototype: HTMLEmbedElement; on create(): HTMLEmbedElement }


  /**
  * Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement)
  */

  type HTMLFieldSetElement = aspect HTMLElement
  {
    disabled: YesNo

    guarded
    elements: HTMLCollection

    guarded
    form: HTMLFormElement?

    name: Text

    guarded
    type`: Text

    guarded
    validationMessage: Text

    guarded
    validity: ValidityState

    guarded
    willValidate: YesNo

    operation checkValidity(): YesNo

    operation reportValidity(): YesNo

    operation setCustomValidity(error`: Text)

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLFieldSetElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLFieldSetElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLFieldSetElement: object { prototype: HTMLFieldSetElement; on create(): HTMLFieldSetElement }


  /**
  * A collection of HTML form control elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection)
  */

  type HTMLFormControlsCollection = aspect HTMLCollectionBase
  {
    operation namedItem(name: Text): Object? /*(!)RadioNodeList | Element | пусто*/
  }


  /*(!) var */ HTMLFormControlsCollection: object { prototype: HTMLFormControlsCollection; on create(): HTMLFormControlsCollection }


  /**
  * A <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement)
  */

  type HTMLFormElement = aspect HTMLElement
  {
    acceptCharset: Text

    action: Text

    autocomplete: AutoFillBase

    guarded
    elements: HTMLFormControlsCollection

    encoding: Text

    enctype: Text

    guarded
    length: Number

    method: Text

    name: Text

    noValidate: YesNo

    rel: Text

    guarded
    relList: DOMTokenList

    target: Text

    operation checkValidity(): YesNo

    operation reportValidity(): YesNo

    operation requestSubmit(submitter: HTMLElement? = empty)

    operation reset()

    operation submit()

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLFormElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLFormElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    /*(!) [index: number]: Element*/

    /*(!) [name: string]: any*/
  }


  /*(!) var */ HTMLFormElement: object { prototype: HTMLFormElement; on create(): HTMLFormElement }


  type HTMLFrameSetElementEventMap = aspect HTMLElementEventMap, WindowEventHandlersEventMap
  {

  }


  /**
  * Provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHRElement)
  */

  type HTMLHRElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLHRElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLHRElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLHRElement: object { prototype: HTMLHRElement; on create(): HTMLHRElement }


  /**
  * Contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadElement)
  */

  type HTMLHeadElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLHeadElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLHeadElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLHeadElement: object { prototype: HTMLHeadElement; on create(): HTMLHeadElement }


  /**
  * The different heading elements. It inherits methods and properties from the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadingElement)
  */

  type HTMLHeadingElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLHeadingElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLHeadingElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLHeadingElement: object { prototype: HTMLHeadingElement; on create(): HTMLHeadingElement }


  /**
  * Serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement)
  */

  type HTMLHtmlElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLHtmlElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLHtmlElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLHtmlElement: object { prototype: HTMLHtmlElement; on create(): HTMLHtmlElement }


  type HTMLHyperlinkElementUtils = aspect
  {
    hash: Text

    host: Text

    hostname: Text

    href: Text

    operation toString(): Text

    guarded
    origin: Text

    password: Text

    pathname: Text

    port: Text

    protocol: Text

    search: Text

    username: Text
  }


  /**
  * Provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement)
  */

  type HTMLIFrameElement = aspect HTMLElement
  {
    allow: Text

    allowFullscreen: YesNo

    loading: Text

    guarded
    sandbox: DOMTokenList

    operation getSVGDocument(): Document?

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLIFrameElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLIFrameElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLIFrameElement: object { prototype: HTMLIFrameElement; on create(): HTMLIFrameElement }


  /**
  * Provides special properties and methods for manipulating <img> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)
  */

  type HTMLImageElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLImageElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLImageElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLImageElement: object { prototype: HTMLImageElement; on create(): HTMLImageElement }


  /**
  * Provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement)
  */

  type HTMLInputElement = aspect HTMLElement, PopoverInvokerElement
  {
    capture: Text

    dirName: Text

    disabled: YesNo

    minLength: Number

    readOnly: YesNo

    size: Number

    operation setRangeText(replacement: Text, start: Number, end: Number, selectionMode: SelectionMode? = empty)

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLInputElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLInputElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLInputElement: object { prototype: HTMLInputElement; on create(): HTMLInputElement }


  /**
  * Exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLIElement)
  */

  type HTMLLIElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLLIElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLLIElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLLIElement: object { prototype: HTMLLIElement; on create(): HTMLLIElement }


  /**
  * Gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement)
  */

  type HTMLLabelElement = aspect HTMLElement
  {
    guarded
    control: HTMLElement?

    guarded
    form: HTMLFormElement?

    htmlFor: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLLabelElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLLabelElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLLabelElement: object { prototype: HTMLLabelElement; on create(): HTMLLabelElement }


  /**
  * The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLegendElement)
  */

  type HTMLLegendElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLLegendElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLLegendElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLLegendElement: object { prototype: HTMLLegendElement; on create(): HTMLLegendElement }


  /**
  * Reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement)
  */

  type HTMLLinkElement = aspect HTMLElement, LinkStyle
  {
    disabled: YesNo

    imageSizes: Text

    imageSrcset: Text

    integrity: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLLinkElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLLinkElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLLinkElement: object { prototype: HTMLLinkElement; on create(): HTMLLinkElement }


  /**
  * Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement)
  */

  type HTMLMapElement = aspect HTMLElement
  {
    guarded
    areas: HTMLCollection

    name: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMapElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMapElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLMapElement: object { prototype: HTMLMapElement; on create(): HTMLMapElement }


  type HTMLMediaElementEventMap = aspect HTMLElementEventMap
  {
    encrypted: MediaEncryptedEvent

    waitingforkey: Event
  }


  /**
  * Adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement)
  */

  type HTMLMediaElement = aspect HTMLElement
  {
    autoplay: YesNo

    guarded
    buffered: TimeRanges

    controls: YesNo

    crossOrigin: Text?

    guarded
    currentSrc: Text

    currentTime: Number

    defaultMuted: YesNo

    defaultPlaybackRate: Number

    disableRemotePlayback: YesNo

    guarded
    duration: Number

    guarded
    ended: YesNo

    guarded
    error`: MediaError?

    loop`: YesNo

    guarded
    mediaKeys: MediaKeys?

    muted: YesNo

    guarded
    networkState: Number

    onencrypted: (operation(this: HTMLMediaElement, ev: MediaEncryptedEvent): /*(!) any */ Object?)?

    onwaitingforkey: (operation(this: HTMLMediaElement, ev: Event): /*(!) any */ Object?)?

    guarded
    paused: YesNo

    playbackRate: Number

    guarded
    played: TimeRanges

    preload: Object? /*(!)"none" | "metadata" | "auto" | ""*/

    preservesPitch: YesNo

    guarded
    readyState: Number

    guarded
    remote: RemotePlayback

    guarded
    seekable: TimeRanges

    guarded
    seeking: YesNo

    src: Text

    srcObject: MediaProvider?

    guarded
    textTracks: TextTrackList

    volume: Number

    operation addTextTrack(kind: TextTrackKind, label: Text? = empty, language: Text? = empty): TextTrack

    operation canPlayType(type`: Text): CanPlayTypeResult

    operation fastSeek(time: Number)

    operation load()

    operation pause()

    operation play(): Promise<Ничего>

    operation setMediaKeys(mediaKeys: MediaKeys?): Promise<Ничего>

    guarded
    NETWORK_EMPTY: 0

    guarded
    NETWORK_IDLE: 1

    guarded
    NETWORK_LOADING: 2

    guarded
    NETWORK_NO_SOURCE: 3

    guarded
    HAVE_NOTHING: 0

    guarded
    HAVE_METADATA: 1

    guarded
    HAVE_CURRENT_DATA: 2

    guarded
    HAVE_FUTURE_DATA: 3

    guarded
    HAVE_ENOUGH_DATA: 4

    operation addEventListener<K = /*(!) keyof HTMLMediaElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMediaElement, ev: /*(!) HTMLMediaElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLMediaElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMediaElement, ev: /*(!) HTMLMediaElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLMediaElement: object { prototype: HTMLMediaElement; on create(): HTMLMediaElement; guarded NETWORK_EMPTY: 0; guarded NETWORK_IDLE: 1; guarded NETWORK_LOADING: 2; guarded NETWORK_NO_SOURCE: 3; guarded HAVE_NOTHING: 0; guarded HAVE_METADATA: 1; guarded HAVE_CURRENT_DATA: 2; guarded HAVE_FUTURE_DATA: 3; guarded HAVE_ENOUGH_DATA: 4 }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMenuElement) */

  type HTMLMenuElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMenuElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMenuElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLMenuElement: object { prototype: HTMLMenuElement; on create(): HTMLMenuElement }


  /**
  * Contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement)
  */

  type HTMLMetaElement = aspect HTMLElement
  {
    media: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMetaElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMetaElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLMetaElement: object { prototype: HTMLMetaElement; on create(): HTMLMetaElement }


  /**
  * The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement)
  */

  type HTMLMeterElement = aspect HTMLElement
  {
    high: Number

    guarded
    labels: NodeListOf<HTMLLabelElement>

    low: Number

    max: Number

    min: Number

    optimum: Number

    value: Number

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMeterElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLMeterElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLMeterElement: object { prototype: HTMLMeterElement; on create(): HTMLMeterElement }


  /**
  * Provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement)
  */

  type HTMLModElement = aspect HTMLElement
  {
    cite: Text

    dateTime: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLModElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLModElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLModElement: object { prototype: HTMLModElement; on create(): HTMLModElement }


  /**
  * Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement)
  */

  type HTMLOListElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLOListElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLOListElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLOListElement: object { prototype: HTMLOListElement; on create(): HTMLOListElement }


  /**
  * Provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement)
  */

  type HTMLObjectElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLObjectElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLObjectElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLObjectElement: object { prototype: HTMLObjectElement; on create(): HTMLObjectElement }


  /**
  * Provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement)
  */

  type HTMLOptGroupElement = aspect HTMLElement
  {
    disabled: YesNo

    label: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLOptGroupElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLOptGroupElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLOptGroupElement: object { prototype: HTMLOptGroupElement; on create(): HTMLOptGroupElement }


  /**
  * <option> elements and inherits all classes and methods of the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement)
  */

  type HTMLOptionElement = aspect HTMLElement
  {
    defaultSelected: YesNo

    disabled: YesNo

    guarded
    form: HTMLFormElement?

    guarded
    index: Number

    label: Text

    selected: YesNo

    text: Text

    value: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLOptionElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLOptionElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLOptionElement: object { prototype: HTMLOptionElement; on create(): HTMLOptionElement }


  /**
  * HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection)
  */

  type HTMLOptionsCollection = aspect HTMLCollectionOf<HTMLOptionElement>
  {
    length: Number

    selectedIndex: Number

    operation add(element: Object? /*(!)HTMLOptionElement | HTMLOptGroupElement*/, before: Object? /*(!)HTMLElement | Number | пусто | пусто*/ = empty)

    operation remove(index: Number)
  }


  /*(!) var */ HTMLOptionsCollection: object { prototype: HTMLOptionsCollection; on create(): HTMLOptionsCollection }


  type HTMLOrSVGElement = aspect
  {
    autofocus: YesNo

    guarded
    dataset: DOMStringMap

    nonce: Text

    tabIndex: Number

    operation blur()

    operation focus(options: FocusOptions? = empty)
  }


  /**
  * Provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement)
  */

  type HTMLOutputElement = aspect HTMLElement
  {
    defaultValue: Text

    guarded
    form: HTMLFormElement?

    guarded
    htmlFor: DOMTokenList

    guarded
    labels: NodeListOf<HTMLLabelElement>

    name: Text

    guarded
    type`: Text

    guarded
    validationMessage: Text

    guarded
    validity: ValidityState

    value: Text

    guarded
    willValidate: YesNo

    operation checkValidity(): YesNo

    operation reportValidity(): YesNo

    operation setCustomValidity(error`: Text)

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLOutputElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLOutputElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLOutputElement: object { prototype: HTMLOutputElement; on create(): HTMLOutputElement }


  /**
  * Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLParagraphElement)
  */

  type HTMLParagraphElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLParagraphElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLParagraphElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLParagraphElement: object { prototype: HTMLParagraphElement; on create(): HTMLParagraphElement }


  /**
  * A <picture> HTML element. It doesn't implement specific properties or methods.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLPictureElement)
  */

  type HTMLPictureElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLPictureElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLPictureElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLPictureElement: object { prototype: HTMLPictureElement; on create(): HTMLPictureElement }


  /**
  * Exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLPreElement)
  */

  type HTMLPreElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLPreElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLPreElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLPreElement: object { prototype: HTMLPreElement; on create(): HTMLPreElement }


  /**
  * Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement)
  */

  type HTMLProgressElement = aspect HTMLElement
  {
    guarded
    labels: NodeListOf<HTMLLabelElement>

    max: Number

    guarded
    position: Number

    value: Number

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLProgressElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLProgressElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLProgressElement: object { prototype: HTMLProgressElement; on create(): HTMLProgressElement }


  /**
  * Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement)
  */

  type HTMLQuoteElement = aspect HTMLElement
  {
    cite: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLQuoteElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLQuoteElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLQuoteElement: object { prototype: HTMLQuoteElement; on create(): HTMLQuoteElement }


  /**
  * HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement)
  */

  type HTMLScriptElement = aspect HTMLElement
  {
    async: YesNo

    crossOrigin: Text?

    integrity: Text

    noModule: YesNo

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLScriptElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLScriptElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLScriptElement: object { prototype: HTMLScriptElement; on create(): HTMLScriptElement; operation supports(type`: Text): YesNo }


  /**
  * A <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement)
  */

  type HTMLSelectElement = aspect HTMLElement
  {
    autocomplete: AutoFill

    disabled: YesNo

    guarded
    form: HTMLFormElement?

    guarded
    labels: NodeListOf<HTMLLabelElement>

    length: Number

    multiple: YesNo

    name: Text

    guarded
    options: HTMLOptionsCollection

    required: YesNo

    selectedIndex: Number

    guarded
    selectedOptions: HTMLCollectionOf<HTMLOptionElement>

    size: Number

    guarded
    type`: Text

    guarded
    validationMessage: Text

    guarded
    validity: ValidityState

    value: Text

    guarded
    willValidate: YesNo

    operation add(element: Object? /*(!)HTMLOptionElement | HTMLOptGroupElement*/, before: Object? /*(!)HTMLElement | Number | пусто | пусто*/ = empty)

    operation checkValidity(): YesNo

    operation item(index: Number): HTMLOptionElement?

    operation namedItem(name: Text): HTMLOptionElement?

    operation remove()

    operation remove(index: Number)

    operation reportValidity(): YesNo

    operation setCustomValidity(error`: Text)

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLSelectElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLSelectElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    /*(!) [name: number]: HTMLOptionElement | HTMLOptGroupElement*/
  }


  /*(!) var */ HTMLSelectElement: object { prototype: HTMLSelectElement; on create(): HTMLSelectElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement) */

  type HTMLSlotElement = aspect HTMLElement
  {
    name: Text

    #js.МассивПараметров
    operation assign(nodes: Список<Object? /*(!)Element | Text*/>)

    operation assignedElements(options: AssignedNodesOptions? = empty): Список<Element>

    operation assignedNodes(options: AssignedNodesOptions? = empty): Список<Node>

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLSlotElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLSlotElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLSlotElement: object { prototype: HTMLSlotElement; on create(): HTMLSlotElement }


  /**
  * Provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement)
  */

  type HTMLSourceElement = aspect HTMLElement
  {
    height: Number

    media: Text

    sizes: Text

    src: Text

    srcset: Text

    type`: Text

    width: Number

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLSourceElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLSourceElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLSourceElement: object { prototype: HTMLSourceElement; on create(): HTMLSourceElement }


  /**
  * A <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)
  */

  type HTMLSpanElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLSpanElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLSpanElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLSpanElement: object { prototype: HTMLSpanElement; on create(): HTMLSpanElement }


  /**
  * A <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement)
  */

  type HTMLStyleElement = aspect HTMLElement, LinkStyle
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLStyleElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLStyleElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLStyleElement: object { prototype: HTMLStyleElement; on create(): HTMLStyleElement }


  /**
  * Special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement)
  */

  type HTMLTableCaptionElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableCaptionElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableCaptionElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTableCaptionElement: object { prototype: HTMLTableCaptionElement; on create(): HTMLTableCaptionElement }


  /**
  * Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement)
  */

  type HTMLTableCellElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableCellElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableCellElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTableCellElement: object { prototype: HTMLTableCellElement; on create(): HTMLTableCellElement }


  /**
  * Provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement)
  */

  type HTMLTableColElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableColElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableColElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTableColElement: object { prototype: HTMLTableColElement; on create(): HTMLTableColElement }


  /**
  * Provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement)
  */

  type HTMLTableElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTableElement: object { prototype: HTMLTableElement; on create(): HTMLTableElement }


  /**
  * Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement)
  */

  type HTMLTableRowElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableRowElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableRowElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTableRowElement: object { prototype: HTMLTableRowElement; on create(): HTMLTableRowElement }


  /**
  * Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement)
  */

  type HTMLTableSectionElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableSectionElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTableSectionElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTableSectionElement: object { prototype: HTMLTableSectionElement; on create(): HTMLTableSectionElement }


  /**
  * Enables access to the contents of an HTML <template> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement)
  */

  type HTMLTemplateElement = aspect HTMLElement
  {
    guarded
    content: DocumentFragment

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTemplateElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTemplateElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTemplateElement: object { prototype: HTMLTemplateElement; on create(): HTMLTemplateElement }


  /**
  * Provides special properties and methods for manipulating the layout and presentation of <textarea> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement)
  */

  type HTMLTextAreaElement = aspect HTMLElement
  {
    autocomplete: AutoFill

    cols: Number

    defaultValue: Text

    dirName: Text

    disabled: YesNo

    guarded
    form: HTMLFormElement?

    guarded
    labels: NodeListOf<HTMLLabelElement>

    maxLength: Number

    minLength: Number

    name: Text

    placeholder: Text

    readOnly: YesNo

    required: YesNo

    rows: Number

    selectionDirection: Object? /*(!)"forward" | "backward" | "none"*/

    selectionEnd: Number

    selectionStart: Number

    guarded
    textLength: Number

    guarded
    type`: Text

    guarded
    validationMessage: Text

    guarded
    validity: ValidityState

    value: Text

    guarded
    willValidate: YesNo

    wrap: Text

    operation checkValidity(): YesNo

    operation reportValidity(): YesNo

    operation select()

    operation setCustomValidity(error`: Text)

    operation setRangeText(replacement: Text)

    operation setRangeText(replacement: Text, start: Number, end: Number, selectionMode: SelectionMode? = empty)

    operation setSelectionRange(start: Number?, end: Number?, direction: Object? /*(!)"forward" | "backward" | "none" | пусто*/ = empty)

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTextAreaElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTextAreaElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTextAreaElement: object { prototype: HTMLTextAreaElement; on create(): HTMLTextAreaElement }


  /**
  * Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement)
  */

  type HTMLTimeElement = aspect HTMLElement
  {
    dateTime: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTimeElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTimeElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTimeElement: object { prototype: HTMLTimeElement; on create(): HTMLTimeElement }


  /**
  * Contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement)
  */

  type HTMLTitleElement = aspect HTMLElement
  {
    text: Text

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTitleElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTitleElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTitleElement: object { prototype: HTMLTitleElement; on create(): HTMLTitleElement }


  /**
  * The HTMLTrackElement
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement)
  */

  type HTMLTrackElement = aspect HTMLElement
  {
    default: YesNo

    kind: Text

    label: Text

    guarded
    readyState: Number

    src: Text

    srclang: Text

    guarded
    track: TextTrack

    guarded
    NONE: 0

    guarded
    LOADING: 1

    guarded
    LOADED: 2

    guarded
    ERROR: 3

    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTrackElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLTrackElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLTrackElement: object { prototype: HTMLTrackElement; on create(): HTMLTrackElement; guarded NONE: 0; guarded LOADING: 1; guarded LOADED: 2; guarded ERROR: 3 }


  /**
  * Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLUListElement)
  */

  type HTMLUListElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLUListElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLUListElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLUListElement: object { prototype: HTMLUListElement; on create(): HTMLUListElement }


  /**
  * An invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLUnknownElement)
  */

  type HTMLUnknownElement = aspect HTMLElement
  {
    operation addEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLUnknownElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLUnknownElement, ev: /*(!) HTMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLUnknownElement: object { prototype: HTMLUnknownElement; on create(): HTMLUnknownElement }


  type HTMLVideoElementEventMap = aspect HTMLMediaElementEventMap
  {
    enterpictureinpicture: Event

    leavepictureinpicture: Event
  }


  /**
  * Provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement)
  */

  type HTMLVideoElement = aspect HTMLMediaElement
  {
    disablePictureInPicture: YesNo

    height: Number

    onenterpictureinpicture: (operation(this: HTMLVideoElement, ev: Event): /*(!) any */ Object?)?

    onleavepictureinpicture: (operation(this: HTMLVideoElement, ev: Event): /*(!) any */ Object?)?

    playsInline: YesNo

    poster: Text

    guarded
    videoHeight: Number

    guarded
    videoWidth: Number

    width: Number

    operation cancelVideoFrameCallback(handle: Number)

    operation getVideoPlaybackQuality(): VideoPlaybackQuality

    operation requestPictureInPicture(): Promise<PictureInPictureWindow>

    operation requestVideoFrameCallback(callback: VideoFrameRequestCallback): Number

    operation addEventListener<K = /*(!) keyof HTMLVideoElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLVideoElement, ev: /*(!) HTMLVideoElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof HTMLVideoElementEventMap */ Object?>(type`: K, listener: operation(this: HTMLVideoElement, ev: /*(!) HTMLVideoElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ HTMLVideoElement: object { prototype: HTMLVideoElement; on create(): HTMLVideoElement }


  /**
  * Events that fire when the fragment identifier of the URL has changed.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent)
  */

  type HashChangeEvent = aspect Event
  {
    guarded
    newURL: Text

    guarded
    oldURL: Text
  }


  /*(!) var */ HashChangeEvent: object { prototype: HashChangeEvent; on create(type`: Text, eventInitDict: HashChangeEventInit? = empty): HashChangeEvent }


  /**
  * This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers)
  */

  type Headers = aspect
  {
    operation append(name: Text, value: Text)

    operation delete(name: Text)

    operation get(name: Text): Text?

    operation getSetCookie(): Список<Текст>

    operation has(name: Text): YesNo

    operation set(name: Text, value: Text)

    operation forEach(callbackfn: operation(value: Text, key: Text, parent: Headers), thisArg: /*(!) any */ Object? = empty)
  }


  /*(!) var */ Headers: object { prototype: Headers; on create(init: HeadersInit? = empty): Headers }


  /**
  * Allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History)
  */

  type History = aspect
  {
    guarded
    length: Number

    scrollRestoration: ScrollRestoration

    guarded
    state: /*(!) any */ Object?

    operation back()

    operation forward()

    operation go(delta: Number? = empty)

    operation pushState(data: /*(!) any */ Object?, unused: Text, url: Object? /*(!)Текст | URL | пусто | пусто*/ = empty)

    operation replaceState(data: /*(!) any */ Object?, unused: Text, url: Object? /*(!)Текст | URL | пусто | пусто*/ = empty)
  }


  /*(!) var */ History: object { prototype: History; on create(): History }


  /**
  * This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor)
  */

  type IDBCursor = aspect
  {
    guarded
    direction: IDBCursorDirection

    guarded
    key: IDBValidKey

    guarded
    primaryKey: IDBValidKey

    guarded
    request: IDBRequest

    guarded
    source: Object? /*(!)IDBObjectStore | IDBIndex*/

    operation advance(count: Number)

    operation continue(key: IDBValidKey? = empty)

    operation continuePrimaryKey(key: IDBValidKey, primaryKey: IDBValidKey)

    operation delete(): IDBRequest<пусто>

    operation update(value: /*(!) any */ Object?): IDBRequest<IDBValidKey>
  }


  /*(!) var */ IDBCursor: object { prototype: IDBCursor; on create(): IDBCursor }


  /**
  * This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue)
  */

  type IDBCursorWithValue = aspect IDBCursor
  {
    guarded
    value: /*(!) any */ Object?
  }


  /*(!) var */ IDBCursorWithValue: object { prototype: IDBCursorWithValue; on create(): IDBCursorWithValue }


  type IDBDatabaseEventMap = aspect
  {
    abort: Event

    close: Event

    error`: Event

    versionchange: IDBVersionChangeEvent
  }


  /**
  * This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase)
  */

  type IDBDatabase = aspect EventTarget
  {
    guarded
    name: Text

    guarded
    objectStoreNames: DOMStringList

    onabort: (operation(this: IDBDatabase, ev: Event): /*(!) any */ Object?)?

    onclose: (operation(this: IDBDatabase, ev: Event): /*(!) any */ Object?)?

    onerror: (operation(this: IDBDatabase, ev: Event): /*(!) any */ Object?)?

    onversionchange: (operation(this: IDBDatabase, ev: IDBVersionChangeEvent): /*(!) any */ Object?)?

    guarded
    version: Number

    operation close()

    operation createObjectStore(name: Text, options: IDBObjectStoreParameters? = empty): IDBObjectStore

    operation deleteObjectStore(name: Text)

    operation transaction(storeNames: Object? /*(!)Текст | Список<Текст>*/, mode: IDBTransactionMode? = empty, options: IDBTransactionOptions? = empty): IDBTransaction

    operation addEventListener<K = /*(!) keyof IDBDatabaseEventMap */ Object?>(type`: K, listener: operation(this: IDBDatabase, ev: /*(!) IDBDatabaseEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof IDBDatabaseEventMap */ Object?>(type`: K, listener: operation(this: IDBDatabase, ev: /*(!) IDBDatabaseEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ IDBDatabase: object { prototype: IDBDatabase; on create(): IDBDatabase }


  /**
  * In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory)
  */

  type IDBFactory = aspect
  {
    operation cmp(first: /*(!) any */ Object?, second: /*(!) any */ Object?): Number

    operation databases(): Promise<Список<IDBDatabaseInfo>>

    operation deleteDatabase(name: Text): IDBOpenDBRequest

    operation open(name: Text, version: Number? = empty): IDBOpenDBRequest
  }


  /*(!) var */ IDBFactory: object { prototype: IDBFactory; on create(): IDBFactory }


  /**
  * IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex)
  */

  type IDBIndex = aspect
  {
    guarded
    keyPath: Object? /*(!)Текст | Список<Текст>*/

    guarded
    multiEntry: YesNo

    name: Text

    guarded
    objectStore: IDBObjectStore

    guarded
    unique: YesNo

    operation count(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто*/ = empty): IDBRequest<Number>

    operation get(query: Object? /*(!)IDBValidKey | IDBKeyRange*/): IDBRequest</*(!) any */ Object?>

    operation getAll(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто | пусто*/ = empty, count: Number? = empty): IDBRequest<Список</*(!) any */ Object?>>

    operation getAllKeys(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто | пусто*/ = empty, count: Number? = empty): IDBRequest<Список<IDBValidKey>>

    operation getKey(query: Object? /*(!)IDBValidKey | IDBKeyRange*/): IDBRequest<IDBValidKey?>

    operation openCursor(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто | пусто*/ = empty, direction: IDBCursorDirection? = empty): IDBRequest<IDBCursorWithValue?>

    operation openKeyCursor(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто | пусто*/ = empty, direction: IDBCursorDirection? = empty): IDBRequest<IDBCursor?>
  }


  /*(!) var */ IDBIndex: object { prototype: IDBIndex; on create(): IDBIndex }


  /**
  * A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange)
  */

  type IDBKeyRange = aspect
  {
    guarded
    lower: /*(!) any */ Object?

    guarded
    lowerOpen: YesNo

    guarded
    upper: /*(!) any */ Object?

    guarded
    upperOpen: YesNo

    operation includes(key: /*(!) any */ Object?): YesNo
  }


  /*(!) var */ IDBKeyRange: object { prototype: IDBKeyRange; on create(): IDBKeyRange; operation bound(lower: /*(!) any */ Object?, upper: /*(!) any */ Object?, lowerOpen: YesNo? = empty, upperOpen: YesNo? = empty): IDBKeyRange; operation lowerBound(lower: /*(!) any */ Object?, open: YesNo? = empty): IDBKeyRange; operation only(value: /*(!) any */ Object?): IDBKeyRange; operation upperBound(upper: /*(!) any */ Object?, open: YesNo? = empty): IDBKeyRange }


  /**
  * This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore)
  */

  type IDBObjectStore = aspect
  {
    guarded
    autoIncrement: YesNo

    guarded
    indexNames: DOMStringList

    guarded
    keyPath: Object? /*(!)Текст | Список<Текст>*/

    name: Text

    guarded
    transaction: IDBTransaction

    operation add(value: /*(!) any */ Object?, key: IDBValidKey? = empty): IDBRequest<IDBValidKey>

    operation clear(): IDBRequest<пусто>

    operation count(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто*/ = empty): IDBRequest<Number>

    operation createIndex(name: Text, keyPath: Object? /*(!)Текст | Список<Текст>*/, options: IDBIndexParameters? = empty): IDBIndex

    operation delete(query: Object? /*(!)IDBValidKey | IDBKeyRange*/): IDBRequest<пусто>

    operation deleteIndex(name: Text)

    operation get(query: Object? /*(!)IDBValidKey | IDBKeyRange*/): IDBRequest</*(!) any */ Object?>

    operation getAll(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто | пусто*/ = empty, count: Number? = empty): IDBRequest<Список</*(!) any */ Object?>>

    operation getAllKeys(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто | пусто*/ = empty, count: Number? = empty): IDBRequest<Список<IDBValidKey>>

    operation getKey(query: Object? /*(!)IDBValidKey | IDBKeyRange*/): IDBRequest<IDBValidKey?>

    operation index(name: Text): IDBIndex

    operation openCursor(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто | пусто*/ = empty, direction: IDBCursorDirection? = empty): IDBRequest<IDBCursorWithValue?>

    operation openKeyCursor(query: Object? /*(!)IDBValidKey | IDBKeyRange | пусто | пусто*/ = empty, direction: IDBCursorDirection? = empty): IDBRequest<IDBCursor?>

    operation put(value: /*(!) any */ Object?, key: IDBValidKey? = empty): IDBRequest<IDBValidKey>
  }


  /*(!) var */ IDBObjectStore: object { prototype: IDBObjectStore; on create(): IDBObjectStore }


  type IDBOpenDBRequestEventMap = aspect IDBRequestEventMap
  {
    blocked: IDBVersionChangeEvent

    upgradeneeded: IDBVersionChangeEvent
  }


  /**
  * Also inherits methods from its parents IDBRequest and EventTarget.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest)
  */

  type IDBOpenDBRequest = aspect IDBRequest<IDBDatabase>
  {
    onblocked: (operation(this: IDBOpenDBRequest, ev: IDBVersionChangeEvent): /*(!) any */ Object?)?

    onupgradeneeded: (operation(this: IDBOpenDBRequest, ev: IDBVersionChangeEvent): /*(!) any */ Object?)?

    operation addEventListener<K = /*(!) keyof IDBOpenDBRequestEventMap */ Object?>(type`: K, listener: operation(this: IDBOpenDBRequest, ev: /*(!) IDBOpenDBRequestEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof IDBOpenDBRequestEventMap */ Object?>(type`: K, listener: operation(this: IDBOpenDBRequest, ev: /*(!) IDBOpenDBRequestEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ IDBOpenDBRequest: object { prototype: IDBOpenDBRequest; on create(): IDBOpenDBRequest }


  type IDBRequestEventMap = aspect
  {
    error`: Event

    success: Event
  }


  /**
  * The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest)
  */

  type IDBRequest<T> = aspect EventTarget
  {
    guarded
    error`: DOMException?

    onerror: (operation(this: IDBRequest<T>, ev: Event): /*(!) any */ Object?)?

    onsuccess: (operation(this: IDBRequest<T>, ev: Event): /*(!) any */ Object?)?

    guarded
    readyState: IDBRequestReadyState

    guarded
    result: T

    guarded
    source: Object? /*(!)IDBObjectStore | IDBIndex | IDBCursor*/

    guarded
    transaction: IDBTransaction?

    operation addEventListener<K = /*(!) keyof IDBRequestEventMap */ Object?>(type`: K, listener: operation(this: IDBRequest<T>, ev: /*(!) IDBRequestEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof IDBRequestEventMap */ Object?>(type`: K, listener: operation(this: IDBRequest<T>, ev: /*(!) IDBRequestEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ IDBRequest: object { prototype: IDBRequest; on create(): IDBRequest }


  type IDBTransactionEventMap = aspect
  {
    abort: Event

    complete: Event

    error`: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction) */

  type IDBTransaction = aspect EventTarget
  {
    guarded
    db: IDBDatabase

    guarded
    durability: IDBTransactionDurability

    guarded
    error`: DOMException?

    guarded
    mode: IDBTransactionMode

    guarded
    objectStoreNames: DOMStringList

    onabort: (operation(this: IDBTransaction, ev: Event): /*(!) any */ Object?)?

    oncomplete: (operation(this: IDBTransaction, ev: Event): /*(!) any */ Object?)?

    onerror: (operation(this: IDBTransaction, ev: Event): /*(!) any */ Object?)?

    operation abort()

    operation commit()

    operation objectStore(name: Text): IDBObjectStore

    operation addEventListener<K = /*(!) keyof IDBTransactionEventMap */ Object?>(type`: K, listener: operation(this: IDBTransaction, ev: /*(!) IDBTransactionEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof IDBTransactionEventMap */ Object?>(type`: K, listener: operation(this: IDBTransaction, ev: /*(!) IDBTransactionEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ IDBTransaction: object { prototype: IDBTransaction; on create(): IDBTransaction }


  /**
  * This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent)
  */

  type IDBVersionChangeEvent = aspect Event
  {
    guarded
    newVersion: Number?

    guarded
    oldVersion: Number
  }


  /*(!) var */ IDBVersionChangeEvent: object { prototype: IDBVersionChangeEvent; on create(type`: Text, eventInitDict: IDBVersionChangeEventInit? = empty): IDBVersionChangeEvent }


  /**
  * The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IIRFilterNode)
  */

  type IIRFilterNode = aspect AudioNode
  {
    operation getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array)
  }


  /*(!) var */ IIRFilterNode: object { prototype: IIRFilterNode; on create(context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline) */

  type IdleDeadline = aspect
  {
    guarded
    didTimeout: YesNo

    operation timeRemaining(): DOMHighResTimeStamp
  }


  /*(!) var */ IdleDeadline: object { prototype: IdleDeadline; on create(): IdleDeadline }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap) */

  type ImageBitmap = aspect
  {
    guarded
    height: Number

    guarded
    width: Number

    operation close()
  }


  /*(!) var */ ImageBitmap: object { prototype: ImageBitmap; on create(): ImageBitmap }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext) */

  type ImageBitmapRenderingContext = aspect
  {
    guarded
    canvas: Object? /*(!)HTMLCanvasElement | OffscreenCanvas*/

    operation transferFromImageBitmap(bitmap: ImageBitmap?)
  }


  /*(!) var */ ImageBitmapRenderingContext: object { prototype: ImageBitmapRenderingContext; on create(): ImageBitmapRenderingContext }


  /**
  * The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData)
  */

  type ImageData = aspect
  {
    guarded
    colorSpace: PredefinedColorSpace

    guarded
    data: Uint8ClampedArray

    guarded
    height: Number

    guarded
    width: Number
  }


  /*(!) var */ ImageData: object { prototype: ImageData; on create(sw: Number, sh: Number, settings: ImageDataSettings? = empty): ImageData; on create(data: Uint8ClampedArray, sw: Number, sh: Number? = empty, settings: ImageDataSettings? = empty): ImageData }


  type InnerHTML = aspect
  {
    innerHTML: Text
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo)
  */

  type InputDeviceInfo = aspect MediaDeviceInfo
  {
    operation getCapabilities(): MediaTrackCapabilities
  }


  /*(!) var */ InputDeviceInfo: object { prototype: InputDeviceInfo; on create(): InputDeviceInfo }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent) */

  type InputEvent = aspect UIEvent
  {
    guarded
    data: Text?

    guarded
    dataTransfer: DataTransfer?

    guarded
    inputType: Text

    guarded
    isComposing: YesNo

    operation getTargetRanges(): Список<StaticRange>
  }


  /*(!) var */ InputEvent: object { prototype: InputEvent; on create(type`: Text, eventInitDict: InputEventInit? = empty): InputEvent }


  /**
  * provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver)
  */

  type IntersectionObserver = aspect
  {
    guarded
    root: Object? /*(!)Element | Document | пусто*/

    guarded
    rootMargin: Text

    guarded
    thresholds: ReadonlyArray<Number>

    operation disconnect()

    operation observe(target: Element)

    operation takeRecords(): Список<IntersectionObserverEntry>

    operation unobserve(target: Element)
  }


  /*(!) var */ IntersectionObserver: object { prototype: IntersectionObserver; on create(callback: IntersectionObserverCallback, options: IntersectionObserverInit? = empty): IntersectionObserver }


  /**
  * This Intersection Observer API interface describes the intersection between the target element and its root container at a specific moment of transition.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry)
  */

  type IntersectionObserverEntry = aspect
  {
    guarded
    boundingClientRect: DOMRectReadOnly

    guarded
    intersectionRatio: Number

    guarded
    intersectionRect: DOMRectReadOnly

    guarded
    isIntersecting: YesNo

    guarded
    rootBounds: DOMRectReadOnly?

    guarded
    target: Element

    guarded
    time: DOMHighResTimeStamp
  }


  /*(!) var */ IntersectionObserverEntry: object { prototype: IntersectionObserverEntry; on create(intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/KHR_parallel_shader_compile) */

  type KHR_parallel_shader_compile = aspect
  {
    guarded
    COMPLETION_STATUS_KHR = 0x91B1
  }


  /**
  * KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)
  */

  type KeyboardEvent = aspect UIEvent
  {
    guarded
    DOM_KEY_LOCATION_STANDARD = 0x00

    guarded
    DOM_KEY_LOCATION_LEFT = 0x01

    guarded
    DOM_KEY_LOCATION_RIGHT = 0x02

    guarded
    DOM_KEY_LOCATION_NUMPAD = 0x03
  }


  /*(!) var */ KeyboardEvent: object { prototype: KeyboardEvent; on create(type`: Text, eventInitDict: KeyboardEventInit? = empty): KeyboardEvent; guarded DOM_KEY_LOCATION_STANDARD = 0x00; guarded DOM_KEY_LOCATION_LEFT = 0x01; guarded DOM_KEY_LOCATION_RIGHT = 0x02; guarded DOM_KEY_LOCATION_NUMPAD = 0x03 }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect) */

  type KeyframeEffect = aspect AnimationEffect
  {
    composite: CompositeOperation

    iterationComposite: IterationCompositeOperation

    pseudoElement: Text?

    target: Element?

    operation getKeyframes(): Список<ComputedKeyframe>

    operation setKeyframes(keyframes: Object? /*(!)Список<Keyframe> | PropertyIndexedKeyframes | пусто*/)
  }


  /*(!) var */ KeyframeEffect: object { prototype: KeyframeEffect; on create(target: Element?, keyframes: Object? /*(!)Список<Keyframe> | PropertyIndexedKeyframes | пусто*/, options: Object? /*(!)Number | KeyframeEffectOptions | пусто*/ = empty): KeyframeEffect; on create(source: KeyframeEffect): KeyframeEffect }


  type LinkStyle = aspect
  {
    guarded
    sheet: CSSStyleSheet?
  }


  /**
  * The location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location)
  */

  type Location = aspect
  {
    guarded
    ancestorOrigins: DOMStringList

    hash: Text

    host: Text

    hostname: Text

    href: Text

    operation toString(): Text

    guarded
    origin: Text

    pathname: Text

    port: Text

    protocol: Text

    search: Text

    operation assign(url: Object? /*(!)Текст | URL*/)

    operation reload()

    operation replace(url: Object? /*(!)Текст | URL*/)
  }


  /*(!) var */ Location: object { prototype: Location; on create(): Location }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock)
  */

  type Lock = aspect
  {
    guarded
    mode: LockMode

    guarded
    name: Text
  }


  /*(!) var */ Lock: object { prototype: Lock; on create(): Lock }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager)
  */

  type LockManager = aspect
  {
    operation query(): Promise<LockManagerSnapshot>

    operation request(name: Text, callback: LockGrantedCallback): Promise</*(!) any */ Object?>

    operation request(name: Text, options: LockOptions, callback: LockGrantedCallback): Promise</*(!) any */ Object?>
  }


  external /*(!) var */
  LockManager: object
  {
    prototype: LockManager
    on create() // : LockManager
  }


  type MIDIAccessEventMap = aspect
  {
    statechange: Event
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess)
  */

  type MIDIAccess = aspect EventTarget
  {
    guarded
    inputs: MIDIInputMap

    onstatechange: (operation(this: MIDIAccess, ev: Event): /*(!) any */ Object?)?

    guarded
    outputs: MIDIOutputMap

    guarded
    sysexEnabled: YesNo

    operation addEventListener<K = /*(!) keyof MIDIAccessEventMap */ Object?>(type`: K, listener: operation(this: MIDIAccess, ev: /*(!) MIDIAccessEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MIDIAccessEventMap */ Object?>(type`: K, listener: operation(this: MIDIAccess, ev: /*(!) MIDIAccessEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  external /*(!) var */
  MIDIAccess: object
  {
    prototype: MIDIAccess
    on create() // : MIDIAccess
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent)
  */

  type MIDIConnectionEvent = aspect Event
  {
    guarded
    port: MIDIPort
  }


  external /*(!) var */
  MIDIConnectionEvent: object
  {
    prototype: MIDIConnectionEvent
    on create(type`: Text, eventInitDict: MIDIConnectionEventInit? = empty) // : MIDIConnectionEvent
  }


  type MIDIInputEventMap = aspect MIDIPortEventMap
  {
    midimessage: Event
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput)
  */

  type MIDIInput = aspect MIDIPort
  {
    onmidimessage: (operation(this: MIDIInput, ev: Event): /*(!) any */ Object?)?

    operation addEventListener<K = /*(!) keyof MIDIInputEventMap */ Object?>(type`: K, listener: operation(this: MIDIInput, ev: /*(!) MIDIInputEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MIDIInputEventMap */ Object?>(type`: K, listener: operation(this: MIDIInput, ev: /*(!) MIDIInputEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  external /*(!) var */
  MIDIInput: object
  {
    prototype: MIDIInput
    on create() //: MIDIInput
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInputMap)
  */

  type MIDIInputMap = aspect
  {
    operation forEach(callbackfn: operation(value: MIDIInput, key: Text, parent: MIDIInputMap), thisArg: /*(!) any */ Object? = empty)
  }


  external /*(!) var */
  MIDIInputMap: object
  {
    prototype: MIDIInputMap
    on create() // : MIDIInputMap
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent)
  */

  type MIDIMessageEvent = aspect Event
  {
    guarded
    data: Uint8Array
  }


  external /*(!) var */
  MIDIMessageEvent: object
  {
    prototype: MIDIMessageEvent
    on create(type`: Text, eventInitDict: MIDIMessageEventInit? = empty) // : MIDIMessageEvent
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutput)
  */

  type MIDIOutput = aspect MIDIPort
  {
    operation send(data: Список<Number>, timestamp: DOMHighResTimeStamp? = empty)

    operation addEventListener<K = /*(!) keyof MIDIPortEventMap */ Object?>(type`: K, listener: operation(this: MIDIOutput, ev: /*(!) MIDIPortEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MIDIPortEventMap */ Object?>(type`: K, listener: operation(this: MIDIOutput, ev: /*(!) MIDIPortEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  external /*(!) var */
  MIDIOutput: object
  {
    prototype: MIDIOutput
    on create() // : MIDIOutput
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutputMap)
  */

  type MIDIOutputMap = aspect
  {
    operation forEach(callbackfn: operation(value: MIDIOutput, key: Text, parent: MIDIOutputMap), thisArg: /*(!) any */ Object? = empty)
  }


  /*(!) var */ MIDIOutputMap: object { prototype: MIDIOutputMap; on create(): MIDIOutputMap }


  type MIDIPortEventMap = aspect
  {
    statechange: Event
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort)
  */

  type MIDIPort = aspect EventTarget
  {
    guarded
    connection: MIDIPortConnectionState

    guarded
    id: Text

    guarded
    manufacturer: Text?

    guarded
    name: Text?

    onstatechange: (operation(this: MIDIPort, ev: Event): /*(!) any */ Object?)?

    guarded
    state: MIDIPortDeviceState

    guarded
    type`: MIDIPortType

    guarded
    version: Text?

    operation close(): Promise<MIDIPort>

    operation open(): Promise<MIDIPort>

    operation addEventListener<K = /*(!) keyof MIDIPortEventMap */ Object?>(type`: K, listener: operation(this: MIDIPort, ev: /*(!) MIDIPortEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MIDIPortEventMap */ Object?>(type`: K, listener: operation(this: MIDIPort, ev: /*(!) MIDIPortEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MIDIPort: object { prototype: MIDIPort; on create(): MIDIPort }


  type MathMLElementEventMap = aspect ElementEventMap, GlobalEventHandlersEventMap
  {

  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MathMLElement) */

  type MathMLElement = aspect Element, ElementCSSInlineStyle, GlobalEventHandlers, HTMLOrSVGElement
  {
    operation addEventListener<K = /*(!) keyof MathMLElementEventMap */ Object?>(type`: K, listener: operation(this: MathMLElement, ev: /*(!) MathMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MathMLElementEventMap */ Object?>(type`: K, listener: operation(this: MathMLElement, ev: /*(!) MathMLElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MathMLElement: object { prototype: MathMLElement; on create(): MathMLElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities) */

  type MediaCapabilities = aspect
  {
    operation decodingInfo(configuration: MediaDecodingConfiguration): Promise<MediaCapabilitiesDecodingInfo>

    operation encodingInfo(configuration: MediaEncodingConfiguration): Promise<MediaCapabilitiesEncodingInfo>
  }


  /*(!) var */ MediaCapabilities: object { prototype: MediaCapabilities; on create(): MediaCapabilities }


  /**
  * The MediaDevicesInfo interface contains information that describes a single media input or output device.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo)
  */

  type MediaDeviceInfo = aspect
  {
    guarded
    deviceId: Text

    guarded
    groupId: Text

    guarded
    kind: MediaDeviceKind

    guarded
    label: Text

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ MediaDeviceInfo: object { prototype: MediaDeviceInfo; on create(): MediaDeviceInfo }


  type MediaDevicesEventMap = aspect
  {
    devicechange: Event
  }


  /**
  * Provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices)
  */

  type MediaDevices = aspect EventTarget
  {
    ondevicechange: (operation(this: MediaDevices, ev: Event): /*(!) any */ Object?)?

    operation enumerateDevices(): Promise<Список<MediaDeviceInfo>>

    operation getDisplayMedia(options: DisplayMediaStreamOptions? = empty): Promise<MediaStream>

    operation getSupportedConstraints(): MediaTrackSupportedConstraints

    operation getUserMedia(constraints: MediaStreamConstraints? = empty): Promise<MediaStream>

    operation addEventListener<K = /*(!) keyof MediaDevicesEventMap */ Object?>(type`: K, listener: operation(this: MediaDevices, ev: /*(!) MediaDevicesEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MediaDevicesEventMap */ Object?>(type`: K, listener: operation(this: MediaDevices, ev: /*(!) MediaDevicesEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MediaDevices: object { prototype: MediaDevices; on create(): MediaDevices }


  /**
  * A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource method. The amount of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode)
  */

  type MediaElementAudioSourceNode = aspect AudioNode
  {
    guarded
    mediaElement: HTMLMediaElement
  }


  /*(!) var */ MediaElementAudioSourceNode: object { prototype: MediaElementAudioSourceNode; on create(context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent) */

  type MediaEncryptedEvent = aspect Event
  {
    guarded
    initData: ArrayBuffer?

    guarded
    initDataType: Text
  }


  /*(!) var */ MediaEncryptedEvent: object { prototype: MediaEncryptedEvent; on create(type`: Text, eventInitDict: MediaEncryptedEventInit? = empty): MediaEncryptedEvent }


  /**
  * An error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError)
  */

  type MediaError = aspect
  {
    guarded
    code: Number

    guarded
    message: Text

    guarded
    MEDIA_ERR_ABORTED: 1

    guarded
    MEDIA_ERR_NETWORK: 2

    guarded
    MEDIA_ERR_DECODE: 3

    guarded
    MEDIA_ERR_SRC_NOT_SUPPORTED: 4
  }


  /*(!) var */ MediaError: object { prototype: MediaError; on create(): MediaError; guarded MEDIA_ERR_ABORTED: 1; guarded MEDIA_ERR_NETWORK: 2; guarded MEDIA_ERR_DECODE: 3; guarded MEDIA_ERR_SRC_NOT_SUPPORTED: 4 }


  /**
  * This EncryptedMediaExtensions API interface contains the content and related data when the content decryption module generates a message for the session.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent)
  */

  type MediaKeyMessageEvent = aspect Event
  {
    guarded
    message: ArrayBuffer

    guarded
    messageType: MediaKeyMessageType
  }


  /*(!) var */ MediaKeyMessageEvent: object { prototype: MediaKeyMessageEvent; on create(type`: Text, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent }


  type MediaKeySessionEventMap = aspect
  {
    keystatuseschange: Event

    message: MediaKeyMessageEvent
  }


  /**
  * This EncryptedMediaExtensions API interface represents a context for message exchange with a content decryption module (CDM).
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession)
  */

  type MediaKeySession = aspect EventTarget
  {
    guarded
    closed: Promise<MediaKeySessionClosedReason>

    guarded
    expiration: Number

    guarded
    keyStatuses: MediaKeyStatusMap

    onkeystatuseschange: (operation(this: MediaKeySession, ev: Event): /*(!) any */ Object?)?

    onmessage: (operation(this: MediaKeySession, ev: MediaKeyMessageEvent): /*(!) any */ Object?)?

    guarded
    sessionId: Text

    operation close(): Promise<Ничего>

    operation generateRequest(initDataType: Text, initData: BufferSource): Promise<Ничего>

    operation load(sessionId: Text): Promise<ДаНет>

    operation remove(): Promise<Ничего>

    operation update(response: BufferSource): Promise<Ничего>

    operation addEventListener<K = /*(!) keyof MediaKeySessionEventMap */ Object?>(type`: K, listener: operation(this: MediaKeySession, ev: /*(!) MediaKeySessionEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MediaKeySessionEventMap */ Object?>(type`: K, listener: operation(this: MediaKeySession, ev: /*(!) MediaKeySessionEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MediaKeySession: object { prototype: MediaKeySession; on create(): MediaKeySession }


  /**
  * This EncryptedMediaExtensions API interface is a read-only map of media key statuses by key IDs.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap)
  */

  type MediaKeyStatusMap = aspect
  {
    guarded
    size: Number

    operation get(keyId: BufferSource): MediaKeyStatus?

    operation has(keyId: BufferSource): YesNo

    operation forEach(callbackfn: operation(value: MediaKeyStatus, key: BufferSource, parent: MediaKeyStatusMap), thisArg: /*(!) any */ Object? = empty)
  }


  /*(!) var */ MediaKeyStatusMap: object { prototype: MediaKeyStatusMap; on create(): MediaKeyStatusMap }


  /**
  * This EncryptedMediaExtensions API interface provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess method.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess)
  */

  type MediaKeySystemAccess = aspect
  {
    guarded
    keySystem: Text

    operation createMediaKeys(): Promise<MediaKeys>

    operation getConfiguration(): MediaKeySystemConfiguration
  }


  /*(!) var */ MediaKeySystemAccess: object { prototype: MediaKeySystemAccess; on create(): MediaKeySystemAccess }


  /**
  * This EncryptedMediaExtensions API interface the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys)
  */

  type MediaKeys = aspect
  {
    operation createSession(sessionType: MediaKeySessionType? = empty): MediaKeySession

    operation setServerCertificate(serverCertificate: BufferSource): Promise<ДаНет>
  }


  /*(!) var */ MediaKeys: object { prototype: MediaKeys; on create(): MediaKeys }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList) */

  type MediaList = aspect
  {
    guarded
    length: Number

    mediaText: Text

    operation toString(): Text

    operation appendMedium(medium: Text)

    operation deleteMedium(medium: Text)

    operation item(index: Number): Text?

    /*(!) [index: number]: string*/
  }


  /*(!) var */ MediaList: object { prototype: MediaList; on create(): MediaList }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata) */

  type MediaMetadata = aspect
  {
    album: Text

    artist: Text

    artwork: ReadonlyArray<MediaImage>

    title: Text
  }


  /*(!) var */ MediaMetadata: object { prototype: MediaMetadata; on create(init: MediaMetadataInit? = empty): MediaMetadata }


  type MediaQueryListEventMap = aspect
  {
    change: MediaQueryListEvent
  }


  /**
  * Stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to true).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList)
  */

  type MediaQueryList = aspect EventTarget
  {
    operation addEventListener<K = /*(!) keyof MediaQueryListEventMap */ Object?>(type`: K, listener: operation(this: MediaQueryList, ev: /*(!) MediaQueryListEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MediaQueryListEventMap */ Object?>(type`: K, listener: operation(this: MediaQueryList, ev: /*(!) MediaQueryListEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MediaQueryList: object { prototype: MediaQueryList; on create(): MediaQueryList }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent) */

  type MediaQueryListEvent = aspect Event
  {
    guarded
    matches: YesNo

    guarded
    media: Text
  }


  /*(!) var */ MediaQueryListEvent: object { prototype: MediaQueryListEvent; on create(type`: Text, eventInitDict: MediaQueryListEventInit? = empty): MediaQueryListEvent }


  type MediaRecorderEventMap = aspect
  {
    dataavailable: BlobEvent

    error`: Event

    pause: Event

    resume: Event

    start: Event

    stop: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder) */

  type MediaRecorder = aspect EventTarget
  {
    guarded
    audioBitsPerSecond: Number

    guarded
    mimeType: Text

    ondataavailable: (operation(this: MediaRecorder, ev: BlobEvent): /*(!) any */ Object?)?

    onerror: (operation(this: MediaRecorder, ev: Event): /*(!) any */ Object?)?

    onpause: (operation(this: MediaRecorder, ev: Event): /*(!) any */ Object?)?

    onresume: (operation(this: MediaRecorder, ev: Event): /*(!) any */ Object?)?

    onstart: (operation(this: MediaRecorder, ev: Event): /*(!) any */ Object?)?

    onstop: (operation(this: MediaRecorder, ev: Event): /*(!) any */ Object?)?

    guarded
    state: RecordingState

    guarded
    stream: MediaStream

    guarded
    videoBitsPerSecond: Number

    operation pause()

    operation requestData()

    operation resume()

    operation start(timeslice: Number? = empty)

    operation stop()

    operation addEventListener<K = /*(!) keyof MediaRecorderEventMap */ Object?>(type`: K, listener: operation(this: MediaRecorder, ev: /*(!) MediaRecorderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MediaRecorderEventMap */ Object?>(type`: K, listener: operation(this: MediaRecorder, ev: /*(!) MediaRecorderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MediaRecorder: object { prototype: MediaRecorder; on create(stream: MediaStream, options: MediaRecorderOptions? = empty): MediaRecorder; operation isTypeSupported(type`: Text): YesNo }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession) */

  type MediaSession = aspect
  {
    metadata: MediaMetadata?

    playbackState: MediaSessionPlaybackState

    operation setActionHandler(action: MediaSessionAction, handler: MediaSessionActionHandler?)

    operation setPositionState(state: MediaPositionState? = empty)
  }


  /*(!) var */ MediaSession: object { prototype: MediaSession; on create(): MediaSession }


  type MediaSourceEventMap = aspect
  {
    sourceclose: Event

    sourceended: Event

    sourceopen: Event
  }


  /**
  * This Media Source Extensions API interface represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource)
  */

  type MediaSource = aspect EventTarget
  {
    guarded
    activeSourceBuffers: SourceBufferList

    duration: Number

    onsourceclose: (operation(this: MediaSource, ev: Event): /*(!) any */ Object?)?

    onsourceended: (operation(this: MediaSource, ev: Event): /*(!) any */ Object?)?

    onsourceopen: (operation(this: MediaSource, ev: Event): /*(!) any */ Object?)?

    guarded
    readyState: ReadyState

    guarded
    sourceBuffers: SourceBufferList

    operation addSourceBuffer(type`: Text): SourceBuffer

    operation clearLiveSeekableRange()

    operation endOfStream(error`: EndOfStreamError? = empty)

    operation removeSourceBuffer(sourceBuffer: SourceBuffer)

    operation setLiveSeekableRange(start: Number, end: Number)

    operation addEventListener<K = /*(!) keyof MediaSourceEventMap */ Object?>(type`: K, listener: operation(this: MediaSource, ev: /*(!) MediaSourceEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MediaSourceEventMap */ Object?>(type`: K, listener: operation(this: MediaSource, ev: /*(!) MediaSourceEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MediaSource: object { prototype: MediaSource; on create(): MediaSource; operation isTypeSupported(type`: Text): YesNo }


  type MediaStreamEventMap = aspect
  {
    addtrack: MediaStreamTrackEvent

    removetrack: MediaStreamTrackEvent
  }


  /**
  * A stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream)
  */

  type MediaStream = aspect EventTarget
  {
    guarded
    active: YesNo

    guarded
    id: Text

    onaddtrack: (operation(this: MediaStream, ev: MediaStreamTrackEvent): /*(!) any */ Object?)?

    onremovetrack: (operation(this: MediaStream, ev: MediaStreamTrackEvent): /*(!) any */ Object?)?

    operation addTrack(track: MediaStreamTrack)

    operation clone(): MediaStream

    operation getAudioTracks(): Список<MediaStreamTrack>

    operation getTrackById(trackId: Text): MediaStreamTrack?

    operation getTracks(): Список<MediaStreamTrack>

    operation getVideoTracks(): Список<MediaStreamTrack>

    operation removeTrack(track: MediaStreamTrack)

    operation addEventListener<K = /*(!) keyof MediaStreamEventMap */ Object?>(type`: K, listener: operation(this: MediaStream, ev: /*(!) MediaStreamEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MediaStreamEventMap */ Object?>(type`: K, listener: operation(this: MediaStream, ev: /*(!) MediaStreamEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MediaStream: object { prototype: MediaStream; on create(): MediaStream; on create(stream: MediaStream): MediaStream; on create(tracks: Список<MediaStreamTrack>): MediaStream }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode) */

  type MediaStreamAudioDestinationNode = aspect AudioNode
  {
    guarded
    stream: MediaStream
  }


  /*(!) var */ MediaStreamAudioDestinationNode: object { prototype: MediaStreamAudioDestinationNode; on create(context: AudioContext, options: AudioNodeOptions? = empty): MediaStreamAudioDestinationNode }


  /**
  * A type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode)
  */

  type MediaStreamAudioSourceNode = aspect AudioNode
  {
    guarded
    mediaStream: MediaStream
  }


  /*(!) var */ MediaStreamAudioSourceNode: object { prototype: MediaStreamAudioSourceNode; on create(context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode }


  type MediaStreamTrackEventMap = aspect
  {
    ended: Event

    mute: Event

    unmute: Event
  }


  /**
  * A single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack)
  */

  type MediaStreamTrack = aspect EventTarget
  {
    contentHint: Text

    enabled: YesNo

    guarded
    id: Text

    guarded
    kind: Text

    guarded
    label: Text

    guarded
    muted: YesNo

    onended: (operation(this: MediaStreamTrack, ev: Event): /*(!) any */ Object?)?

    onmute: (operation(this: MediaStreamTrack, ev: Event): /*(!) any */ Object?)?

    onunmute: (operation(this: MediaStreamTrack, ev: Event): /*(!) any */ Object?)?

    guarded
    readyState: MediaStreamTrackState

    operation applyConstraints(constraints: MediaTrackConstraints? = empty): Promise<Ничего>

    operation clone(): MediaStreamTrack

    operation getCapabilities(): MediaTrackCapabilities

    operation getConstraints(): MediaTrackConstraints

    operation getSettings(): MediaTrackSettings

    operation stop()

    operation addEventListener<K = /*(!) keyof MediaStreamTrackEventMap */ Object?>(type`: K, listener: operation(this: MediaStreamTrack, ev: /*(!) MediaStreamTrackEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MediaStreamTrackEventMap */ Object?>(type`: K, listener: operation(this: MediaStreamTrack, ev: /*(!) MediaStreamTrackEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MediaStreamTrack: object { prototype: MediaStreamTrack; on create(): MediaStreamTrack }


  /**
  * Events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent)
  */

  type MediaStreamTrackEvent = aspect Event
  {
    guarded
    track: MediaStreamTrack
  }


  /*(!) var */ MediaStreamTrackEvent: object { prototype: MediaStreamTrackEvent; on create(type`: Text, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent }


  /**
  * This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel)
  */

  type MessageChannel = aspect
  {
    guarded
    port1: MessagePort

    guarded
    port2: MessagePort
  }


  /*(!) var */ MessageChannel: object { prototype: MessageChannel; on create(): MessageChannel }


  /**
  * A message received by a target object.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent)
  */

  type MessageEvent<T> = aspect Event
  {

  }


  /*(!) var */ MessageEvent: object { prototype: MessageEvent; on create(type`: Text, eventInitDict: MessageEventInit<T>? = empty): MessageEvent<T> }


  type MessagePortEventMap = aspect
  {
    message: MessageEvent

    messageerror: MessageEvent
  }


  /**
  * This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort)
  */

  type MessagePort = aspect EventTarget
  {
    onmessage: (operation(this: MessagePort, ev: MessageEvent): /*(!) any */ Object?)?

    onmessageerror: (operation(this: MessagePort, ev: MessageEvent): /*(!) any */ Object?)?

    operation close()

    operation postMessage(message: /*(!) any */ Object?, transfer: Список<Transferable>)

    operation postMessage(message: /*(!) any */ Object?, options: StructuredSerializeOptions? = empty)

    operation start()

    operation addEventListener<K = /*(!) keyof MessagePortEventMap */ Object?>(type`: K, listener: operation(this: MessagePort, ev: /*(!) MessagePortEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof MessagePortEventMap */ Object?>(type`: K, listener: operation(this: MessagePort, ev: /*(!) MessagePortEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ MessagePort: object { prototype: MessagePort; on create(): MessagePort }


  /**
  * Events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent)
  */

  type MouseEvent = aspect UIEvent
  {

  }


  /*(!) var */ MouseEvent: object { prototype: MouseEvent; on create(type`: Text, eventInitDict: MouseEventInit? = empty): MouseEvent }


  /**
  * Provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature which was part of the DOM3 Events specification.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver)
  */

  type MutationObserver = aspect
  {
    operation disconnect()

    operation observe(target: Node, options: MutationObserverInit? = empty)

    operation takeRecords(): Список<MutationRecord>
  }


  /*(!) var */ MutationObserver: object { prototype: MutationObserver; on create(callback: MutationCallback): MutationObserver }


  /**
  * A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord)
  */

  type MutationRecord = aspect
  {
    guarded
    addedNodes: NodeList

    guarded
    attributeName: Text?

    guarded
    attributeNamespace: Text?

    guarded
    nextSibling: Node?

    guarded
    oldValue: Text?

    guarded
    previousSibling: Node?

    guarded
    removedNodes: NodeList

    guarded
    target: Node

    guarded
    type`: MutationRecordType
  }


  /*(!) var */ MutationRecord: object { prototype: MutationRecord; on create(): MutationRecord }


  /**
  * A collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap)
  */

  type NamedNodeMap = aspect
  {
    guarded
    length: Number

    operation getNamedItem(qualifiedName: Text): Attr?

    operation getNamedItemNS(namespace: Text?, localName: Text): Attr?

    operation item(index: Number): Attr?

    operation removeNamedItem(qualifiedName: Text): Attr

    operation removeNamedItemNS(namespace: Text?, localName: Text): Attr

    operation setNamedItem(attr: Attr): Attr?

    operation setNamedItemNS(attr: Attr): Attr?

    /*(!) [index: number]: Attr*/
  }


  /*(!) var */ NamedNodeMap: object { prototype: NamedNodeMap; on create(): NamedNodeMap }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager)
  */

  type NavigationPreloadManager = aspect
  {
    operation disable(): Promise<Ничего>

    operation enable(): Promise<Ничего>

    operation getState(): Promise<NavigationPreloadState>

    operation setHeaderValue(value: Text): Promise<Ничего>
  }


  /*(!) var */ NavigationPreloadManager: object { prototype: NavigationPreloadManager; on create(): NavigationPreloadManager }


  /**
  * The state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator)
  */

  type Navigator = aspect NavigatorAutomationInformation, NavigatorBadge, NavigatorConcurrentHardware, NavigatorContentUtils, NavigatorCookies, NavigatorID, NavigatorLanguage, NavigatorLocks, NavigatorOnLine, NavigatorPlugins, NavigatorStorage
  {
    guarded
    clipboard: Clipboard

    guarded
    credentials: CredentialsContainer

    guarded
    doNotTrack: Text?

    guarded
    geolocation: Geolocation

    guarded
    maxTouchPoints: Number

    guarded
    mediaCapabilities: MediaCapabilities

    guarded
    mediaDevices: MediaDevices

    guarded
    mediaSession: MediaSession

    guarded
    permissions: Permissions

    guarded
    serviceWorker: ServiceWorkerContainer

    guarded
    userActivation: UserActivation

    guarded
    wakeLock: WakeLock

    operation canShare(data: ShareData? = empty): YesNo

    operation getGamepads(): Список<Gamepad?>

    operation requestMIDIAccess(options: MIDIOptions? = empty): Promise<MIDIAccess>

    operation requestMediaKeySystemAccess(keySystem: Text, supportedConfigurations: Список<MediaKeySystemConfiguration>): Promise<MediaKeySystemAccess>

    operation sendBeacon(url: Object? /*(!)Текст | URL*/, data: BodyInit? = empty): YesNo

    operation share(data: ShareData? = empty): Promise<Ничего>

    operation vibrate(pattern: VibratePattern): YesNo
  }


  /*(!) var */ Navigator: object { prototype: Navigator; on create(): Navigator }


  type NavigatorAutomationInformation = aspect
  {
    guarded
    webdriver: YesNo
  }


  /** Available only in secure contexts. */

  type NavigatorBadge = aspect
  {
    operation clearAppBadge(): Promise<Ничего>

    operation setAppBadge(contents: Number? = empty): Promise<Ничего>
  }


  type NavigatorConcurrentHardware = aspect
  {
    guarded
    hardwareConcurrency: Number
  }


  type NavigatorContentUtils = aspect
  {
    operation registerProtocolHandler(scheme: Text, url: Object? /*(!)Текст | URL*/)
  }


  type NavigatorCookies = aspect
  {
    guarded
    cookieEnabled: YesNo
  }


  type NavigatorID = aspect
  {

  }


  type NavigatorLanguage = aspect
  {
    guarded
    language: Text

    guarded
    languages: ReadonlyArray<Текст>
  }


  /** Available only in secure contexts. */

  type NavigatorLocks = aspect
  {
    guarded
    locks: LockManager
  }


  type NavigatorOnLine = aspect
  {
    guarded
    onLine: YesNo
  }


  type NavigatorPlugins = aspect
  {

  }


  /** Available only in secure contexts. */

  type NavigatorStorage = aspect
  {
    guarded
    storage: StorageManager
  }


  /**
  * Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node)
  */

  type Node = aspect EventTarget
  {
    guarded
    baseURI: Text

    guarded
    childNodes: NodeListOf<ChildNode>

    guarded
    firstChild: ChildNode?

    guarded
    isConnected: YesNo

    guarded
    lastChild: ChildNode?

    guarded
    nextSibling: ChildNode?

    guarded
    nodeName: Text

    guarded
    nodeType: Number

    nodeValue: Text?

    guarded
    ownerDocument: Document?

    guarded
    parentElement: HTMLElement?

    guarded
    parentNode: ParentNode?

    guarded
    previousSibling: ChildNode?

    textContent: Text?

    operation appendChild<T = Node>(node: T): T

    operation cloneNode(deep: YesNo? = empty): Node

    operation compareDocumentPosition(other: Node): Number

    operation contains(other: Node?): YesNo

    operation getRootNode(options: GetRootNodeOptions? = empty): Node

    operation hasChildNodes(): YesNo

    operation insertBefore<T = Node>(node: T, child: Node?): T

    operation isDefaultNamespace(namespace: Text?): YesNo

    operation isEqualNode(otherNode: Node?): YesNo

    operation isSameNode(otherNode: Node?): YesNo

    operation lookupNamespaceURI(prefix: Text?): Text?

    operation lookupPrefix(namespace: Text?): Text?

    operation normalize()

    operation removeChild<T = Node>(child: T): T

    operation replaceChild<T = Node>(node: Node, child: T): T

    guarded
    ELEMENT_NODE: 1

    guarded
    ATTRIBUTE_NODE: 2

    guarded
    TEXT_NODE: 3

    guarded
    CDATA_SECTION_NODE: 4

    guarded
    ENTITY_REFERENCE_NODE: 5

    guarded
    ENTITY_NODE: 6

    guarded
    PROCESSING_INSTRUCTION_NODE: 7

    guarded
    COMMENT_NODE: 8

    guarded
    DOCUMENT_NODE: 9

    guarded
    DOCUMENT_TYPE_NODE: 10

    guarded
    DOCUMENT_FRAGMENT_NODE: 11

    guarded
    NOTATION_NODE: 12

    guarded
    DOCUMENT_POSITION_DISCONNECTED = 0x01

    guarded
    DOCUMENT_POSITION_PRECEDING = 0x02

    guarded
    DOCUMENT_POSITION_FOLLOWING = 0x04

    guarded
    DOCUMENT_POSITION_CONTAINS = 0x08

    guarded
    DOCUMENT_POSITION_CONTAINED_BY = 0x10

    guarded
    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20
  }


  /*(!) var */ Node: object { prototype: Node; on create(): Node; guarded ELEMENT_NODE: 1; guarded ATTRIBUTE_NODE: 2; guarded TEXT_NODE: 3; guarded CDATA_SECTION_NODE: 4; guarded ENTITY_REFERENCE_NODE: 5; guarded ENTITY_NODE: 6; guarded PROCESSING_INSTRUCTION_NODE: 7; guarded COMMENT_NODE: 8; guarded DOCUMENT_NODE: 9; guarded DOCUMENT_TYPE_NODE: 10; guarded DOCUMENT_FRAGMENT_NODE: 11; guarded NOTATION_NODE: 12; guarded DOCUMENT_POSITION_DISCONNECTED = 0x01; guarded DOCUMENT_POSITION_PRECEDING = 0x02; guarded DOCUMENT_POSITION_FOLLOWING = 0x04; guarded DOCUMENT_POSITION_CONTAINS = 0x08; guarded DOCUMENT_POSITION_CONTAINED_BY = 0x10; guarded DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20 }


  /**
  * An iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator)
  */

  type NodeIterator = aspect
  {

  }


  /*(!) var */ NodeIterator: object { prototype: NodeIterator; on create(): NodeIterator }


  /**
  * NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList)
  */

  type NodeList = aspect
  {
    guarded
    length: Number

    operation item(index: Number): Node?

    operation forEach(callbackfn: operation(value: Node, key: Number, parent: NodeList), thisArg: /*(!) any */ Object? = empty)

    /*(!) [index: number]: Node*/
  }


  /*(!) var */ NodeList: object { prototype: NodeList; on create(): NodeList }


  type NodeListOf<TNode = Node> = aspect NodeList
  {
    operation item(index: Number): TNode

    operation forEach(callbackfn: operation(value: TNode, key: Number, parent: NodeListOf<TNode>), thisArg: /*(!) any */ Object? = empty)

    /*(!) [index: number]: TNode*/
  }


  type NonDocumentTypeChildNode = aspect
  {
    guarded
    nextElementSibling: Element?

    guarded
    previousElementSibling: Element?
  }


  type NonElementParentNode = aspect
  {
    operation getElementById(elementId: Text): Element?
  }


  type NotificationEventMap = aspect
  {
    click: Event

    close: Event

    error`: Event

    show: Event
  }


  /**
  * This Notifications API interface is used to configure and display desktop notifications to the user.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification)
  */

  type Notification = aspect EventTarget
  {
    guarded
    body: Text

    guarded
    data: /*(!) any */ Object?

    guarded
    dir: NotificationDirection

    guarded
    icon: Text

    guarded
    lang: Text

    onclick: (operation(this: Notification, ev: Event): /*(!) any */ Object?)?

    onclose: (operation(this: Notification, ev: Event): /*(!) any */ Object?)?

    onerror: (operation(this: Notification, ev: Event): /*(!) any */ Object?)?

    onshow: (operation(this: Notification, ev: Event): /*(!) any */ Object?)?

    guarded
    silent: YesNo?

    guarded
    tag: Text

    guarded
    title: Text

    operation close()

    operation addEventListener<K = /*(!) keyof NotificationEventMap */ Object?>(type`: K, listener: operation(this: Notification, ev: /*(!) NotificationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof NotificationEventMap */ Object?>(type`: K, listener: operation(this: Notification, ev: /*(!) NotificationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ Notification: object { prototype: Notification; on create(title: Text, options: NotificationOptions? = empty): Notification; guarded permission: NotificationPermission; operation requestPermission(deprecatedCallback: NotificationPermissionCallback? = empty): Promise<NotificationPermission> }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed) */

  type OES_draw_buffers_indexed = aspect
  {
    operation blendEquationSeparateiOES(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)

    operation blendEquationiOES(buf: GLuint, mode: GLenum)

    operation blendFuncSeparateiOES(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum)

    operation blendFunciOES(buf: GLuint, src: GLenum, dst: GLenum)

    operation colorMaskiOES(buf: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean)

    operation disableiOES(target: GLenum, index: GLuint)

    operation enableiOES(target: GLenum, index: GLuint)
  }


  /**
  * The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_element_index_uint)
  */

  type OES_element_index_uint = aspect
  {

  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_fbo_render_mipmap) */

  type OES_fbo_render_mipmap = aspect
  {

  }


  /**
  * The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_standard_derivatives)
  */

  type OES_standard_derivatives = aspect
  {
    guarded
    FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B
  }


  /**
  * The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float)
  */

  type OES_texture_float = aspect
  {

  }


  /**
  * The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float_linear)
  */

  type OES_texture_float_linear = aspect
  {

  }


  /**
  * The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float)
  */

  type OES_texture_half_float = aspect
  {
    guarded
    HALF_FLOAT_OES = 0x8D61
  }


  /**
  * The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float_linear)
  */

  type OES_texture_half_float_linear = aspect
  {

  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object) */

  type OES_vertex_array_object = aspect
  {
    operation bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES?)

    operation createVertexArrayOES(): WebGLVertexArrayObjectOES?

    operation deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES?)

    operation isVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES?): GLboolean

    guarded
    VERTEX_ARRAY_BINDING_OES = 0x85B5
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/OVR_multiview2) */

  type OVR_multiview2 = aspect
  {
    operation framebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: WebGLTexture?, level: GLint, baseViewIndex: GLint, numViews: GLsizei)

    guarded
    FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630

    guarded
    FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632

    guarded
    MAX_VIEWS_OVR = 0x9631

    guarded
    FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633
  }


  /**
  * The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent)
  */

  type OfflineAudioCompletionEvent = aspect Event
  {
    guarded
    renderedBuffer: AudioBuffer
  }


  /*(!) var */ OfflineAudioCompletionEvent: object { prototype: OfflineAudioCompletionEvent; on create(type`: Text, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent }


  type OfflineAudioContextEventMap = aspect BaseAudioContextEventMap
  {
    complete: OfflineAudioCompletionEvent
  }


  /**
  * An AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext)
  */

  type OfflineAudioContext = aspect BaseAudioContext
  {
    guarded
    length: Number

    oncomplete: (operation(this: OfflineAudioContext, ev: OfflineAudioCompletionEvent): /*(!) any */ Object?)?

    operation resume(): Promise<Ничего>

    operation startRendering(): Promise<AudioBuffer>

    operation suspend(suspendTime: Number): Promise<Ничего>

    operation addEventListener<K = /*(!) keyof OfflineAudioContextEventMap */ Object?>(type`: K, listener: operation(this: OfflineAudioContext, ev: /*(!) OfflineAudioContextEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof OfflineAudioContextEventMap */ Object?>(type`: K, listener: operation(this: OfflineAudioContext, ev: /*(!) OfflineAudioContextEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ OfflineAudioContext: object { prototype: OfflineAudioContext; on create(contextOptions: OfflineAudioContextOptions): OfflineAudioContext; on create(numberOfChannels: Number, length: Number, sampleRate: Number): OfflineAudioContext }


  type OffscreenCanvasEventMap = aspect
  {
    contextlost: Event

    contextrestored: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas) */

  type OffscreenCanvas = aspect EventTarget
  {
    height: Number

    oncontextlost: (operation(this: OffscreenCanvas, ev: Event): /*(!) any */ Object?)?

    oncontextrestored: (operation(this: OffscreenCanvas, ev: Event): /*(!) any */ Object?)?

    width: Number

    operation convertToBlob(options: ImageEncodeOptions? = empty): Promise<Blob>

    operation getContext(contextId: Text, options: /*(!) any */ Object? = empty): OffscreenCanvasRenderingContext2D?

    // operation getContext(contextId: "2d", options: /*(!) any */ Object? = empty): OffscreenCanvasRenderingContext2D?

    // operation getContext(contextId: "bitmaprenderer", options: /*(!) any */ Object? = empty): ImageBitmapRenderingContext?

    // operation getContext(contextId: "webgl", options: /*(!) any */ Object? = empty): WebGLRenderingContext?

    // operation getContext(contextId: "webgl2", options: /*(!) any */ Object? = empty): WebGL2RenderingContext?

    operation getContext(contextId: OffscreenRenderingContextId, options: /*(!) any */ Object? = empty): OffscreenRenderingContext?

    operation transferToImageBitmap(): ImageBitmap

    operation addEventListener<K = /*(!) keyof OffscreenCanvasEventMap */ Object?>(type`: K, listener: operation(this: OffscreenCanvas, ev: /*(!) OffscreenCanvasEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof OffscreenCanvasEventMap */ Object?>(type`: K, listener: operation(this: OffscreenCanvas, ev: /*(!) OffscreenCanvasEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ OffscreenCanvas: object { prototype: OffscreenCanvas; on create(width: Number, height: Number): OffscreenCanvas }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D) */

  type OffscreenCanvasRenderingContext2D = aspect CanvasCompositing, CanvasDrawImage, CanvasDrawPath, CanvasFillStrokeStyles, CanvasFilters, CanvasImageData, CanvasImageSmoothing, CanvasPath, CanvasPathDrawingStyles, CanvasRect, CanvasShadowStyles, CanvasState, CanvasText, CanvasTextDrawingStyles, CanvasTransform
  {
    guarded
    canvas: OffscreenCanvas

    operation commit()
  }


  /*(!) var */ OffscreenCanvasRenderingContext2D: object { prototype: OffscreenCanvasRenderingContext2D; on create(): OffscreenCanvasRenderingContext2D }


  /**
  * The OscillatorNode interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode)
  */

  type OscillatorNode = aspect AudioScheduledSourceNode
  {
    guarded
    detune: AudioParam

    guarded
    frequency: AudioParam

    type`: OscillatorType

    operation setPeriodicWave(periodicWave: PeriodicWave)

    operation addEventListener<K = /*(!) keyof AudioScheduledSourceNodeEventMap */ Object?>(type`: K, listener: operation(this: OscillatorNode, ev: /*(!) AudioScheduledSourceNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AudioScheduledSourceNodeEventMap */ Object?>(type`: K, listener: operation(this: OscillatorNode, ev: /*(!) AudioScheduledSourceNodeEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ OscillatorNode: object { prototype: OscillatorNode; on create(context: BaseAudioContext, options: OscillatorOptions? = empty): OscillatorNode }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError) */

  type OverconstrainedError = aspect Error
  {
    guarded
    constraint: Text
  }


  /*(!) var */ OverconstrainedError: object { prototype: OverconstrainedError; on create(constraint: Text, message: Text? = empty): OverconstrainedError }


  /**
  * The PageTransitionEvent is fired when a document is being loaded or unloaded.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent)
  */

  type PageTransitionEvent = aspect Event
  {
    guarded
    persisted: YesNo
  }


  /*(!) var */ PageTransitionEvent: object { prototype: PageTransitionEvent; on create(type`: Text, eventInitDict: PageTransitionEventInit? = empty): PageTransitionEvent }


  /**
  * A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode)
  */

  type PannerNode = aspect AudioNode
  {

  }


  /*(!) var */ PannerNode: object { prototype: PannerNode; on create(context: BaseAudioContext, options: PannerOptions? = empty): PannerNode }


  type ParentNode = aspect Node
  {
    operation querySelector<K = /*(!) keyof SVGElementTagNameMap */ Object?>(selectors: K): /*(!) SVGElementTagNameMap[K] */ Object?

    operation querySelector<K = /*(!) keyof MathMLElementTagNameMap */ Object?>(selectors: K): /*(!) MathMLElementTagNameMap[K] */ Object?

    operation querySelector<E = Element>(selectors: Text): E?

    operation querySelectorAll<K = /*(!) keyof SVGElementTagNameMap */ Object?>(selectors: K): NodeListOf</*(!) SVGElementTagNameMap[K] */ Object?>

    operation querySelectorAll<K = /*(!) keyof MathMLElementTagNameMap */ Object?>(selectors: K): NodeListOf</*(!) MathMLElementTagNameMap[K] */ Object?>

    operation querySelectorAll<E = Element>(selectors: Text): NodeListOf<E>
  }


  /**
  * This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Path2D)
  */

  type Path2D = aspect CanvasPath
  {
    operation addPath(path: Path2D, transform: DOMMatrix2DInit? = empty)
  }


  /*(!) var */ Path2D: object { prototype: Path2D; on create(path: Object? /*(!)Path2D | Текст | пусто*/ = empty): Path2D }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent)
  */

  type PaymentMethodChangeEvent = aspect PaymentRequestUpdateEvent
  {
    guarded
    methodDetails: /*(!) any */ Object?

    guarded
    methodName: Text
  }


  /*(!) var */ PaymentMethodChangeEvent: object { prototype: PaymentMethodChangeEvent; on create(type`: Text, eventInitDict: PaymentMethodChangeEventInit? = empty): PaymentMethodChangeEvent }


  type PaymentRequestEventMap = aspect
  {
    paymentmethodchange: Event
  }


  /**
  * This Payment Request API interface is the primary access point into the API, and lets web content and apps accept payments from the end user.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest)
  */

  type PaymentRequest = aspect EventTarget
  {
    guarded
    id: Text

    onpaymentmethodchange: (operation(this: PaymentRequest, ev: Event): /*(!) any */ Object?)?

    operation abort(): Promise<Ничего>

    operation canMakePayment(): Promise<ДаНет>

    operation show(detailsPromise: Object? /*(!)PaymentDetailsUpdate | PromiseLike<PaymentDetailsUpdate> | пусто*/ = empty): Promise<PaymentResponse>

    operation addEventListener<K = /*(!) keyof PaymentRequestEventMap */ Object?>(type`: K, listener: operation(this: PaymentRequest, ev: /*(!) PaymentRequestEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof PaymentRequestEventMap */ Object?>(type`: K, listener: operation(this: PaymentRequest, ev: /*(!) PaymentRequestEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ PaymentRequest: object { prototype: PaymentRequest; on create(methodData: Список<PaymentMethodData>, details: PaymentDetailsInit): PaymentRequest }


  /**
  * This Payment Request API interface enables a web page to update the details of a PaymentRequest in response to a user action.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent)
  */

  type PaymentRequestUpdateEvent = aspect Event
  {
    operation updateWith(detailsPromise: Object? /*(!)PaymentDetailsUpdate | PromiseLike<PaymentDetailsUpdate>*/)
  }


  /*(!) var */ PaymentRequestUpdateEvent: object { prototype: PaymentRequestUpdateEvent; on create(type`: Text, eventInitDict: PaymentRequestUpdateEventInit? = empty): PaymentRequestUpdateEvent }


  /**
  * This Payment Request API interface is returned after a user selects a payment method and approves a payment request.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse)
  */

  type PaymentResponse = aspect EventTarget
  {
    guarded
    details: /*(!) any */ Object?

    guarded
    methodName: Text

    guarded
    requestId: Text

    operation complete(result: PaymentComplete? = empty): Promise<Ничего>

    operation retry(errorFields: PaymentValidationErrors? = empty): Promise<Ничего>

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ PaymentResponse: object { prototype: PaymentResponse; on create(): PaymentResponse }


  type PerformanceEventMap = aspect
  {
    resourcetimingbufferfull: Event
  }


  /**
  * Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance)
  */

  type Performance = aspect EventTarget
  {
    operation addEventListener<K = /*(!) keyof PerformanceEventMap */ Object?>(type`: K, listener: operation(this: Performance, ev: /*(!) PerformanceEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof PerformanceEventMap */ Object?>(type`: K, listener: operation(this: Performance, ev: /*(!) PerformanceEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ Performance: object { prototype: Performance; on create(): Performance }


  /**
  * Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry)
  */

  type PerformanceEntry = aspect
  {
    guarded
    duration: DOMHighResTimeStamp

    guarded
    entryType: Text

    guarded
    name: Text

    guarded
    startTime: DOMHighResTimeStamp

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ PerformanceEntry: object { prototype: PerformanceEntry; on create(): PerformanceEntry }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming) */

  type PerformanceEventTiming = aspect PerformanceEntry
  {
    guarded
    cancelable: YesNo

    guarded
    processingEnd: DOMHighResTimeStamp

    guarded
    processingStart: DOMHighResTimeStamp

    guarded
    target: Node?

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ PerformanceEventTiming: object { prototype: PerformanceEventTiming; on create(): PerformanceEventTiming }


  /**
  * PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark)
  */

  type PerformanceMark = aspect PerformanceEntry
  {
    guarded
    detail: /*(!) any */ Object?
  }


  /*(!) var */ PerformanceMark: object { prototype: PerformanceMark; on create(markName: Text, markOptions: PerformanceMarkOptions? = empty): PerformanceMark }


  /**
  * PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure)
  */

  type PerformanceMeasure = aspect PerformanceEntry
  {
    guarded
    detail: /*(!) any */ Object?
  }


  /*(!) var */ PerformanceMeasure: object { prototype: PerformanceMeasure; on create(): PerformanceMeasure }


  /**
  * Provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming)
  */

  type PerformanceNavigationTiming = aspect PerformanceResourceTiming
  {
    guarded
    domComplete: DOMHighResTimeStamp

    guarded
    domContentLoadedEventEnd: DOMHighResTimeStamp

    guarded
    domContentLoadedEventStart: DOMHighResTimeStamp

    guarded
    domInteractive: DOMHighResTimeStamp

    guarded
    loadEventEnd: DOMHighResTimeStamp

    guarded
    loadEventStart: DOMHighResTimeStamp

    guarded
    redirectCount: Number

    guarded
    type`: NavigationTimingType

    guarded
    unloadEventEnd: DOMHighResTimeStamp

    guarded
    unloadEventStart: DOMHighResTimeStamp

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ PerformanceNavigationTiming: object { prototype: PerformanceNavigationTiming; on create(): PerformanceNavigationTiming }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver) */

  type PerformanceObserver = aspect
  {
    operation disconnect()

    operation observe(options: PerformanceObserverInit? = empty)

    operation takeRecords(): PerformanceEntryList
  }


  /*(!) var */ PerformanceObserver: object { prototype: PerformanceObserver; on create(callback: PerformanceObserverCallback): PerformanceObserver; guarded supportedEntryTypes: ReadonlyArray<Текст> }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList) */

  type PerformanceObserverEntryList = aspect
  {
    operation getEntries(): PerformanceEntryList

    operation getEntriesByName(name: Text, type`: Text? = empty): PerformanceEntryList

    operation getEntriesByType(type`: Text): PerformanceEntryList
  }


  /*(!) var */ PerformanceObserverEntryList: object { prototype: PerformanceObserverEntryList; on create(): PerformanceObserverEntryList }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformancePaintTiming) */

  type PerformancePaintTiming = aspect PerformanceEntry
  {

  }


  /*(!) var */ PerformancePaintTiming: object { prototype: PerformancePaintTiming; on create(): PerformancePaintTiming }


  /**
  * Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming)
  */

  type PerformanceResourceTiming = aspect PerformanceEntry
  {
    guarded
    connectEnd: DOMHighResTimeStamp

    guarded
    connectStart: DOMHighResTimeStamp

    guarded
    decodedBodySize: Number

    guarded
    domainLookupEnd: DOMHighResTimeStamp

    guarded
    domainLookupStart: DOMHighResTimeStamp

    guarded
    encodedBodySize: Number

    guarded
    fetchStart: DOMHighResTimeStamp

    guarded
    initiatorType: Text

    guarded
    nextHopProtocol: Text

    guarded
    redirectEnd: DOMHighResTimeStamp

    guarded
    redirectStart: DOMHighResTimeStamp

    guarded
    requestStart: DOMHighResTimeStamp

    guarded
    responseEnd: DOMHighResTimeStamp

    guarded
    responseStart: DOMHighResTimeStamp

    guarded
    secureConnectionStart: DOMHighResTimeStamp

    guarded
    serverTiming: ReadonlyArray<PerformanceServerTiming>

    guarded
    transferSize: Number

    guarded
    workerStart: DOMHighResTimeStamp

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ PerformanceResourceTiming: object { prototype: PerformanceResourceTiming; on create(): PerformanceResourceTiming }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming) */

  type PerformanceServerTiming = aspect
  {
    guarded
    description: Text

    guarded
    duration: DOMHighResTimeStamp

    guarded
    name: Text

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ PerformanceServerTiming: object { prototype: PerformanceServerTiming; on create(): PerformanceServerTiming }


  /**
  * PeriodicWave has no inputs or outputs; it is used to define custom oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave itself is created/returned by AudioContext.createPeriodicWave().
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PeriodicWave)
  */

  type PeriodicWave = aspect
  {

  }


  /*(!) var */ PeriodicWave: object { prototype: PeriodicWave; on create(context: BaseAudioContext, options: PeriodicWaveOptions? = empty): PeriodicWave }


  type PermissionStatusEventMap = aspect
  {
    change: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus) */

  type PermissionStatus = aspect EventTarget
  {
    guarded
    name: Text

    onchange: (operation(this: PermissionStatus, ev: Event): /*(!) any */ Object?)?

    guarded
    state: PermissionState

    operation addEventListener<K = /*(!) keyof PermissionStatusEventMap */ Object?>(type`: K, listener: operation(this: PermissionStatus, ev: /*(!) PermissionStatusEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof PermissionStatusEventMap */ Object?>(type`: K, listener: operation(this: PermissionStatus, ev: /*(!) PermissionStatusEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ PermissionStatus: object { prototype: PermissionStatus; on create(): PermissionStatus }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Permissions) */

  type Permissions = aspect
  {
    operation query(permissionDesc: PermissionDescriptor): Promise<PermissionStatus>
  }


  /*(!) var */ Permissions: object { prototype: Permissions; on create(): Permissions }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent) */

  type PictureInPictureEvent = aspect Event
  {
    guarded
    pictureInPictureWindow: PictureInPictureWindow
  }


  /*(!) var */ PictureInPictureEvent: object { prototype: PictureInPictureEvent; on create(type`: Text, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent }


  type PictureInPictureWindowEventMap = aspect
  {
    resize: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow) */

  type PictureInPictureWindow = aspect EventTarget
  {
    guarded
    height: Number

    onresize: (operation(this: PictureInPictureWindow, ev: Event): /*(!) any */ Object?)?

    guarded
    width: Number

    operation addEventListener<K = /*(!) keyof PictureInPictureWindowEventMap */ Object?>(type`: K, listener: operation(this: PictureInPictureWindow, ev: /*(!) PictureInPictureWindowEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof PictureInPictureWindowEventMap */ Object?>(type`: K, listener: operation(this: PictureInPictureWindow, ev: /*(!) PictureInPictureWindowEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ PictureInPictureWindow: object { prototype: PictureInPictureWindow; on create(): PictureInPictureWindow }


  /**
  * The state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent)
  */

  type PointerEvent = aspect MouseEvent
  {
    guarded
    height: Number

    guarded
    isPrimary: YesNo

    guarded
    pointerId: Number

    guarded
    pointerType: Text

    guarded
    pressure: Number

    guarded
    tangentialPressure: Number

    guarded
    tiltX: Number

    guarded
    tiltY: Number

    guarded
    twist: Number

    guarded
    width: Number

    operation getCoalescedEvents(): Список<PointerEvent>

    operation getPredictedEvents(): Список<PointerEvent>
  }


  /*(!) var */ PointerEvent: object { prototype: PointerEvent; on create(type`: Text, eventInitDict: PointerEventInit? = empty): PointerEvent }


  /**
  * PopStateEvent is an event handler for the popstate event on the window.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent)
  */

  type PopStateEvent = aspect Event
  {
    guarded
    state: /*(!) any */ Object?
  }


  /*(!) var */ PopStateEvent: object { prototype: PopStateEvent; on create(type`: Text, eventInitDict: PopStateEventInit? = empty): PopStateEvent }


  type PopoverInvokerElement = aspect
  {
    popoverTargetAction: Text

    popoverTargetElement: Element?
  }


  /**
  * A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction)
  */

  type ProcessingInstruction = aspect CharacterData, LinkStyle
  {
    guarded
    ownerDocument: Document

    guarded
    target: Text
  }


  /*(!) var */ ProcessingInstruction: object { prototype: ProcessingInstruction; on create(): ProcessingInstruction }


  /**
  * Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent)
  */

  type ProgressEvent<T = EventTarget> = aspect Event
  {
    guarded
    lengthComputable: YesNo

    guarded
    loaded: Number

    guarded
    target: T?

    guarded
    total: Number
  }


  /*(!) var */ ProgressEvent: object { prototype: ProgressEvent; on create(type`: Text, eventInitDict: ProgressEventInit? = empty): ProgressEvent }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent) */

  type PromiseRejectionEvent = aspect Event
  {
    guarded
    promise: Promise</*(!) any */ Object?>

    guarded
    reason: /*(!) any */ Object?
  }


  /*(!) var */ PromiseRejectionEvent: object { prototype: PromiseRejectionEvent; on create(type`: Text, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential)
  */

  type PublicKeyCredential = aspect Credential
  {
    guarded
    authenticatorAttachment: Text?

    guarded
    rawId: ArrayBuffer

    guarded
    response: AuthenticatorResponse

    operation getClientExtensionResults(): AuthenticationExtensionsClientOutputs
  }


  /*(!) var */ PublicKeyCredential: object { prototype: PublicKeyCredential; on create(): PublicKeyCredential; operation isConditionalMediationAvailable(): Promise<ДаНет>; operation isUserVerifyingPlatformAuthenticatorAvailable(): Promise<ДаНет> }


  /**
  * This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager)
  */

  type PushManager = aspect
  {
    operation getSubscription(): Promise<PushSubscription?>

    operation permissionState(options: PushSubscriptionOptionsInit? = empty): Promise<PermissionState>

    operation subscribe(options: PushSubscriptionOptionsInit? = empty): Promise<PushSubscription>
  }


  /*(!) var */ PushManager: object { prototype: PushManager; on create(): PushManager; guarded supportedContentEncodings: ReadonlyArray<Текст> }


  /**
  * This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription)
  */

  type PushSubscription = aspect
  {
    guarded
    endpoint: Text

    guarded
    expirationTime: EpochTimeStamp?

    guarded
    options: PushSubscriptionOptions

    operation getKey(name: PushEncryptionKeyName): ArrayBuffer?

    operation toJSON(): PushSubscriptionJSON

    operation unsubscribe(): Promise<ДаНет>
  }


  /*(!) var */ PushSubscription: object { prototype: PushSubscription; on create(): PushSubscription }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions)
  */

  type PushSubscriptionOptions = aspect
  {
    guarded
    applicationServerKey: ArrayBuffer?

    guarded
    userVisibleOnly: YesNo
  }


  /*(!) var */ PushSubscriptionOptions: object { prototype: PushSubscriptionOptions; on create(): PushSubscriptionOptions }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate) */

  type RTCCertificate = aspect
  {
    guarded
    expires: EpochTimeStamp

    operation getFingerprints(): Список<RTCDtlsFingerprint>
  }


  /*(!) var */ RTCCertificate: object { prototype: RTCCertificate; on create(): RTCCertificate }


  type RTCDTMFSenderEventMap = aspect
  {
    tonechange: RTCDTMFToneChangeEvent
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender) */

  type RTCDTMFSender = aspect EventTarget
  {
    guarded
    canInsertDTMF: YesNo

    ontonechange: (operation(this: RTCDTMFSender, ev: RTCDTMFToneChangeEvent): /*(!) any */ Object?)?

    guarded
    toneBuffer: Text

    operation insertDTMF(tones: Text, duration: Number? = empty, interToneGap: Number? = empty)

    operation addEventListener<K = /*(!) keyof RTCDTMFSenderEventMap */ Object?>(type`: K, listener: operation(this: RTCDTMFSender, ev: /*(!) RTCDTMFSenderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof RTCDTMFSenderEventMap */ Object?>(type`: K, listener: operation(this: RTCDTMFSender, ev: /*(!) RTCDTMFSenderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ RTCDTMFSender: object { prototype: RTCDTMFSender; on create(): RTCDTMFSender }


  /**
  * Events sent to indicate that DTMF tones have started or finished playing. This interface is used by the tonechange event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent)
  */

  type RTCDTMFToneChangeEvent = aspect Event
  {
    guarded
    tone: Text
  }


  /*(!) var */ RTCDTMFToneChangeEvent: object { prototype: RTCDTMFToneChangeEvent; on create(type`: Text, eventInitDict: RTCDTMFToneChangeEventInit? = empty): RTCDTMFToneChangeEvent }


  type RTCDataChannelEventMap = aspect
  {
    bufferedamountlow: Event

    close: Event

    closing: Event

    error`: Event

    message: MessageEvent

    open: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel) */

  type RTCDataChannel = aspect EventTarget
  {
    binaryType: BinaryType

    guarded
    bufferedAmount: Number

    bufferedAmountLowThreshold: Number

    guarded
    id: Number?

    guarded
    label: Text

    guarded
    maxPacketLifeTime: Number?

    guarded
    maxRetransmits: Number?

    guarded
    negotiated: YesNo

    onbufferedamountlow: (operation(this: RTCDataChannel, ev: Event): /*(!) any */ Object?)?

    onclose: (operation(this: RTCDataChannel, ev: Event): /*(!) any */ Object?)?

    onclosing: (operation(this: RTCDataChannel, ev: Event): /*(!) any */ Object?)?

    onerror: (operation(this: RTCDataChannel, ev: Event): /*(!) any */ Object?)?

    onmessage: (operation(this: RTCDataChannel, ev: MessageEvent): /*(!) any */ Object?)?

    onopen: (operation(this: RTCDataChannel, ev: Event): /*(!) any */ Object?)?

    guarded
    ordered: YesNo

    guarded
    protocol: Text

    guarded
    readyState: RTCDataChannelState

    operation close()

    operation send(data: Text)

    operation send(data: Blob)

    operation send(data: ArrayBuffer)

    operation send(data: ArrayBufferView)

    operation addEventListener<K = /*(!) keyof RTCDataChannelEventMap */ Object?>(type`: K, listener: operation(this: RTCDataChannel, ev: /*(!) RTCDataChannelEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof RTCDataChannelEventMap */ Object?>(type`: K, listener: operation(this: RTCDataChannel, ev: /*(!) RTCDataChannelEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ RTCDataChannel: object { prototype: RTCDataChannel; on create(): RTCDataChannel }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent) */

  type RTCDataChannelEvent = aspect Event
  {
    guarded
    channel: RTCDataChannel
  }


  /*(!) var */ RTCDataChannelEvent: object { prototype: RTCDataChannelEvent; on create(type`: Text, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent }


  type RTCDtlsTransportEventMap = aspect
  {
    error`: Event

    statechange: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport) */

  type RTCDtlsTransport = aspect EventTarget
  {
    guarded
    iceTransport: RTCIceTransport

    onerror: (operation(this: RTCDtlsTransport, ev: Event): /*(!) any */ Object?)?

    onstatechange: (operation(this: RTCDtlsTransport, ev: Event): /*(!) any */ Object?)?

    guarded
    state: RTCDtlsTransportState

    operation getRemoteCertificates(): Список<ArrayBuffer>

    operation addEventListener<K = /*(!) keyof RTCDtlsTransportEventMap */ Object?>(type`: K, listener: operation(this: RTCDtlsTransport, ev: /*(!) RTCDtlsTransportEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof RTCDtlsTransportEventMap */ Object?>(type`: K, listener: operation(this: RTCDtlsTransport, ev: /*(!) RTCDtlsTransportEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ RTCDtlsTransport: object { prototype: RTCDtlsTransport; on create(): RTCDtlsTransport }


  type RTCEncodedAudioFrame = aspect
  {
    data: ArrayBuffer

    guarded
    timestamp: Number

    operation getMetadata(): RTCEncodedAudioFrameMetadata
  }


  /*(!) var */ RTCEncodedAudioFrame: object { prototype: RTCEncodedAudioFrame; on create(): RTCEncodedAudioFrame }


  type RTCEncodedVideoFrame = aspect
  {
    data: ArrayBuffer

    guarded
    timestamp: Number

    guarded
    type`: RTCEncodedVideoFrameType

    operation getMetadata(): RTCEncodedVideoFrameMetadata
  }


  /*(!) var */ RTCEncodedVideoFrame: object { prototype: RTCEncodedVideoFrame; on create(): RTCEncodedVideoFrame }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError) */

  type RTCError = aspect DOMException
  {
    guarded
    errorDetail: RTCErrorDetailType

    guarded
    receivedAlert: Number?

    guarded
    sctpCauseCode: Number?

    guarded
    sdpLineNumber: Number?

    guarded
    sentAlert: Number?
  }


  /*(!) var */ RTCError: object { prototype: RTCError; on create(init: RTCErrorInit, message: Text? = empty): RTCError }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent) */

  type RTCErrorEvent = aspect Event
  {
    guarded
    error`: RTCError
  }


  /*(!) var */ RTCErrorEvent: object { prototype: RTCErrorEvent; on create(type`: Text, eventInitDict: RTCErrorEventInit): RTCErrorEvent }


  /**
  * The RTCIceCandidate interface—part of the WebRTC API—represents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate)
  */

  type RTCIceCandidate = aspect
  {
    guarded
    address: Text?

    guarded
    candidate: Text

    guarded
    component: RTCIceComponent?

    guarded
    foundation: Text?

    guarded
    port: Number?

    guarded
    priority: Number?

    guarded
    protocol: RTCIceProtocol?

    guarded
    relatedAddress: Text?

    guarded
    relatedPort: Number?

    guarded
    sdpMLineIndex: Number?

    guarded
    sdpMid: Text?

    guarded
    tcpType: RTCIceTcpCandidateType?

    guarded
    type`: RTCIceCandidateType?

    guarded
    usernameFragment: Text?

    operation toJSON(): RTCIceCandidateInit
  }


  /*(!) var */ RTCIceCandidate: object { prototype: RTCIceCandidate; on create(candidateInitDict: RTCIceCandidateInit? = empty): RTCIceCandidate }


  type RTCIceTransportEventMap = aspect
  {
    gatheringstatechange: Event

    selectedcandidatepairchange: Event

    statechange: Event
  }


  /**
  * Provides access to information about the ICE transport layer over which the data is being sent and received.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport)
  */

  type RTCIceTransport = aspect EventTarget
  {
    guarded
    gatheringState: RTCIceGathererState

    ongatheringstatechange: (operation(this: RTCIceTransport, ev: Event): /*(!) any */ Object?)?

    onselectedcandidatepairchange: (operation(this: RTCIceTransport, ev: Event): /*(!) any */ Object?)?

    onstatechange: (operation(this: RTCIceTransport, ev: Event): /*(!) any */ Object?)?

    guarded
    state: RTCIceTransportState

    operation getSelectedCandidatePair(): RTCIceCandidatePair?

    operation addEventListener<K = /*(!) keyof RTCIceTransportEventMap */ Object?>(type`: K, listener: operation(this: RTCIceTransport, ev: /*(!) RTCIceTransportEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof RTCIceTransportEventMap */ Object?>(type`: K, listener: operation(this: RTCIceTransport, ev: /*(!) RTCIceTransportEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ RTCIceTransport: object { prototype: RTCIceTransport; on create(): RTCIceTransport }


  type RTCPeerConnectionEventMap = aspect
  {
    connectionstatechange: Event

    datachannel: RTCDataChannelEvent

    icecandidate: RTCPeerConnectionIceEvent

    icecandidateerror: Event

    iceconnectionstatechange: Event

    icegatheringstatechange: Event

    negotiationneeded: Event

    signalingstatechange: Event

    track: RTCTrackEvent
  }


  /**
  * A WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection)
  */

  type RTCPeerConnection = aspect EventTarget
  {
    operation addEventListener<K = /*(!) keyof RTCPeerConnectionEventMap */ Object?>(type`: K, listener: operation(this: RTCPeerConnection, ev: /*(!) RTCPeerConnectionEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof RTCPeerConnectionEventMap */ Object?>(type`: K, listener: operation(this: RTCPeerConnection, ev: /*(!) RTCPeerConnectionEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ RTCPeerConnection: object { prototype: RTCPeerConnection; on create(configuration: RTCConfiguration? = empty): RTCPeerConnection; operation generateCertificate(keygenAlgorithm: AlgorithmIdentifier): Promise<RTCCertificate> }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent) */

  type RTCPeerConnectionIceErrorEvent = aspect Event
  {
    guarded
    address: Text?

    guarded
    errorCode: Number

    guarded
    errorText: Text

    guarded
    port: Number?

    guarded
    url: Text
  }


  /*(!) var */ RTCPeerConnectionIceErrorEvent: object { prototype: RTCPeerConnectionIceErrorEvent; on create(type`: Text, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent }


  /**
  * Events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent)
  */

  type RTCPeerConnectionIceEvent = aspect Event
  {
    guarded
    candidate: RTCIceCandidate?
  }


  /*(!) var */ RTCPeerConnectionIceEvent: object { prototype: RTCPeerConnectionIceEvent; on create(type`: Text, eventInitDict: RTCPeerConnectionIceEventInit? = empty): RTCPeerConnectionIceEvent }


  /**
  * This WebRTC API interface manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver)
  */

  type RTCRtpReceiver = aspect
  {
    guarded
    track: MediaStreamTrack

    guarded
    transport: RTCDtlsTransport?

    operation getContributingSources(): Список<RTCRtpContributingSource>

    operation getParameters(): RTCRtpReceiveParameters

    operation getStats(): Promise<RTCStatsReport>

    operation getSynchronizationSources(): Список<RTCRtpSynchronizationSource>
  }


  /*(!) var */ RTCRtpReceiver: object { prototype: RTCRtpReceiver; on create(): RTCRtpReceiver; operation getCapabilities(kind: Text): RTCRtpCapabilities? }


  /**
  * Provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender)
  */

  type RTCRtpSender = aspect
  {
    guarded
    dtmf: RTCDTMFSender?

    guarded
    track: MediaStreamTrack?

    guarded
    transport: RTCDtlsTransport?

    operation getParameters(): RTCRtpSendParameters

    operation getStats(): Promise<RTCStatsReport>

    operation replaceTrack(withTrack: MediaStreamTrack?): Promise<Ничего>

    operation setParameters(parameters: RTCRtpSendParameters): Promise<Ничего>

    #js.МассивПараметров
    operation setStreams(streams: Список<MediaStream>)
  }


  /*(!) var */ RTCRtpSender: object { prototype: RTCRtpSender; on create(): RTCRtpSender; operation getCapabilities(kind: Text): RTCRtpCapabilities? }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver) */

  type RTCRtpTransceiver = aspect
  {
    guarded
    currentDirection: RTCRtpTransceiverDirection?

    direction: RTCRtpTransceiverDirection

    guarded
    mid: Text?

    guarded
    receiver: RTCRtpReceiver

    guarded
    sender: RTCRtpSender

    operation setCodecPreferences(codecs: Список<RTCRtpCodecCapability>)

    operation stop()
  }


  /*(!) var */ RTCRtpTransceiver: object { prototype: RTCRtpTransceiver; on create(): RTCRtpTransceiver }


  type RTCSctpTransportEventMap = aspect
  {
    statechange: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport) */

  type RTCSctpTransport = aspect EventTarget
  {
    guarded
    maxChannels: Number?

    guarded
    maxMessageSize: Number

    onstatechange: (operation(this: RTCSctpTransport, ev: Event): /*(!) any */ Object?)?

    guarded
    state: RTCSctpTransportState

    guarded
    transport: RTCDtlsTransport

    operation addEventListener<K = /*(!) keyof RTCSctpTransportEventMap */ Object?>(type`: K, listener: operation(this: RTCSctpTransport, ev: /*(!) RTCSctpTransportEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof RTCSctpTransportEventMap */ Object?>(type`: K, listener: operation(this: RTCSctpTransport, ev: /*(!) RTCSctpTransportEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ RTCSctpTransport: object { prototype: RTCSctpTransport; on create(): RTCSctpTransport }


  /**
  * One end of a connection—or potential connection—and how it's configured. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription)
  */

  type RTCSessionDescription = aspect
  {
    guarded
    sdp: Text

    guarded
    type`: RTCSdpType

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ RTCSessionDescription: object { prototype: RTCSessionDescription; on create(descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCStatsReport) */

  type RTCStatsReport = aspect
  {
    operation forEach(callbackfn: operation(value: /*(!) any */ Object?, key: Text, parent: RTCStatsReport), thisArg: /*(!) any */ Object? = empty)
  }


  /*(!) var */ RTCStatsReport: object { prototype: RTCStatsReport; on create(): RTCStatsReport }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent) */

  type RTCTrackEvent = aspect Event
  {
    guarded
    receiver: RTCRtpReceiver

    guarded
    streams: ReadonlyArray<MediaStream>

    guarded
    track: MediaStreamTrack

    guarded
    transceiver: RTCRtpTransceiver
  }


  /*(!) var */ RTCTrackEvent: object { prototype: RTCTrackEvent; on create(type`: Text, eventInitDict: RTCTrackEventInit): RTCTrackEvent }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList) */

  type RadioNodeList = aspect NodeList
  {
    value: Text
  }


  /*(!) var */ RadioNodeList: object { prototype: RadioNodeList; on create(): RadioNodeList }


  /**
  * A fragment of a document that can contain nodes and parts of text nodes.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range)
  */

  type Range = aspect AbstractRange
  {
    guarded
    commonAncestorContainer: Node

    operation cloneContents(): DocumentFragment

    operation cloneRange(): Range

    operation collapse(toStart: YesNo? = empty)

    operation compareBoundaryPoints(how: Number, sourceRange: Range): Number

    operation comparePoint(node: Node, offset: Number): Number

    operation createContextualFragment(fragment: Text): DocumentFragment

    operation deleteContents()

    operation detach()

    operation extractContents(): DocumentFragment

    operation getBoundingClientRect(): DOMRect

    operation getClientRects(): DOMRectList

    operation insertNode(node: Node)

    operation intersectsNode(node: Node): YesNo

    operation isPointInRange(node: Node, offset: Number): YesNo

    operation selectNode(node: Node)

    operation selectNodeContents(node: Node)

    operation setEnd(node: Node, offset: Number)

    operation setEndAfter(node: Node)

    operation setEndBefore(node: Node)

    operation setStart(node: Node, offset: Number)

    operation setStartAfter(node: Node)

    operation setStartBefore(node: Node)

    operation surroundContents(newParent: Node)

    operation toString(): Text

    guarded
    START_TO_START: 0

    guarded
    START_TO_END: 1

    guarded
    END_TO_END: 2

    guarded
    END_TO_START: 3
  }


  /*(!) var */ Range: object { prototype: Range; on create(): Range; guarded START_TO_START: 0; guarded START_TO_END: 1; guarded END_TO_END: 2; guarded END_TO_START: 3 }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController) */

  type ReadableByteStreamController = aspect
  {
    guarded
    byobRequest: ReadableStreamBYOBRequest?

    guarded
    desiredSize: Number?

    operation close()

    operation enqueue(chunk: ArrayBufferView)

    operation error`(e: /*(!) any */ Object? = empty)
  }


  /*(!) var */ ReadableByteStreamController: object { prototype: ReadableByteStreamController; on create(): ReadableByteStreamController }


  /**
  * This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)
  */

  type ReadableStream<R> = aspect
  {
    guarded
    locked: YesNo

    operation cancel(reason: /*(!) any */ Object? = empty): Promise<Ничего>

    operation getReader(options: object { mode: "byob" }): ReadableStreamBYOBReader

    operation getReader(): ReadableStreamDefaultReader<R>

    operation getReader(options: ReadableStreamGetReaderOptions? = empty): ReadableStreamReader<R>

    operation pipeThrough<T>(transform: ReadableWritablePair<T, R>, options: StreamPipeOptions? = empty): ReadableStream<T>

    operation pipeTo(destination: WritableStream<R>, options: StreamPipeOptions? = empty): Promise<Ничего>

    operation tee(): object { _0: ReadableStream<R>, _1: ReadableStream<R> }
  }


  /*(!) var */ ReadableStream: object { prototype: ReadableStream; on create(underlyingSource: UnderlyingByteSource, strategy: object { highWaterMark: Number }? = empty): ReadableStream<Uint8Array>; on create(underlyingSource: UnderlyingDefaultSource<R>, strategy: QueuingStrategy<R>? = empty): ReadableStream<R>; on create(underlyingSource: UnderlyingSource<R>? = empty, strategy: QueuingStrategy<R>? = empty): ReadableStream<R> }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader) */

  type ReadableStreamBYOBReader = aspect ReadableStreamGenericReader
  {
    operation read<T = ArrayBufferView>(view: T): Promise<ReadableStreamReadResult<T>>

    operation releaseLock()
  }


  /*(!) var */ ReadableStreamBYOBReader: object { prototype: ReadableStreamBYOBReader; on create(stream: ReadableStream): ReadableStreamBYOBReader }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest) */

  type ReadableStreamBYOBRequest = aspect
  {
    guarded
    view: ArrayBufferView?

    operation respond(bytesWritten: Number)

    operation respondWithNewView(view: ArrayBufferView)
  }


  /*(!) var */ ReadableStreamBYOBRequest: object { prototype: ReadableStreamBYOBRequest; on create(): ReadableStreamBYOBRequest }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController) */

  type ReadableStreamDefaultController<R> = aspect
  {
    guarded
    desiredSize: Number?

    operation close()

    operation enqueue(chunk: R? = empty)

    operation error`(e: /*(!) any */ Object? = empty)
  }


  /*(!) var */ ReadableStreamDefaultController: object { prototype: ReadableStreamDefaultController; on create(): ReadableStreamDefaultController }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader) */

  type ReadableStreamDefaultReader<R> = aspect ReadableStreamGenericReader
  {
    operation read(): Promise<ReadableStreamReadResult<R>>

    operation releaseLock()
  }


  /*(!) var */ ReadableStreamDefaultReader: object { prototype: ReadableStreamDefaultReader; on create(stream: ReadableStream<R>): ReadableStreamDefaultReader<R> }


  type ReadableStreamGenericReader = aspect
  {
    guarded
    closed: Promise<пусто>

    operation cancel(reason: /*(!) any */ Object? = empty): Promise<Ничего>
  }


  type RemotePlaybackEventMap = aspect
  {
    connect: Event

    connecting: Event

    disconnect: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback) */

  type RemotePlayback = aspect EventTarget
  {
    onconnect: (operation(this: RemotePlayback, ev: Event): /*(!) any */ Object?)?

    onconnecting: (operation(this: RemotePlayback, ev: Event): /*(!) any */ Object?)?

    ondisconnect: (operation(this: RemotePlayback, ev: Event): /*(!) any */ Object?)?

    guarded
    state: RemotePlaybackState

    operation cancelWatchAvailability(id: Number? = empty): Promise<Ничего>

    operation prompt(): Promise<Ничего>

    operation watchAvailability(callback: RemotePlaybackAvailabilityCallback): Promise<Number>

    operation addEventListener<K = /*(!) keyof RemotePlaybackEventMap */ Object?>(type`: K, listener: operation(this: RemotePlayback, ev: /*(!) RemotePlaybackEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof RemotePlaybackEventMap */ Object?>(type`: K, listener: operation(this: RemotePlayback, ev: /*(!) RemotePlaybackEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ RemotePlayback: object { prototype: RemotePlayback; on create(): RemotePlayback }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report) */

  type Report = aspect
  {
    guarded
    body: ReportBody?

    guarded
    type`: Text

    guarded
    url: Text

    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ Report: object { prototype: Report; on create(): Report }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportBody) */

  type ReportBody = aspect
  {
    operation toJSON(): /*(!) any */ Object?
  }


  /*(!) var */ ReportBody: object { prototype: ReportBody; on create(): ReportBody }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver) */

  type ReportingObserver = aspect
  {
    operation disconnect()

    operation observe()

    operation takeRecords(): ReportList
  }


  /*(!) var */ ReportingObserver: object { prototype: ReportingObserver; on create(callback: ReportingObserverCallback, options: ReportingObserverOptions? = empty): ReportingObserver }


  /**
  * This Fetch API interface represents a resource request.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)
  */

  type Request = aspect Body
  {
    guarded
    cache: RequestCache

    guarded
    credentials: RequestCredentials

    guarded
    destination: RequestDestination

    guarded
    headers: Headers

    guarded
    integrity: Text

    guarded
    keepalive: YesNo

    guarded
    method: Text

    guarded
    mode: RequestMode

    guarded
    redirect: RequestRedirect

    guarded
    referrer: Text

    guarded
    referrerPolicy: ReferrerPolicy

    guarded
    signal: AbortSignal

    guarded
    url: Text

    operation clone(): Request
  }


  /*(!) var */ Request: object { prototype: Request; on create(input: Object? /*(!)RequestInfo | URL*/, init: RequestInit? = empty): Request }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver) */

  type ResizeObserver = aspect
  {
    operation disconnect()

    operation observe(target: Element, options: ResizeObserverOptions? = empty)

    operation unobserve(target: Element)
  }


  /*(!) var */ ResizeObserver: object { prototype: ResizeObserver; on create(callback: ResizeObserverCallback): ResizeObserver }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry) */

  type ResizeObserverEntry = aspect
  {
    guarded
    borderBoxSize: ReadonlyArray<ResizeObserverSize>

    guarded
    contentBoxSize: ReadonlyArray<ResizeObserverSize>

    guarded
    contentRect: DOMRectReadOnly

    guarded
    devicePixelContentBoxSize: ReadonlyArray<ResizeObserverSize>

    guarded
    target: Element
  }


  /*(!) var */ ResizeObserverEntry: object { prototype: ResizeObserverEntry; on create(): ResizeObserverEntry }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize) */

  type ResizeObserverSize = aspect
  {
    guarded
    blockSize: Number

    guarded
    inlineSize: Number
  }


  /*(!) var */ ResizeObserverSize: object { prototype: ResizeObserverSize; on create(): ResizeObserverSize }


  /**
  * This Fetch API interface represents the response to a request.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response)
  */

  type Response = aspect Body
  {
    guarded
    headers: Headers

    guarded
    ok: YesNo

    guarded
    redirected: YesNo

    guarded
    status: Number

    guarded
    statusText: Text

    guarded
    type`: ResponseType

    guarded
    url: Text

    operation clone(): Response
  }


  /*(!) var */ Response: object { prototype: Response; on create(body: BodyInit? = empty, init: ResponseInit? = empty): Response; operation error`(): Response; operation json(data: /*(!) any */ Object?, init: ResponseInit? = empty): Response; operation redirect(url: Object? /*(!)Текст | URL*/, status: Number? = empty): Response }


  /**
  * Provides access to the properties of <a> element, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement)
  */

  type SVGAElement = aspect SVGGraphicsElement, SVGURIReference
  {
    rel: Text

    guarded
    relList: DOMTokenList

    guarded
    target: SVGAnimatedString

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGAElement: object { prototype: SVGAElement; on create(): SVGAElement }


  /**
  * Used to represent a value that can be an <angle> or <number> value. An SVGAngle reflected through the animVal attribute is always read only.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle)
  */

  type SVGAngle = aspect
  {
    guarded
    unitType: Number

    value: Number

    valueAsString: Text

    valueInSpecifiedUnits: Number

    operation convertToSpecifiedUnits(unitType: Number)

    operation newValueSpecifiedUnits(unitType: Number, valueInSpecifiedUnits: Number)

    guarded
    SVG_ANGLETYPE_UNKNOWN: 0

    guarded
    SVG_ANGLETYPE_UNSPECIFIED: 1

    guarded
    SVG_ANGLETYPE_DEG: 2

    guarded
    SVG_ANGLETYPE_RAD: 3

    guarded
    SVG_ANGLETYPE_GRAD: 4
  }


  /*(!) var */ SVGAngle: object { prototype: SVGAngle; on create(): SVGAngle; guarded SVG_ANGLETYPE_UNKNOWN: 0; guarded SVG_ANGLETYPE_UNSPECIFIED: 1; guarded SVG_ANGLETYPE_DEG: 2; guarded SVG_ANGLETYPE_RAD: 3; guarded SVG_ANGLETYPE_GRAD: 4 }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateElement) */

  type SVGAnimateElement = aspect SVGAnimationElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAnimateElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAnimateElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGAnimateElement: object { prototype: SVGAnimateElement; on create(): SVGAnimateElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateMotionElement) */

  type SVGAnimateMotionElement = aspect SVGAnimationElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAnimateMotionElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAnimateMotionElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGAnimateMotionElement: object { prototype: SVGAnimateMotionElement; on create(): SVGAnimateMotionElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateTransformElement) */

  type SVGAnimateTransformElement = aspect SVGAnimationElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAnimateTransformElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAnimateTransformElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGAnimateTransformElement: object { prototype: SVGAnimateTransformElement; on create(): SVGAnimateTransformElement }


  /**
  * Used for attributes of basic type <angle> which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle)
  */

  type SVGAnimatedAngle = aspect
  {
    guarded
    animVal: SVGAngle

    guarded
    baseVal: SVGAngle
  }


  /*(!) var */ SVGAnimatedAngle: object { prototype: SVGAnimatedAngle; on create(): SVGAnimatedAngle }


  /**
  * Used for attributes of type boolean which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean)
  */

  type SVGAnimatedBoolean = aspect
  {
    guarded
    animVal: YesNo

    baseVal: YesNo
  }


  /*(!) var */ SVGAnimatedBoolean: object { prototype: SVGAnimatedBoolean; on create(): SVGAnimatedBoolean }


  /**
  * Used for attributes whose value must be a constant from a particular enumeration and which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration)
  */

  type SVGAnimatedEnumeration = aspect
  {
    guarded
    animVal: Number

    baseVal: Number
  }


  /*(!) var */ SVGAnimatedEnumeration: object { prototype: SVGAnimatedEnumeration; on create(): SVGAnimatedEnumeration }


  /**
  * Used for attributes of basic type <integer> which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger)
  */

  type SVGAnimatedInteger = aspect
  {
    guarded
    animVal: Number

    baseVal: Number
  }


  /*(!) var */ SVGAnimatedInteger: object { prototype: SVGAnimatedInteger; on create(): SVGAnimatedInteger }


  /**
  * Used for attributes of basic type <length> which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength)
  */

  type SVGAnimatedLength = aspect
  {
    guarded
    animVal: SVGLength

    guarded
    baseVal: SVGLength
  }


  /*(!) var */ SVGAnimatedLength: object { prototype: SVGAnimatedLength; on create(): SVGAnimatedLength }


  /**
  * Used for attributes of type SVGLengthList which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList)
  */

  type SVGAnimatedLengthList = aspect
  {
    guarded
    animVal: SVGLengthList

    guarded
    baseVal: SVGLengthList
  }


  /*(!) var */ SVGAnimatedLengthList: object { prototype: SVGAnimatedLengthList; on create(): SVGAnimatedLengthList }


  /**
  * Used for attributes of basic type <Number> which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber)
  */

  type SVGAnimatedNumber = aspect
  {
    guarded
    animVal: Number

    baseVal: Number
  }


  /*(!) var */ SVGAnimatedNumber: object { prototype: SVGAnimatedNumber; on create(): SVGAnimatedNumber }


  /**
  * The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList)
  */

  type SVGAnimatedNumberList = aspect
  {
    guarded
    animVal: SVGNumberList

    guarded
    baseVal: SVGNumberList
  }


  /*(!) var */ SVGAnimatedNumberList: object { prototype: SVGAnimatedNumberList; on create(): SVGAnimatedNumberList }


  type SVGAnimatedPoints = aspect
  {
    guarded
    animatedPoints: SVGPointList

    guarded
    points: SVGPointList
  }


  /**
  * Used for attributes of type SVGPreserveAspectRatio which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio)
  */

  type SVGAnimatedPreserveAspectRatio = aspect
  {
    guarded
    animVal: SVGPreserveAspectRatio

    guarded
    baseVal: SVGPreserveAspectRatio
  }


  /*(!) var */ SVGAnimatedPreserveAspectRatio: object { prototype: SVGAnimatedPreserveAspectRatio; on create(): SVGAnimatedPreserveAspectRatio }


  /**
  * Used for attributes of basic SVGRect which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect)
  */

  type SVGAnimatedRect = aspect
  {
    guarded
    animVal: DOMRectReadOnly

    guarded
    baseVal: DOMRect
  }


  /*(!) var */ SVGAnimatedRect: object { prototype: SVGAnimatedRect; on create(): SVGAnimatedRect }


  /**
  * The SVGAnimatedString interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString)
  */

  type SVGAnimatedString = aspect
  {
    guarded
    animVal: Text

    baseVal: Text
  }


  /*(!) var */ SVGAnimatedString: object { prototype: SVGAnimatedString; on create(): SVGAnimatedString }


  /**
  * Used for attributes which take a list of numbers and which can be animated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList)
  */

  type SVGAnimatedTransformList = aspect
  {
    guarded
    animVal: SVGTransformList

    guarded
    baseVal: SVGTransformList
  }


  /*(!) var */ SVGAnimatedTransformList: object { prototype: SVGAnimatedTransformList; on create(): SVGAnimatedTransformList }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement) */

  type SVGAnimationElement = aspect SVGElement, SVGTests
  {
    guarded
    targetElement: SVGElement?

    operation beginElement()

    operation beginElementAt(offset: Number)

    operation endElement()

    operation endElementAt(offset: Number)

    operation getCurrentTime(): Number

    operation getSimpleDuration(): Number

    operation getStartTime(): Number

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAnimationElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGAnimationElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGAnimationElement: object { prototype: SVGAnimationElement; on create(): SVGAnimationElement }


  /**
  * An interface for the <circle> element. The circle element is defined by the cx and cy attributes that denote the coordinates of the centre of the circle.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement)
  */

  type SVGCircleElement = aspect SVGGeometryElement
  {
    guarded
    cx: SVGAnimatedLength

    guarded
    cy: SVGAnimatedLength

    guarded
    r: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGCircleElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGCircleElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGCircleElement: object { prototype: SVGCircleElement; on create(): SVGCircleElement }


  /**
  * Provides access to the properties of <clipPath> elements, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement)
  */

  type SVGClipPathElement = aspect SVGElement
  {
    guarded
    clipPathUnits: SVGAnimatedEnumeration

    guarded
    transform: SVGAnimatedTransformList

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGClipPathElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGClipPathElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGClipPathElement: object { prototype: SVGClipPathElement; on create(): SVGClipPathElement }


  /**
  * A base interface used by the component transfer function interfaces.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement)
  */

  type SVGComponentTransferFunctionElement = aspect SVGElement
  {
    guarded
    amplitude: SVGAnimatedNumber

    guarded
    exponent: SVGAnimatedNumber

    guarded
    intercept: SVGAnimatedNumber

    guarded
    offset: SVGAnimatedNumber

    guarded
    slope: SVGAnimatedNumber

    guarded
    tableValues: SVGAnimatedNumberList

    guarded
    type`: SVGAnimatedEnumeration

    guarded
    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0

    guarded
    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1

    guarded
    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2

    guarded
    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3

    guarded
    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4

    guarded
    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGComponentTransferFunctionElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGComponentTransferFunctionElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGComponentTransferFunctionElement: object { prototype: SVGComponentTransferFunctionElement; on create(): SVGComponentTransferFunctionElement; guarded SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0; guarded SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1; guarded SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2; guarded SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3; guarded SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4; guarded SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5 }


  /**
  * Corresponds to the <defs> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDefsElement)
  */

  type SVGDefsElement = aspect SVGGraphicsElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGDefsElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGDefsElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGDefsElement: object { prototype: SVGDefsElement; on create(): SVGDefsElement }


  /**
  * Corresponds to the <desc> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDescElement)
  */

  type SVGDescElement = aspect SVGElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGDescElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGDescElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGDescElement: object { prototype: SVGDescElement; on create(): SVGDescElement }


  type SVGElementEventMap = aspect ElementEventMap, GlobalEventHandlersEventMap
  {

  }


  /**
  * All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement)
  */

  type SVGElement = aspect Element, ElementCSSInlineStyle, GlobalEventHandlers, HTMLOrSVGElement
  {
    guarded
    ownerSVGElement: SVGSVGElement?

    guarded
    viewportElement: SVGElement?

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGElement: object { prototype: SVGElement; on create(): SVGElement }


  /**
  * Provides access to the properties of <ellipse> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement)
  */

  type SVGEllipseElement = aspect SVGGeometryElement
  {
    guarded
    cx: SVGAnimatedLength

    guarded
    cy: SVGAnimatedLength

    guarded
    rx: SVGAnimatedLength

    guarded
    ry: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGEllipseElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGEllipseElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGEllipseElement: object { prototype: SVGEllipseElement; on create(): SVGEllipseElement }


  /**
  * Corresponds to the <feBlend> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement)
  */

  type SVGFEBlendElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    in1: SVGAnimatedString

    guarded
    in2: SVGAnimatedString

    guarded
    mode: SVGAnimatedEnumeration

    guarded
    SVG_FEBLEND_MODE_UNKNOWN: 0

    guarded
    SVG_FEBLEND_MODE_NORMAL: 1

    guarded
    SVG_FEBLEND_MODE_MULTIPLY: 2

    guarded
    SVG_FEBLEND_MODE_SCREEN: 3

    guarded
    SVG_FEBLEND_MODE_DARKEN: 4

    guarded
    SVG_FEBLEND_MODE_LIGHTEN: 5

    guarded
    SVG_FEBLEND_MODE_OVERLAY: 6

    guarded
    SVG_FEBLEND_MODE_COLOR_DODGE: 7

    guarded
    SVG_FEBLEND_MODE_COLOR_BURN: 8

    guarded
    SVG_FEBLEND_MODE_HARD_LIGHT: 9

    guarded
    SVG_FEBLEND_MODE_SOFT_LIGHT: 10

    guarded
    SVG_FEBLEND_MODE_DIFFERENCE: 11

    guarded
    SVG_FEBLEND_MODE_EXCLUSION: 12

    guarded
    SVG_FEBLEND_MODE_HUE: 13

    guarded
    SVG_FEBLEND_MODE_SATURATION: 14

    guarded
    SVG_FEBLEND_MODE_COLOR: 15

    guarded
    SVG_FEBLEND_MODE_LUMINOSITY: 16

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEBlendElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEBlendElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEBlendElement: object { prototype: SVGFEBlendElement; on create(): SVGFEBlendElement; guarded SVG_FEBLEND_MODE_UNKNOWN: 0; guarded SVG_FEBLEND_MODE_NORMAL: 1; guarded SVG_FEBLEND_MODE_MULTIPLY: 2; guarded SVG_FEBLEND_MODE_SCREEN: 3; guarded SVG_FEBLEND_MODE_DARKEN: 4; guarded SVG_FEBLEND_MODE_LIGHTEN: 5; guarded SVG_FEBLEND_MODE_OVERLAY: 6; guarded SVG_FEBLEND_MODE_COLOR_DODGE: 7; guarded SVG_FEBLEND_MODE_COLOR_BURN: 8; guarded SVG_FEBLEND_MODE_HARD_LIGHT: 9; guarded SVG_FEBLEND_MODE_SOFT_LIGHT: 10; guarded SVG_FEBLEND_MODE_DIFFERENCE: 11; guarded SVG_FEBLEND_MODE_EXCLUSION: 12; guarded SVG_FEBLEND_MODE_HUE: 13; guarded SVG_FEBLEND_MODE_SATURATION: 14; guarded SVG_FEBLEND_MODE_COLOR: 15; guarded SVG_FEBLEND_MODE_LUMINOSITY: 16 }


  /**
  * Corresponds to the <feColorMatrix> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement)
  */

  type SVGFEColorMatrixElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    in1: SVGAnimatedString

    guarded
    type`: SVGAnimatedEnumeration

    guarded
    values: SVGAnimatedNumberList

    guarded
    SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0

    guarded
    SVG_FECOLORMATRIX_TYPE_MATRIX: 1

    guarded
    SVG_FECOLORMATRIX_TYPE_SATURATE: 2

    guarded
    SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3

    guarded
    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEColorMatrixElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEColorMatrixElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEColorMatrixElement: object { prototype: SVGFEColorMatrixElement; on create(): SVGFEColorMatrixElement; guarded SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0; guarded SVG_FECOLORMATRIX_TYPE_MATRIX: 1; guarded SVG_FECOLORMATRIX_TYPE_SATURATE: 2; guarded SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3; guarded SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4 }


  /**
  * Corresponds to the <feComponentTransfer> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEComponentTransferElement)
  */

  type SVGFEComponentTransferElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    in1: SVGAnimatedString

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEComponentTransferElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEComponentTransferElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEComponentTransferElement: object { prototype: SVGFEComponentTransferElement; on create(): SVGFEComponentTransferElement }


  /**
  * Corresponds to the <feComposite> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement)
  */

  type SVGFECompositeElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    in1: SVGAnimatedString

    guarded
    in2: SVGAnimatedString

    guarded
    k1: SVGAnimatedNumber

    guarded
    k2: SVGAnimatedNumber

    guarded
    k3: SVGAnimatedNumber

    guarded
    k4: SVGAnimatedNumber

    guarded
    operator: SVGAnimatedEnumeration

    guarded
    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0

    guarded
    SVG_FECOMPOSITE_OPERATOR_OVER: 1

    guarded
    SVG_FECOMPOSITE_OPERATOR_IN: 2

    guarded
    SVG_FECOMPOSITE_OPERATOR_OUT: 3

    guarded
    SVG_FECOMPOSITE_OPERATOR_ATOP: 4

    guarded
    SVG_FECOMPOSITE_OPERATOR_XOR: 5

    guarded
    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFECompositeElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFECompositeElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFECompositeElement: object { prototype: SVGFECompositeElement; on create(): SVGFECompositeElement; guarded SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0; guarded SVG_FECOMPOSITE_OPERATOR_OVER: 1; guarded SVG_FECOMPOSITE_OPERATOR_IN: 2; guarded SVG_FECOMPOSITE_OPERATOR_OUT: 3; guarded SVG_FECOMPOSITE_OPERATOR_ATOP: 4; guarded SVG_FECOMPOSITE_OPERATOR_XOR: 5; guarded SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6 }


  /**
  * Corresponds to the <feConvolveMatrix> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement)
  */

  type SVGFEConvolveMatrixElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    bias: SVGAnimatedNumber

    guarded
    divisor: SVGAnimatedNumber

    guarded
    edgeMode: SVGAnimatedEnumeration

    guarded
    in1: SVGAnimatedString

    guarded
    kernelMatrix: SVGAnimatedNumberList

    guarded
    kernelUnitLengthX: SVGAnimatedNumber

    guarded
    kernelUnitLengthY: SVGAnimatedNumber

    guarded
    orderX: SVGAnimatedInteger

    guarded
    orderY: SVGAnimatedInteger

    guarded
    preserveAlpha: SVGAnimatedBoolean

    guarded
    targetX: SVGAnimatedInteger

    guarded
    targetY: SVGAnimatedInteger

    guarded
    SVG_EDGEMODE_UNKNOWN: 0

    guarded
    SVG_EDGEMODE_DUPLICATE: 1

    guarded
    SVG_EDGEMODE_WRAP: 2

    guarded
    SVG_EDGEMODE_NONE: 3

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEConvolveMatrixElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEConvolveMatrixElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEConvolveMatrixElement: object { prototype: SVGFEConvolveMatrixElement; on create(): SVGFEConvolveMatrixElement; guarded SVG_EDGEMODE_UNKNOWN: 0; guarded SVG_EDGEMODE_DUPLICATE: 1; guarded SVG_EDGEMODE_WRAP: 2; guarded SVG_EDGEMODE_NONE: 3 }


  /**
  * Corresponds to the <feDiffuseLighting> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement)
  */

  type SVGFEDiffuseLightingElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    diffuseConstant: SVGAnimatedNumber

    guarded
    in1: SVGAnimatedString

    guarded
    kernelUnitLengthX: SVGAnimatedNumber

    guarded
    kernelUnitLengthY: SVGAnimatedNumber

    guarded
    surfaceScale: SVGAnimatedNumber

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEDiffuseLightingElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEDiffuseLightingElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEDiffuseLightingElement: object { prototype: SVGFEDiffuseLightingElement; on create(): SVGFEDiffuseLightingElement }


  /**
  * Corresponds to the <feDisplacementMap> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement)
  */

  type SVGFEDisplacementMapElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    in1: SVGAnimatedString

    guarded
    in2: SVGAnimatedString

    guarded
    scale: SVGAnimatedNumber

    guarded
    xChannelSelector: SVGAnimatedEnumeration

    guarded
    yChannelSelector: SVGAnimatedEnumeration

    guarded
    SVG_CHANNEL_UNKNOWN: 0

    guarded
    SVG_CHANNEL_R: 1

    guarded
    SVG_CHANNEL_G: 2

    guarded
    SVG_CHANNEL_B: 3

    guarded
    SVG_CHANNEL_A: 4

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEDisplacementMapElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEDisplacementMapElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEDisplacementMapElement: object { prototype: SVGFEDisplacementMapElement; on create(): SVGFEDisplacementMapElement; guarded SVG_CHANNEL_UNKNOWN: 0; guarded SVG_CHANNEL_R: 1; guarded SVG_CHANNEL_G: 2; guarded SVG_CHANNEL_B: 3; guarded SVG_CHANNEL_A: 4 }


  /**
  * Corresponds to the <feDistantLight> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement)
  */

  type SVGFEDistantLightElement = aspect SVGElement
  {
    guarded
    azimuth: SVGAnimatedNumber

    guarded
    elevation: SVGAnimatedNumber

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEDistantLightElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEDistantLightElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEDistantLightElement: object { prototype: SVGFEDistantLightElement; on create(): SVGFEDistantLightElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement) */

  type SVGFEDropShadowElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    dx: SVGAnimatedNumber

    guarded
    dy: SVGAnimatedNumber

    guarded
    in1: SVGAnimatedString

    guarded
    stdDeviationX: SVGAnimatedNumber

    guarded
    stdDeviationY: SVGAnimatedNumber

    operation setStdDeviation(stdDeviationX: Number, stdDeviationY: Number)

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEDropShadowElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEDropShadowElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEDropShadowElement: object { prototype: SVGFEDropShadowElement; on create(): SVGFEDropShadowElement }


  /**
  * Corresponds to the <feFlood> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFloodElement)
  */

  type SVGFEFloodElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFloodElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFloodElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEFloodElement: object { prototype: SVGFEFloodElement; on create(): SVGFEFloodElement }


  /**
  * Corresponds to the <feFuncA> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncAElement)
  */

  type SVGFEFuncAElement = aspect SVGComponentTransferFunctionElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFuncAElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFuncAElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEFuncAElement: object { prototype: SVGFEFuncAElement; on create(): SVGFEFuncAElement }


  /**
  * Corresponds to the <feFuncB> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncBElement)
  */

  type SVGFEFuncBElement = aspect SVGComponentTransferFunctionElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFuncBElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFuncBElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEFuncBElement: object { prototype: SVGFEFuncBElement; on create(): SVGFEFuncBElement }


  /**
  * Corresponds to the <feFuncG> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncGElement)
  */

  type SVGFEFuncGElement = aspect SVGComponentTransferFunctionElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFuncGElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFuncGElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEFuncGElement: object { prototype: SVGFEFuncGElement; on create(): SVGFEFuncGElement }


  /**
  * Corresponds to the <feFuncR> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncRElement)
  */

  type SVGFEFuncRElement = aspect SVGComponentTransferFunctionElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFuncRElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEFuncRElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEFuncRElement: object { prototype: SVGFEFuncRElement; on create(): SVGFEFuncRElement }


  /**
  * Corresponds to the <feGaussianBlur> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement)
  */

  type SVGFEGaussianBlurElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    in1: SVGAnimatedString

    guarded
    stdDeviationX: SVGAnimatedNumber

    guarded
    stdDeviationY: SVGAnimatedNumber

    operation setStdDeviation(stdDeviationX: Number, stdDeviationY: Number)

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEGaussianBlurElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEGaussianBlurElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEGaussianBlurElement: object { prototype: SVGFEGaussianBlurElement; on create(): SVGFEGaussianBlurElement }


  /**
  * Corresponds to the <feImage> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEImageElement)
  */

  type SVGFEImageElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes, SVGURIReference
  {
    guarded
    preserveAspectRatio: SVGAnimatedPreserveAspectRatio

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEImageElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEImageElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEImageElement: object { prototype: SVGFEImageElement; on create(): SVGFEImageElement }


  /**
  * Corresponds to the <feMerge> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeElement)
  */

  type SVGFEMergeElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEMergeElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEMergeElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEMergeElement: object { prototype: SVGFEMergeElement; on create(): SVGFEMergeElement }


  /**
  * Corresponds to the <feMergeNode> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeNodeElement)
  */

  type SVGFEMergeNodeElement = aspect SVGElement
  {
    guarded
    in1: SVGAnimatedString

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEMergeNodeElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEMergeNodeElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEMergeNodeElement: object { prototype: SVGFEMergeNodeElement; on create(): SVGFEMergeNodeElement }


  /**
  * Corresponds to the <feMorphology> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement)
  */

  type SVGFEMorphologyElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    in1: SVGAnimatedString

    guarded
    operator: SVGAnimatedEnumeration

    guarded
    radiusX: SVGAnimatedNumber

    guarded
    radiusY: SVGAnimatedNumber

    guarded
    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0

    guarded
    SVG_MORPHOLOGY_OPERATOR_ERODE: 1

    guarded
    SVG_MORPHOLOGY_OPERATOR_DILATE: 2

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEMorphologyElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEMorphologyElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEMorphologyElement: object { prototype: SVGFEMorphologyElement; on create(): SVGFEMorphologyElement; guarded SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0; guarded SVG_MORPHOLOGY_OPERATOR_ERODE: 1; guarded SVG_MORPHOLOGY_OPERATOR_DILATE: 2 }


  /**
  * Corresponds to the <feOffset> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement)
  */

  type SVGFEOffsetElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    dx: SVGAnimatedNumber

    guarded
    dy: SVGAnimatedNumber

    guarded
    in1: SVGAnimatedString

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEOffsetElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEOffsetElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEOffsetElement: object { prototype: SVGFEOffsetElement; on create(): SVGFEOffsetElement }


  /**
  * Corresponds to the <fePointLight> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement)
  */

  type SVGFEPointLightElement = aspect SVGElement
  {
    guarded
    x: SVGAnimatedNumber

    guarded
    y: SVGAnimatedNumber

    guarded
    z: SVGAnimatedNumber

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEPointLightElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFEPointLightElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFEPointLightElement: object { prototype: SVGFEPointLightElement; on create(): SVGFEPointLightElement }


  /**
  * Corresponds to the <feSpecularLighting> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement)
  */

  type SVGFESpecularLightingElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    in1: SVGAnimatedString

    guarded
    kernelUnitLengthX: SVGAnimatedNumber

    guarded
    kernelUnitLengthY: SVGAnimatedNumber

    guarded
    specularConstant: SVGAnimatedNumber

    guarded
    specularExponent: SVGAnimatedNumber

    guarded
    surfaceScale: SVGAnimatedNumber

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFESpecularLightingElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFESpecularLightingElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFESpecularLightingElement: object { prototype: SVGFESpecularLightingElement; on create(): SVGFESpecularLightingElement }


  /**
  * Corresponds to the <feSpotLight> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement)
  */

  type SVGFESpotLightElement = aspect SVGElement
  {
    guarded
    limitingConeAngle: SVGAnimatedNumber

    guarded
    pointsAtX: SVGAnimatedNumber

    guarded
    pointsAtY: SVGAnimatedNumber

    guarded
    pointsAtZ: SVGAnimatedNumber

    guarded
    specularExponent: SVGAnimatedNumber

    guarded
    x: SVGAnimatedNumber

    guarded
    y: SVGAnimatedNumber

    guarded
    z: SVGAnimatedNumber

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFESpotLightElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFESpotLightElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFESpotLightElement: object { prototype: SVGFESpotLightElement; on create(): SVGFESpotLightElement }


  /**
  * Corresponds to the <feTile> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETileElement)
  */

  type SVGFETileElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    in1: SVGAnimatedString

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFETileElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFETileElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFETileElement: object { prototype: SVGFETileElement; on create(): SVGFETileElement }


  /**
  * Corresponds to the <feTurbulence> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement)
  */

  type SVGFETurbulenceElement = aspect SVGElement, SVGFilterPrimitiveStandardAttributes
  {
    guarded
    baseFrequencyX: SVGAnimatedNumber

    guarded
    baseFrequencyY: SVGAnimatedNumber

    guarded
    numOctaves: SVGAnimatedInteger

    guarded
    seed: SVGAnimatedNumber

    guarded
    stitchTiles: SVGAnimatedEnumeration

    guarded
    type`: SVGAnimatedEnumeration

    guarded
    SVG_TURBULENCE_TYPE_UNKNOWN: 0

    guarded
    SVG_TURBULENCE_TYPE_FRACTALNOISE: 1

    guarded
    SVG_TURBULENCE_TYPE_TURBULENCE: 2

    guarded
    SVG_STITCHTYPE_UNKNOWN: 0

    guarded
    SVG_STITCHTYPE_STITCH: 1

    guarded
    SVG_STITCHTYPE_NOSTITCH: 2

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFETurbulenceElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFETurbulenceElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFETurbulenceElement: object { prototype: SVGFETurbulenceElement; on create(): SVGFETurbulenceElement; guarded SVG_TURBULENCE_TYPE_UNKNOWN: 0; guarded SVG_TURBULENCE_TYPE_FRACTALNOISE: 1; guarded SVG_TURBULENCE_TYPE_TURBULENCE: 2; guarded SVG_STITCHTYPE_UNKNOWN: 0; guarded SVG_STITCHTYPE_STITCH: 1; guarded SVG_STITCHTYPE_NOSTITCH: 2 }


  /**
  * Provides access to the properties of <filter> elements, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement)
  */

  type SVGFilterElement = aspect SVGElement, SVGURIReference
  {
    guarded
    filterUnits: SVGAnimatedEnumeration

    guarded
    height: SVGAnimatedLength

    guarded
    primitiveUnits: SVGAnimatedEnumeration

    guarded
    width: SVGAnimatedLength

    guarded
    x: SVGAnimatedLength

    guarded
    y: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFilterElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGFilterElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGFilterElement: object { prototype: SVGFilterElement; on create(): SVGFilterElement }


  type SVGFilterPrimitiveStandardAttributes = aspect
  {
    guarded
    height: SVGAnimatedLength

    guarded
    result: SVGAnimatedString

    guarded
    width: SVGAnimatedLength

    guarded
    x: SVGAnimatedLength

    guarded
    y: SVGAnimatedLength
  }


  type SVGFitToViewBox = aspect
  {
    guarded
    preserveAspectRatio: SVGAnimatedPreserveAspectRatio

    guarded
    viewBox: SVGAnimatedRect
  }


  /**
  * Provides access to the properties of <foreignObject> elements, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement)
  */

  type SVGForeignObjectElement = aspect SVGGraphicsElement
  {
    guarded
    height: SVGAnimatedLength

    guarded
    width: SVGAnimatedLength

    guarded
    x: SVGAnimatedLength

    guarded
    y: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGForeignObjectElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGForeignObjectElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGForeignObjectElement: object { prototype: SVGForeignObjectElement; on create(): SVGForeignObjectElement }


  /**
  * Corresponds to the <g> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGElement)
  */

  type SVGGElement = aspect SVGGraphicsElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGGElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGGElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGGElement: object { prototype: SVGGElement; on create(): SVGGElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement) */

  type SVGGeometryElement = aspect SVGGraphicsElement
  {
    guarded
    pathLength: SVGAnimatedNumber

    operation getPointAtLength(distance: Number): DOMPoint

    operation getTotalLength(): Number

    operation isPointInFill(point: DOMPointInit? = empty): YesNo

    operation isPointInStroke(point: DOMPointInit? = empty): YesNo

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGGeometryElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGGeometryElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGGeometryElement: object { prototype: SVGGeometryElement; on create(): SVGGeometryElement }


  /**
  * The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement)
  */

  type SVGGradientElement = aspect SVGElement, SVGURIReference
  {
    guarded
    gradientTransform: SVGAnimatedTransformList

    guarded
    gradientUnits: SVGAnimatedEnumeration

    guarded
    spreadMethod: SVGAnimatedEnumeration

    guarded
    SVG_SPREADMETHOD_UNKNOWN: 0

    guarded
    SVG_SPREADMETHOD_PAD: 1

    guarded
    SVG_SPREADMETHOD_REFLECT: 2

    guarded
    SVG_SPREADMETHOD_REPEAT: 3

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGGradientElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGGradientElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGGradientElement: object { prototype: SVGGradientElement; on create(): SVGGradientElement; guarded SVG_SPREADMETHOD_UNKNOWN: 0; guarded SVG_SPREADMETHOD_PAD: 1; guarded SVG_SPREADMETHOD_REFLECT: 2; guarded SVG_SPREADMETHOD_REPEAT: 3 }


  /**
  * SVG elements whose primary purpose is to directly render graphics into a group.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement)
  */

  type SVGGraphicsElement = aspect SVGElement, SVGTests
  {
    guarded
    transform: SVGAnimatedTransformList

    operation getBBox(options: SVGBoundingBoxOptions? = empty): DOMRect

    operation getCTM(): DOMMatrix?

    operation getScreenCTM(): DOMMatrix?

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGGraphicsElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGGraphicsElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGGraphicsElement: object { prototype: SVGGraphicsElement; on create(): SVGGraphicsElement }


  /**
  * Corresponds to the <image> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement)
  */

  type SVGImageElement = aspect SVGGraphicsElement, SVGURIReference
  {
    guarded
    height: SVGAnimatedLength

    guarded
    preserveAspectRatio: SVGAnimatedPreserveAspectRatio

    guarded
    width: SVGAnimatedLength

    guarded
    x: SVGAnimatedLength

    guarded
    y: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGImageElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGImageElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGImageElement: object { prototype: SVGImageElement; on create(): SVGImageElement }


  /**
  * Correspond to the <length> basic data type.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength)
  */

  type SVGLength = aspect
  {
    guarded
    unitType: Number

    value: Number

    valueAsString: Text

    valueInSpecifiedUnits: Number

    operation convertToSpecifiedUnits(unitType: Number)

    operation newValueSpecifiedUnits(unitType: Number, valueInSpecifiedUnits: Number)

    guarded
    SVG_LENGTHTYPE_UNKNOWN: 0

    guarded
    SVG_LENGTHTYPE_NUMBER: 1

    guarded
    SVG_LENGTHTYPE_PERCENTAGE: 2

    guarded
    SVG_LENGTHTYPE_EMS: 3

    guarded
    SVG_LENGTHTYPE_EXS: 4

    guarded
    SVG_LENGTHTYPE_PX: 5

    guarded
    SVG_LENGTHTYPE_CM: 6

    guarded
    SVG_LENGTHTYPE_MM: 7

    guarded
    SVG_LENGTHTYPE_IN: 8

    guarded
    SVG_LENGTHTYPE_PT: 9

    guarded
    SVG_LENGTHTYPE_PC: 10
  }


  /*(!) var */ SVGLength: object { prototype: SVGLength; on create(): SVGLength; guarded SVG_LENGTHTYPE_UNKNOWN: 0; guarded SVG_LENGTHTYPE_NUMBER: 1; guarded SVG_LENGTHTYPE_PERCENTAGE: 2; guarded SVG_LENGTHTYPE_EMS: 3; guarded SVG_LENGTHTYPE_EXS: 4; guarded SVG_LENGTHTYPE_PX: 5; guarded SVG_LENGTHTYPE_CM: 6; guarded SVG_LENGTHTYPE_MM: 7; guarded SVG_LENGTHTYPE_IN: 8; guarded SVG_LENGTHTYPE_PT: 9; guarded SVG_LENGTHTYPE_PC: 10 }


  /**
  * The SVGLengthList defines a list of SVGLength objects.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList)
  */

  type SVGLengthList = aspect
  {
    guarded
    length: Number

    guarded
    numberOfItems: Number

    operation appendItem(newItem: SVGLength): SVGLength

    operation clear()

    operation getItem(index: Number): SVGLength

    operation initialize(newItem: SVGLength): SVGLength

    operation insertItemBefore(newItem: SVGLength, index: Number): SVGLength

    operation removeItem(index: Number): SVGLength

    operation replaceItem(newItem: SVGLength, index: Number): SVGLength

    /*(!) [index: number]: SVGLength*/
  }


  /*(!) var */ SVGLengthList: object { prototype: SVGLengthList; on create(): SVGLengthList }


  /**
  * Provides access to the properties of <line> elements, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement)
  */

  type SVGLineElement = aspect SVGGeometryElement
  {
    guarded
    x1: SVGAnimatedLength

    guarded
    x2: SVGAnimatedLength

    guarded
    y1: SVGAnimatedLength

    guarded
    y2: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGLineElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGLineElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGLineElement: object { prototype: SVGLineElement; on create(): SVGLineElement }


  /**
  * Corresponds to the <linearGradient> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement)
  */

  type SVGLinearGradientElement = aspect SVGGradientElement
  {
    guarded
    x1: SVGAnimatedLength

    guarded
    x2: SVGAnimatedLength

    guarded
    y1: SVGAnimatedLength

    guarded
    y2: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGLinearGradientElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGLinearGradientElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGLinearGradientElement: object { prototype: SVGLinearGradientElement; on create(): SVGLinearGradientElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMPathElement) */

  type SVGMPathElement = aspect SVGElement, SVGURIReference
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGMPathElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGMPathElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGMPathElement: object { prototype: SVGMPathElement; on create(): SVGMPathElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement) */

  type SVGMarkerElement = aspect SVGElement, SVGFitToViewBox
  {
    guarded
    markerHeight: SVGAnimatedLength

    guarded
    markerUnits: SVGAnimatedEnumeration

    guarded
    markerWidth: SVGAnimatedLength

    guarded
    orientAngle: SVGAnimatedAngle

    guarded
    orientType: SVGAnimatedEnumeration

    guarded
    refX: SVGAnimatedLength

    guarded
    refY: SVGAnimatedLength

    operation setOrientToAngle(angle: SVGAngle)

    operation setOrientToAuto()

    guarded
    SVG_MARKERUNITS_UNKNOWN: 0

    guarded
    SVG_MARKERUNITS_USERSPACEONUSE: 1

    guarded
    SVG_MARKERUNITS_STROKEWIDTH: 2

    guarded
    SVG_MARKER_ORIENT_UNKNOWN: 0

    guarded
    SVG_MARKER_ORIENT_AUTO: 1

    guarded
    SVG_MARKER_ORIENT_ANGLE: 2

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGMarkerElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGMarkerElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGMarkerElement: object { prototype: SVGMarkerElement; on create(): SVGMarkerElement; guarded SVG_MARKERUNITS_UNKNOWN: 0; guarded SVG_MARKERUNITS_USERSPACEONUSE: 1; guarded SVG_MARKERUNITS_STROKEWIDTH: 2; guarded SVG_MARKER_ORIENT_UNKNOWN: 0; guarded SVG_MARKER_ORIENT_AUTO: 1; guarded SVG_MARKER_ORIENT_ANGLE: 2 }


  /**
  * Provides access to the properties of <mask> elements, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement)
  */

  type SVGMaskElement = aspect SVGElement
  {
    guarded
    height: SVGAnimatedLength

    guarded
    maskContentUnits: SVGAnimatedEnumeration

    guarded
    maskUnits: SVGAnimatedEnumeration

    guarded
    width: SVGAnimatedLength

    guarded
    x: SVGAnimatedLength

    guarded
    y: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGMaskElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGMaskElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGMaskElement: object { prototype: SVGMaskElement; on create(): SVGMaskElement }


  /**
  * Corresponds to the <metadata> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMetadataElement)
  */

  type SVGMetadataElement = aspect SVGElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGMetadataElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGMetadataElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGMetadataElement: object { prototype: SVGMetadataElement; on create(): SVGMetadataElement }


  /**
  * Corresponds to the <number> basic data type.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumber)
  */

  type SVGNumber = aspect
  {
    value: Number
  }


  /*(!) var */ SVGNumber: object { prototype: SVGNumber; on create(): SVGNumber }


  /**
  * The SVGNumberList defines a list of SVGNumber objects.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList)
  */

  type SVGNumberList = aspect
  {
    guarded
    length: Number

    guarded
    numberOfItems: Number

    operation appendItem(newItem: SVGNumber): SVGNumber

    operation clear()

    operation getItem(index: Number): SVGNumber

    operation initialize(newItem: SVGNumber): SVGNumber

    operation insertItemBefore(newItem: SVGNumber, index: Number): SVGNumber

    operation removeItem(index: Number): SVGNumber

    operation replaceItem(newItem: SVGNumber, index: Number): SVGNumber

    /*(!) [index: number]: SVGNumber*/
  }


  /*(!) var */ SVGNumberList: object { prototype: SVGNumberList; on create(): SVGNumberList }


  /**
  * Corresponds to the <path> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement)
  */

  type SVGPathElement = aspect SVGGeometryElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGPathElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGPathElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGPathElement: object { prototype: SVGPathElement; on create(): SVGPathElement }


  /**
  * Corresponds to the <pattern> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement)
  */

  type SVGPatternElement = aspect SVGElement, SVGFitToViewBox, SVGURIReference
  {
    guarded
    height: SVGAnimatedLength

    guarded
    patternContentUnits: SVGAnimatedEnumeration

    guarded
    patternTransform: SVGAnimatedTransformList

    guarded
    patternUnits: SVGAnimatedEnumeration

    guarded
    width: SVGAnimatedLength

    guarded
    x: SVGAnimatedLength

    guarded
    y: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGPatternElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGPatternElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGPatternElement: object { prototype: SVGPatternElement; on create(): SVGPatternElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList) */

  type SVGPointList = aspect
  {
    guarded
    length: Number

    guarded
    numberOfItems: Number

    operation appendItem(newItem: DOMPoint): DOMPoint

    operation clear()

    operation getItem(index: Number): DOMPoint

    operation initialize(newItem: DOMPoint): DOMPoint

    operation insertItemBefore(newItem: DOMPoint, index: Number): DOMPoint

    operation removeItem(index: Number): DOMPoint

    operation replaceItem(newItem: DOMPoint, index: Number): DOMPoint

    /*(!) [index: number]: DOMPoint*/
  }


  /*(!) var */ SVGPointList: object { prototype: SVGPointList; on create(): SVGPointList }


  /**
  * Provides access to the properties of <polygon> elements, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement)
  */

  type SVGPolygonElement = aspect SVGGeometryElement, SVGAnimatedPoints
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGPolygonElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGPolygonElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGPolygonElement: object { prototype: SVGPolygonElement; on create(): SVGPolygonElement }


  /**
  * Provides access to the properties of <polyline> elements, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolylineElement)
  */

  type SVGPolylineElement = aspect SVGGeometryElement, SVGAnimatedPoints
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGPolylineElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGPolylineElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGPolylineElement: object { prototype: SVGPolylineElement; on create(): SVGPolylineElement }


  /**
  * Corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio)
  */

  type SVGPreserveAspectRatio = aspect
  {
    align: Number

    meetOrSlice: Number

    guarded
    SVG_PRESERVEASPECTRATIO_UNKNOWN: 0

    guarded
    SVG_PRESERVEASPECTRATIO_NONE: 1

    guarded
    SVG_PRESERVEASPECTRATIO_XMINYMIN: 2

    guarded
    SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3

    guarded
    SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4

    guarded
    SVG_PRESERVEASPECTRATIO_XMINYMID: 5

    guarded
    SVG_PRESERVEASPECTRATIO_XMIDYMID: 6

    guarded
    SVG_PRESERVEASPECTRATIO_XMAXYMID: 7

    guarded
    SVG_PRESERVEASPECTRATIO_XMINYMAX: 8

    guarded
    SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9

    guarded
    SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10

    guarded
    SVG_MEETORSLICE_UNKNOWN: 0

    guarded
    SVG_MEETORSLICE_MEET: 1

    guarded
    SVG_MEETORSLICE_SLICE: 2
  }


  /*(!) var */ SVGPreserveAspectRatio: object { prototype: SVGPreserveAspectRatio; on create(): SVGPreserveAspectRatio; guarded SVG_PRESERVEASPECTRATIO_UNKNOWN: 0; guarded SVG_PRESERVEASPECTRATIO_NONE: 1; guarded SVG_PRESERVEASPECTRATIO_XMINYMIN: 2; guarded SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3; guarded SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4; guarded SVG_PRESERVEASPECTRATIO_XMINYMID: 5; guarded SVG_PRESERVEASPECTRATIO_XMIDYMID: 6; guarded SVG_PRESERVEASPECTRATIO_XMAXYMID: 7; guarded SVG_PRESERVEASPECTRATIO_XMINYMAX: 8; guarded SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9; guarded SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10; guarded SVG_MEETORSLICE_UNKNOWN: 0; guarded SVG_MEETORSLICE_MEET: 1; guarded SVG_MEETORSLICE_SLICE: 2 }


  /**
  * Corresponds to the <RadialGradient> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement)
  */

  type SVGRadialGradientElement = aspect SVGGradientElement
  {
    guarded
    cx: SVGAnimatedLength

    guarded
    cy: SVGAnimatedLength

    guarded
    fr: SVGAnimatedLength

    guarded
    fx: SVGAnimatedLength

    guarded
    fy: SVGAnimatedLength

    guarded
    r: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGRadialGradientElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGRadialGradientElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGRadialGradientElement: object { prototype: SVGRadialGradientElement; on create(): SVGRadialGradientElement }


  /**
  * Provides access to the properties of <rect> elements, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement)
  */

  type SVGRectElement = aspect SVGGeometryElement
  {
    guarded
    height: SVGAnimatedLength

    guarded
    rx: SVGAnimatedLength

    guarded
    ry: SVGAnimatedLength

    guarded
    width: SVGAnimatedLength

    guarded
    x: SVGAnimatedLength

    guarded
    y: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGRectElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGRectElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGRectElement: object { prototype: SVGRectElement; on create(): SVGRectElement }


  type SVGSVGElementEventMap = aspect SVGElementEventMap, WindowEventHandlersEventMap
  {

  }


  /**
  * Provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement)
  */

  type SVGSVGElement = aspect SVGGraphicsElement, SVGFitToViewBox, WindowEventHandlers
  {
    currentScale: Number

    guarded
    currentTranslate: DOMPointReadOnly

    guarded
    height: SVGAnimatedLength

    guarded
    width: SVGAnimatedLength

    guarded
    x: SVGAnimatedLength

    guarded
    y: SVGAnimatedLength

    operation animationsPaused(): YesNo

    operation checkEnclosure(element: SVGElement, rect: DOMRectReadOnly): YesNo

    operation checkIntersection(element: SVGElement, rect: DOMRectReadOnly): YesNo

    operation createSVGAngle(): SVGAngle

    operation createSVGLength(): SVGLength

    operation createSVGMatrix(): DOMMatrix

    operation createSVGNumber(): SVGNumber

    operation createSVGPoint(): DOMPoint

    operation createSVGRect(): DOMRect

    operation createSVGTransform(): SVGTransform

    operation createSVGTransformFromMatrix(matrix: DOMMatrix2DInit? = empty): SVGTransform

    operation deselectAll()

    operation getCurrentTime(): Number

    operation getElementById(elementId: Text): Element

    operation getEnclosureList(rect: DOMRectReadOnly, referenceElement: SVGElement?): NodeListOf<Object? /*(!)SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement*/>

    operation getIntersectionList(rect: DOMRectReadOnly, referenceElement: SVGElement?): NodeListOf<Object? /*(!)SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement*/>

    operation pauseAnimations()

    operation setCurrentTime(seconds: Number)

    operation unpauseAnimations()

    operation addEventListener<K = /*(!) keyof SVGSVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGSVGElement, ev: /*(!) SVGSVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGSVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGSVGElement, ev: /*(!) SVGSVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGSVGElement: object { prototype: SVGSVGElement; on create(): SVGSVGElement }


  /**
  * Corresponds to the SVG <script> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGScriptElement)
  */

  type SVGScriptElement = aspect SVGElement, SVGURIReference
  {
    type`: Text

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGScriptElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGScriptElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGScriptElement: object { prototype: SVGScriptElement; on create(): SVGScriptElement }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSetElement) */

  type SVGSetElement = aspect SVGAnimationElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGSetElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGSetElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGSetElement: object { prototype: SVGSetElement; on create(): SVGSetElement }


  /**
  * Corresponds to the <stop> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStopElement)
  */

  type SVGStopElement = aspect SVGElement
  {
    guarded
    offset: SVGAnimatedNumber

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGStopElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGStopElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGStopElement: object { prototype: SVGStopElement; on create(): SVGStopElement }


  /**
  * The SVGStringList defines a list of DOMString objects.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList)
  */

  type SVGStringList = aspect
  {
    guarded
    length: Number

    guarded
    numberOfItems: Number

    operation appendItem(newItem: Text): Text

    operation clear()

    operation getItem(index: Number): Text

    operation initialize(newItem: Text): Text

    operation insertItemBefore(newItem: Text, index: Number): Text

    operation removeItem(index: Number): Text

    operation replaceItem(newItem: Text, index: Number): Text

    /*(!) [index: number]: string*/
  }


  /*(!) var */ SVGStringList: object { prototype: SVGStringList; on create(): SVGStringList }


  /**
  * Corresponds to the SVG <style> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement)
  */

  type SVGStyleElement = aspect SVGElement, LinkStyle
  {
    disabled: YesNo

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGStyleElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGStyleElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGStyleElement: object { prototype: SVGStyleElement; on create(): SVGStyleElement }


  /**
  * Corresponds to the <switch> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSwitchElement)
  */

  type SVGSwitchElement = aspect SVGGraphicsElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGSwitchElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGSwitchElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGSwitchElement: object { prototype: SVGSwitchElement; on create(): SVGSwitchElement }


  /**
  * Corresponds to the <symbol> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSymbolElement)
  */

  type SVGSymbolElement = aspect SVGElement, SVGFitToViewBox
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGSymbolElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGSymbolElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGSymbolElement: object { prototype: SVGSymbolElement; on create(): SVGSymbolElement }


  /**
  * A <tspan> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTSpanElement)
  */

  type SVGTSpanElement = aspect SVGTextPositioningElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTSpanElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTSpanElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGTSpanElement: object { prototype: SVGTSpanElement; on create(): SVGTSpanElement }


  type SVGTests = aspect
  {
    guarded
    requiredExtensions: SVGStringList

    guarded
    systemLanguage: SVGStringList
  }


  /**
  * Implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement)
  */

  type SVGTextContentElement = aspect SVGGraphicsElement
  {
    guarded
    lengthAdjust: SVGAnimatedEnumeration

    guarded
    textLength: SVGAnimatedLength

    operation getCharNumAtPosition(point: DOMPointInit? = empty): Number

    operation getComputedTextLength(): Number

    operation getEndPositionOfChar(charnum: Number): DOMPoint

    operation getExtentOfChar(charnum: Number): DOMRect

    operation getNumberOfChars(): Number

    operation getRotationOfChar(charnum: Number): Number

    operation getStartPositionOfChar(charnum: Number): DOMPoint

    operation getSubStringLength(charnum: Number, nchars: Number): Number

    guarded
    LENGTHADJUST_UNKNOWN: 0

    guarded
    LENGTHADJUST_SPACING: 1

    guarded
    LENGTHADJUST_SPACINGANDGLYPHS: 2

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTextContentElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTextContentElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGTextContentElement: object { prototype: SVGTextContentElement; on create(): SVGTextContentElement; guarded LENGTHADJUST_UNKNOWN: 0; guarded LENGTHADJUST_SPACING: 1; guarded LENGTHADJUST_SPACINGANDGLYPHS: 2 }


  /**
  * Corresponds to the <text> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextElement)
  */

  type SVGTextElement = aspect SVGTextPositioningElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTextElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTextElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGTextElement: object { prototype: SVGTextElement; on create(): SVGTextElement }


  /**
  * Corresponds to the <textPath> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement)
  */

  type SVGTextPathElement = aspect SVGTextContentElement, SVGURIReference
  {
    guarded
    method: SVGAnimatedEnumeration

    guarded
    spacing: SVGAnimatedEnumeration

    guarded
    startOffset: SVGAnimatedLength

    guarded
    TEXTPATH_METHODTYPE_UNKNOWN: 0

    guarded
    TEXTPATH_METHODTYPE_ALIGN: 1

    guarded
    TEXTPATH_METHODTYPE_STRETCH: 2

    guarded
    TEXTPATH_SPACINGTYPE_UNKNOWN: 0

    guarded
    TEXTPATH_SPACINGTYPE_AUTO: 1

    guarded
    TEXTPATH_SPACINGTYPE_EXACT: 2

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTextPathElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTextPathElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGTextPathElement: object { prototype: SVGTextPathElement; on create(): SVGTextPathElement; guarded TEXTPATH_METHODTYPE_UNKNOWN: 0; guarded TEXTPATH_METHODTYPE_ALIGN: 1; guarded TEXTPATH_METHODTYPE_STRETCH: 2; guarded TEXTPATH_SPACINGTYPE_UNKNOWN: 0; guarded TEXTPATH_SPACINGTYPE_AUTO: 1; guarded TEXTPATH_SPACINGTYPE_EXACT: 2 }


  /**
  * Implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement)
  */

  type SVGTextPositioningElement = aspect SVGTextContentElement
  {
    guarded
    dx: SVGAnimatedLengthList

    guarded
    dy: SVGAnimatedLengthList

    guarded
    rotate: SVGAnimatedNumberList

    guarded
    x: SVGAnimatedLengthList

    guarded
    y: SVGAnimatedLengthList

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTextPositioningElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTextPositioningElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGTextPositioningElement: object { prototype: SVGTextPositioningElement; on create(): SVGTextPositioningElement }


  /**
  * Corresponds to the <title> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTitleElement)
  */

  type SVGTitleElement = aspect SVGElement
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTitleElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGTitleElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGTitleElement: object { prototype: SVGTitleElement; on create(): SVGTitleElement }


  /**
  * SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform)
  */

  type SVGTransform = aspect
  {
    guarded
    angle: Number

    guarded
    matrix: DOMMatrix

    guarded
    type`: Number

    operation setMatrix(matrix: DOMMatrix2DInit? = empty)

    operation setRotate(angle: Number, cx: Number, cy: Number)

    operation setScale(sx: Number, sy: Number)

    operation setSkewX(angle: Number)

    operation setSkewY(angle: Number)

    operation setTranslate(tx: Number, ty: Number)

    guarded
    SVG_TRANSFORM_UNKNOWN: 0

    guarded
    SVG_TRANSFORM_MATRIX: 1

    guarded
    SVG_TRANSFORM_TRANSLATE: 2

    guarded
    SVG_TRANSFORM_SCALE: 3

    guarded
    SVG_TRANSFORM_ROTATE: 4

    guarded
    SVG_TRANSFORM_SKEWX: 5

    guarded
    SVG_TRANSFORM_SKEWY: 6
  }


  /*(!) var */ SVGTransform: object { prototype: SVGTransform; on create(): SVGTransform; guarded SVG_TRANSFORM_UNKNOWN: 0; guarded SVG_TRANSFORM_MATRIX: 1; guarded SVG_TRANSFORM_TRANSLATE: 2; guarded SVG_TRANSFORM_SCALE: 3; guarded SVG_TRANSFORM_ROTATE: 4; guarded SVG_TRANSFORM_SKEWX: 5; guarded SVG_TRANSFORM_SKEWY: 6 }


  /**
  * The SVGTransformList defines a list of SVGTransform objects.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList)
  */

  type SVGTransformList = aspect
  {
    guarded
    length: Number

    guarded
    numberOfItems: Number

    operation appendItem(newItem: SVGTransform): SVGTransform

    operation clear()

    operation consolidate(): SVGTransform?

    operation createSVGTransformFromMatrix(matrix: DOMMatrix2DInit? = empty): SVGTransform

    operation getItem(index: Number): SVGTransform

    operation initialize(newItem: SVGTransform): SVGTransform

    operation insertItemBefore(newItem: SVGTransform, index: Number): SVGTransform

    operation removeItem(index: Number): SVGTransform

    operation replaceItem(newItem: SVGTransform, index: Number): SVGTransform

    /*(!) [index: number]: SVGTransform*/
  }


  /*(!) var */ SVGTransformList: object { prototype: SVGTransformList; on create(): SVGTransformList }


  type SVGURIReference = aspect
  {
    guarded
    href: SVGAnimatedString
  }


  /**
  * A commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUnitTypes)
  */

  type SVGUnitTypes = aspect
  {
    guarded
    SVG_UNIT_TYPE_UNKNOWN: 0

    guarded
    SVG_UNIT_TYPE_USERSPACEONUSE: 1

    guarded
    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2
  }


  /*(!) var */ SVGUnitTypes: object { prototype: SVGUnitTypes; on create(): SVGUnitTypes; guarded SVG_UNIT_TYPE_UNKNOWN: 0; guarded SVG_UNIT_TYPE_USERSPACEONUSE: 1; guarded SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2 }


  /**
  * Corresponds to the <use> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement)
  */

  type SVGUseElement = aspect SVGGraphicsElement, SVGURIReference
  {
    guarded
    height: SVGAnimatedLength

    guarded
    width: SVGAnimatedLength

    guarded
    x: SVGAnimatedLength

    guarded
    y: SVGAnimatedLength

    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGUseElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGUseElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGUseElement: object { prototype: SVGUseElement; on create(): SVGUseElement }


  /**
  * Provides access to the properties of <view> elements, as well as methods to manipulate them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGViewElement)
  */

  type SVGViewElement = aspect SVGElement, SVGFitToViewBox
  {
    operation addEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGViewElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SVGElementEventMap */ Object?>(type`: K, listener: operation(this: SVGViewElement, ev: /*(!) SVGElementEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SVGViewElement: object { prototype: SVGViewElement; on create(): SVGViewElement }


  /**
  * A screen, usually the one on which the current window is being rendered, and is obtained using window.screen.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen)
  */

  type Screen = aspect
  {
    guarded
    availHeight: Number

    guarded
    availWidth: Number

    guarded
    colorDepth: Number

    guarded
    height: Number

    guarded
    orientation: ScreenOrientation

    guarded
    pixelDepth: Number

    guarded
    width: Number
  }


  /*(!) var */ Screen: object { prototype: Screen; on create(): Screen }


  type ScreenOrientationEventMap = aspect
  {
    change: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation) */

  type ScreenOrientation = aspect EventTarget
  {
    guarded
    angle: Number

    onchange: (operation(this: ScreenOrientation, ev: Event): /*(!) any */ Object?)?

    guarded
    type`: OrientationType

    operation unlock()

    operation addEventListener<K = /*(!) keyof ScreenOrientationEventMap */ Object?>(type`: K, listener: operation(this: ScreenOrientation, ev: /*(!) ScreenOrientationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof ScreenOrientationEventMap */ Object?>(type`: K, listener: operation(this: ScreenOrientation, ev: /*(!) ScreenOrientationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ ScreenOrientation: object { prototype: ScreenOrientation; on create(): ScreenOrientation }


  type ScriptProcessorNodeEventMap = aspect
  {
    audioprocess: AudioProcessingEvent
  }


  /**
  * Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent)
  */

  type SecurityPolicyViolationEvent = aspect Event
  {
    guarded
    blockedURI: Text

    guarded
    columnNumber: Number

    guarded
    disposition: SecurityPolicyViolationEventDisposition

    guarded
    documentURI: Text

    guarded
    effectiveDirective: Text

    guarded
    lineNumber: Number

    guarded
    originalPolicy: Text

    guarded
    referrer: Text

    guarded
    sample: Text

    guarded
    sourceFile: Text

    guarded
    statusCode: Number

    guarded
    violatedDirective: Text
  }


  /*(!) var */ SecurityPolicyViolationEvent: object { prototype: SecurityPolicyViolationEvent; on create(type`: Text, eventInitDict: SecurityPolicyViolationEventInit? = empty): SecurityPolicyViolationEvent }


  /**
  * A Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call Window.getSelection().
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection)
  */

  type Selection = aspect
  {
    guarded
    anchorNode: Node?

    guarded
    anchorOffset: Number

    guarded
    focusNode: Node?

    guarded
    focusOffset: Number

    guarded
    isCollapsed: YesNo

    guarded
    rangeCount: Number

    guarded
    type`: Text

    operation addRange(range: Range)

    operation collapse(node: Node?, offset: Number? = empty)

    operation collapseToEnd()

    operation collapseToStart()

    operation containsNode(node: Node, allowPartialContainment: YesNo? = empty): YesNo

    operation deleteFromDocument()

    operation empty`()

    operation extend(node: Node, offset: Number? = empty)

    operation getRangeAt(index: Number): Range

    operation modify(alter: Text? = empty, direction: Text? = empty, granularity: Text? = empty)

    operation removeAllRanges()

    operation removeRange(range: Range)

    operation selectAllChildren(node: Node)

    operation setBaseAndExtent(anchorNode: Node, anchorOffset: Number, focusNode: Node, focusOffset: Number)

    operation setPosition(node: Node?, offset: Number? = empty)

    operation toString(): Text
  }


  /*(!) var */ Selection: object { prototype: Selection; on create(): Selection }


  type ServiceWorkerEventMap = aspect AbstractWorkerEventMap
  {
    statechange: Event
  }


  /**
  * This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker)
  */

  type ServiceWorker = aspect EventTarget, AbstractWorker
  {
    onstatechange: (operation(this: ServiceWorker, ev: Event): /*(!) any */ Object?)?

    guarded
    scriptURL: Text

    guarded
    state: ServiceWorkerState

    operation postMessage(message: /*(!) any */ Object?, transfer: Список<Transferable>)

    operation postMessage(message: /*(!) any */ Object?, options: StructuredSerializeOptions? = empty)

    operation addEventListener<K = /*(!) keyof ServiceWorkerEventMap */ Object?>(type`: K, listener: operation(this: ServiceWorker, ev: /*(!) ServiceWorkerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof ServiceWorkerEventMap */ Object?>(type`: K, listener: operation(this: ServiceWorker, ev: /*(!) ServiceWorkerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ ServiceWorker: object { prototype: ServiceWorker; on create(): ServiceWorker }


  type ServiceWorkerContainerEventMap = aspect
  {
    controllerchange: Event

    message: MessageEvent

    messageerror: MessageEvent
  }


  /**
  * The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer)
  */

  type ServiceWorkerContainer = aspect EventTarget
  {
    guarded
    controller: ServiceWorker?

    oncontrollerchange: (operation(this: ServiceWorkerContainer, ev: Event): /*(!) any */ Object?)?

    onmessage: (operation(this: ServiceWorkerContainer, ev: MessageEvent): /*(!) any */ Object?)?

    onmessageerror: (operation(this: ServiceWorkerContainer, ev: MessageEvent): /*(!) any */ Object?)?

    guarded
    ready: Promise<ServiceWorkerRegistration>

    operation getRegistration(clientURL: Object? /*(!)Текст | URL | пусто*/ = empty): Promise<ServiceWorkerRegistration?>

    operation getRegistrations(): Promise<ReadonlyArray<ServiceWorkerRegistration>>

    operation register(scriptURL: Object? /*(!)Текст | URL*/, options: RegistrationOptions? = empty): Promise<ServiceWorkerRegistration>

    operation startMessages()

    operation addEventListener<K = /*(!) keyof ServiceWorkerContainerEventMap */ Object?>(type`: K, listener: operation(this: ServiceWorkerContainer, ev: /*(!) ServiceWorkerContainerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof ServiceWorkerContainerEventMap */ Object?>(type`: K, listener: operation(this: ServiceWorkerContainer, ev: /*(!) ServiceWorkerContainerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ ServiceWorkerContainer: object { prototype: ServiceWorkerContainer; on create(): ServiceWorkerContainer }


  type ServiceWorkerRegistrationEventMap = aspect
  {
    updatefound: Event
  }


  /**
  * This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin.
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration)
  */

  type ServiceWorkerRegistration = aspect EventTarget
  {
    guarded
    active: ServiceWorker?

    guarded
    installing: ServiceWorker?

    guarded
    navigationPreload: NavigationPreloadManager

    onupdatefound: (operation(this: ServiceWorkerRegistration, ev: Event): /*(!) any */ Object?)?

    guarded
    pushManager: PushManager

    guarded
    scope: Text

    guarded
    updateViaCache: ServiceWorkerUpdateViaCache

    guarded
    waiting: ServiceWorker?

    operation getNotifications(filter: GetNotificationOptions? = empty): Promise<Список<Notification>>

    operation showNotification(title: Text, options: NotificationOptions? = empty): Promise<Ничего>

    operation unregister(): Promise<ДаНет>

    operation update(): Promise<Ничего>

    operation addEventListener<K = /*(!) keyof ServiceWorkerRegistrationEventMap */ Object?>(type`: K, listener: operation(this: ServiceWorkerRegistration, ev: /*(!) ServiceWorkerRegistrationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof ServiceWorkerRegistrationEventMap */ Object?>(type`: K, listener: operation(this: ServiceWorkerRegistration, ev: /*(!) ServiceWorkerRegistrationEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ ServiceWorkerRegistration: object { prototype: ServiceWorkerRegistration; on create(): ServiceWorkerRegistration }


  type ShadowRootEventMap = aspect
  {
    slotchange: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot) */

  type ShadowRoot = aspect DocumentFragment, DocumentOrShadowRoot, InnerHTML
  {
    guarded
    delegatesFocus: YesNo

    guarded
    host: Element

    guarded
    mode: ShadowRootMode

    onslotchange: (operation(this: ShadowRoot, ev: Event): /*(!) any */ Object?)?

    guarded
    slotAssignment: SlotAssignmentMode

    operation addEventListener<K = /*(!) keyof ShadowRootEventMap */ Object?>(type`: K, listener: operation(this: ShadowRoot, ev: /*(!) ShadowRootEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof ShadowRootEventMap */ Object?>(type`: K, listener: operation(this: ShadowRoot, ev: /*(!) ShadowRootEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ ShadowRoot: object { prototype: ShadowRoot; on create(): ShadowRoot }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker) */

  type SharedWorker = aspect EventTarget, AbstractWorker
  {
    guarded
    port: MessagePort

    operation addEventListener<K = /*(!) keyof AbstractWorkerEventMap */ Object?>(type`: K, listener: operation(this: SharedWorker, ev: /*(!) AbstractWorkerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof AbstractWorkerEventMap */ Object?>(type`: K, listener: operation(this: SharedWorker, ev: /*(!) AbstractWorkerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SharedWorker: object { prototype: SharedWorker; on create(scriptURL: Object? /*(!)Текст | URL*/, options: Object? /*(!)Текст | WorkerOptions | пусто*/ = empty): SharedWorker }


  type Slottable = aspect
  {
    guarded
    assignedSlot: HTMLSlotElement?
  }


  type SourceBufferEventMap = aspect
  {
    abort: Event

    error`: Event

    update: Event

    updateend: Event

    updatestart: Event
  }


  /**
  * A chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer)
  */

  type SourceBuffer = aspect EventTarget
  {
    appendWindowEnd: Number

    appendWindowStart: Number

    guarded
    buffered: TimeRanges

    mode: AppendMode

    onabort: (operation(this: SourceBuffer, ev: Event): /*(!) any */ Object?)?

    onerror: (operation(this: SourceBuffer, ev: Event): /*(!) any */ Object?)?

    onupdate: (operation(this: SourceBuffer, ev: Event): /*(!) any */ Object?)?

    onupdateend: (operation(this: SourceBuffer, ev: Event): /*(!) any */ Object?)?

    onupdatestart: (operation(this: SourceBuffer, ev: Event): /*(!) any */ Object?)?

    timestampOffset: Number

    guarded
    updating: YesNo

    operation abort()

    operation appendBuffer(data: BufferSource)

    operation changeType(type`: Text)

    operation remove(start: Number, end: Number)

    operation addEventListener<K = /*(!) keyof SourceBufferEventMap */ Object?>(type`: K, listener: operation(this: SourceBuffer, ev: /*(!) SourceBufferEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SourceBufferEventMap */ Object?>(type`: K, listener: operation(this: SourceBuffer, ev: /*(!) SourceBufferEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SourceBuffer: object { prototype: SourceBuffer; on create(): SourceBuffer }


  type SourceBufferListEventMap = aspect
  {
    addsourcebuffer: Event

    removesourcebuffer: Event
  }


  /**
  * A simple container list for multiple SourceBuffer objects.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList)
  */

  type SourceBufferList = aspect EventTarget
  {
    guarded
    length: Number

    onaddsourcebuffer: (operation(this: SourceBufferList, ev: Event): /*(!) any */ Object?)?

    onremovesourcebuffer: (operation(this: SourceBufferList, ev: Event): /*(!) any */ Object?)?

    operation addEventListener<K = /*(!) keyof SourceBufferListEventMap */ Object?>(type`: K, listener: operation(this: SourceBufferList, ev: /*(!) SourceBufferListEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SourceBufferListEventMap */ Object?>(type`: K, listener: operation(this: SourceBufferList, ev: /*(!) SourceBufferListEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    /*(!) [index: number]: SourceBuffer*/
  }


  /*(!) var */ SourceBufferList: object { prototype: SourceBufferList; on create(): SourceBufferList }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative) */

  type SpeechRecognitionAlternative = aspect
  {
    guarded
    confidence: Number

    guarded
    transcript: Text
  }


  /*(!) var */ SpeechRecognitionAlternative: object { prototype: SpeechRecognitionAlternative; on create(): SpeechRecognitionAlternative }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult) */

  type SpeechRecognitionResult = aspect
  {
    guarded
    isFinal: YesNo

    guarded
    length: Number

    operation item(index: Number): SpeechRecognitionAlternative

    /*(!) [index: number]: SpeechRecognitionAlternative*/
  }


  /*(!) var */ SpeechRecognitionResult: object { prototype: SpeechRecognitionResult; on create(): SpeechRecognitionResult }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList) */

  type SpeechRecognitionResultList = aspect
  {
    guarded
    length: Number

    operation item(index: Number): SpeechRecognitionResult

    /*(!) [index: number]: SpeechRecognitionResult*/
  }


  /*(!) var */ SpeechRecognitionResultList: object { prototype: SpeechRecognitionResultList; on create(): SpeechRecognitionResultList }


  type SpeechSynthesisEventMap = aspect
  {
    voiceschanged: Event
  }


  /**
  * This Web Speech API interface is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis)
  */

  type SpeechSynthesis = aspect EventTarget
  {
    onvoiceschanged: (operation(this: SpeechSynthesis, ev: Event): /*(!) any */ Object?)?

    guarded
    paused: YesNo

    guarded
    pending: YesNo

    guarded
    speaking: YesNo

    operation cancel()

    operation getVoices(): Список<SpeechSynthesisVoice>

    operation pause()

    operation resume()

    operation speak(utterance: SpeechSynthesisUtterance)

    operation addEventListener<K = /*(!) keyof SpeechSynthesisEventMap */ Object?>(type`: K, listener: operation(this: SpeechSynthesis, ev: /*(!) SpeechSynthesisEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SpeechSynthesisEventMap */ Object?>(type`: K, listener: operation(this: SpeechSynthesis, ev: /*(!) SpeechSynthesisEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SpeechSynthesis: object { prototype: SpeechSynthesis; on create(): SpeechSynthesis }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent) */

  type SpeechSynthesisErrorEvent = aspect SpeechSynthesisEvent
  {
    guarded
    error`: SpeechSynthesisErrorCode
  }


  /*(!) var */ SpeechSynthesisErrorEvent: object { prototype: SpeechSynthesisErrorEvent; on create(type`: Text, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent }


  /**
  * This Web Speech API interface contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent)
  */

  type SpeechSynthesisEvent = aspect Event
  {
    guarded
    charIndex: Number

    guarded
    charLength: Number

    guarded
    elapsedTime: Number

    guarded
    name: Text

    guarded
    utterance: SpeechSynthesisUtterance
  }


  /*(!) var */ SpeechSynthesisEvent: object { prototype: SpeechSynthesisEvent; on create(type`: Text, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent }


  type SpeechSynthesisUtteranceEventMap = aspect
  {
    boundary: SpeechSynthesisEvent

    end: SpeechSynthesisEvent

    error`: SpeechSynthesisErrorEvent

    mark: SpeechSynthesisEvent

    pause: SpeechSynthesisEvent

    resume: SpeechSynthesisEvent

    start: SpeechSynthesisEvent
  }


  /**
  * This Web Speech API interface represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance)
  */

  type SpeechSynthesisUtterance = aspect EventTarget
  {
    lang: Text

    onboundary: (operation(this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent): /*(!) any */ Object?)?

    onend: (operation(this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent): /*(!) any */ Object?)?

    onerror: (operation(this: SpeechSynthesisUtterance, ev: SpeechSynthesisErrorEvent): /*(!) any */ Object?)?

    onmark: (operation(this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent): /*(!) any */ Object?)?

    onpause: (operation(this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent): /*(!) any */ Object?)?

    onresume: (operation(this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent): /*(!) any */ Object?)?

    onstart: (operation(this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent): /*(!) any */ Object?)?

    pitch: Number

    rate: Number

    text: Text

    voice: SpeechSynthesisVoice?

    volume: Number

    operation addEventListener<K = /*(!) keyof SpeechSynthesisUtteranceEventMap */ Object?>(type`: K, listener: operation(this: SpeechSynthesisUtterance, ev: /*(!) SpeechSynthesisUtteranceEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof SpeechSynthesisUtteranceEventMap */ Object?>(type`: K, listener: operation(this: SpeechSynthesisUtterance, ev: /*(!) SpeechSynthesisUtteranceEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ SpeechSynthesisUtterance: object { prototype: SpeechSynthesisUtterance; on create(text: Text? = empty): SpeechSynthesisUtterance }


  /**
  * This Web Speech API interface represents a voice that the system supports. Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice)
  */

  type SpeechSynthesisVoice = aspect
  {
    guarded
    default: YesNo

    guarded
    lang: Text

    guarded
    localService: YesNo

    guarded
    name: Text

    guarded
    voiceURI: Text
  }


  /*(!) var */ SpeechSynthesisVoice: object { prototype: SpeechSynthesisVoice; on create(): SpeechSynthesisVoice }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/StaticRange) */

  type StaticRange = aspect AbstractRange
  {

  }


  /*(!) var */ StaticRange: object { prototype: StaticRange; on create(init: StaticRangeInit): StaticRange }


  /**
  * The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode)
  */

  type StereoPannerNode = aspect AudioNode
  {
    guarded
    pan: AudioParam
  }


  /*(!) var */ StereoPannerNode: object { prototype: StereoPannerNode; on create(context: BaseAudioContext, options: StereoPannerOptions? = empty): StereoPannerNode }


  /**
  * This Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage)
  */

  type Storage = aspect
  {
    guarded
    length: Number

    operation clear()

    operation getItem(key: Text): Text?

    operation key(index: Number): Text?

    operation removeItem(key: Text)

    operation setItem(key: Text, value: Text)

    /*(!) [name: string]: any*/
  }


  /*(!) var */ Storage: object { prototype: Storage; on create(): Storage }


  /**
  * A StorageEvent is sent to a window when a storage area it has access to is changed within the context of another document.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent)
  */

  type StorageEvent = aspect Event
  {

  }


  /*(!) var */ StorageEvent: object { prototype: StorageEvent; on create(type`: Text, eventInitDict: StorageEventInit? = empty): StorageEvent }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager)
  */

  type StorageManager = aspect
  {
    operation estimate(): Promise<StorageEstimate>

    operation getDirectory(): Promise<FileSystemDirectoryHandle>

    operation persist(): Promise<ДаНет>

    operation persisted(): Promise<ДаНет>
  }


  /*(!) var */ StorageManager: object { prototype: StorageManager; on create(): StorageManager }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap) */

  type StylePropertyMap = aspect StylePropertyMapReadOnly
  {
    #js.МассивПараметров
    operation append(property: Text, values: Список<Object? /*(!)CSSStyleValue | Текст*/>)

    operation clear()

    operation delete(property: Text)

    #js.МассивПараметров
    operation set(property: Text, values: Список<Object? /*(!)CSSStyleValue | Текст*/>)
  }


  /*(!) var */ StylePropertyMap: object { prototype: StylePropertyMap; on create(): StylePropertyMap }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly) */

  type StylePropertyMapReadOnly = aspect
  {
    guarded
    size: Number

    operation get(property: Text): CSSStyleValue?

    operation getAll(property: Text): Список<CSSStyleValue>

    operation has(property: Text): YesNo

    operation forEach(callbackfn: operation(value: Список<CSSStyleValue>, key: Text, parent: StylePropertyMapReadOnly), thisArg: /*(!) any */ Object? = empty)
  }


  /*(!) var */ StylePropertyMapReadOnly: object { prototype: StylePropertyMapReadOnly; on create(): StylePropertyMapReadOnly }


  /**
  * A single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet)
  */

  type StyleSheet = aspect
  {
    disabled: YesNo

    guarded
    href: Text?

    guarded
    media: MediaList

    guarded
    ownerNode: Object? /*(!)Element | ProcessingInstruction | пусто*/

    guarded
    parentStyleSheet: CSSStyleSheet?

    guarded
    title: Text?

    guarded
    type`: Text
  }


  /*(!) var */ StyleSheet: object { prototype: StyleSheet; on create(): StyleSheet }


  /**
  * A list of StyleSheet.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList)
  */

  type StyleSheetList = aspect
  {
    guarded
    length: Number

    operation item(index: Number): CSSStyleSheet?

    /*(!) [index: number]: CSSStyleSheet*/
  }


  /*(!) var */ StyleSheetList: object { prototype: StyleSheetList; on create(): StyleSheetList }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent) */

  type SubmitEvent = aspect Event
  {
    guarded
    submitter: HTMLElement?
  }


  /*(!) var */ SubmitEvent: object { prototype: SubmitEvent; on create(type`: Text, eventInitDict: SubmitEventInit? = empty): SubmitEvent }


  /**
  * This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).
  * Available only in secure contexts.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)
  */

  type SubtleCrypto = aspect
  {
    operation decrypt(algorithm: Object? /*(!)AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams*/, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>

    operation deriveBits(algorithm: Object? /*(!)AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params*/, baseKey: CryptoKey, length: Number): Promise<ArrayBuffer>

    operation deriveKey(algorithm: Object? /*(!)AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params*/, baseKey: CryptoKey, derivedKeyType: Object? /*(!)AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params*/, extractable: YesNo, keyUsages: Список<KeyUsage>): Promise<CryptoKey>

    operation digest(algorithm: AlgorithmIdentifier, data: BufferSource): Promise<ArrayBuffer>

    operation encrypt(algorithm: Object? /*(!)AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams*/, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>

    operation exportKey(format: "jwk", key: CryptoKey): Promise<JsonWebKey>

    operation exportKey(format: Exclude<KeyFormat, "jwk">, key: CryptoKey): Promise<ArrayBuffer>

    operation exportKey(format: KeyFormat, key: CryptoKey): Promise<Object? /*(!)ArrayBuffer | JsonWebKey*/>

    operation generateKey(algorithm: "Ed25519", extractable: YesNo, keyUsages: ReadonlyArray<Object? /*(!)"sign" | "verify"*/>): Promise<CryptoKeyPair>

    operation generateKey(algorithm: Object? /*(!)RsaHashedKeyGenParams | EcKeyGenParams*/, extractable: YesNo, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>

    operation generateKey(algorithm: Object? /*(!)AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params*/, extractable: YesNo, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>

    operation generateKey(algorithm: AlgorithmIdentifier, extractable: YesNo, keyUsages: Список<KeyUsage>): Promise<Object? /*(!)CryptoKeyPair | CryptoKey*/>

    operation importKey(format: "jwk", keyData: JsonWebKey, algorithm: Object? /*(!)AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm*/, extractable: YesNo, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>

    operation importKey(format: Exclude<KeyFormat, "jwk">, keyData: BufferSource, algorithm: Object? /*(!)AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm*/, extractable: YesNo, keyUsages: Список<KeyUsage>): Promise<CryptoKey>

    operation sign(algorithm: Object? /*(!)AlgorithmIdentifier | RsaPssParams | EcdsaParams*/, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>

    operation unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: Object? /*(!)AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams*/, unwrappedKeyAlgorithm: Object? /*(!)AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm*/, extractable: YesNo, keyUsages: Список<KeyUsage>): Promise<CryptoKey>

    operation verify(algorithm: Object? /*(!)AlgorithmIdentifier | RsaPssParams | EcdsaParams*/, key: CryptoKey, signature: BufferSource, data: BufferSource): Promise<ДаНет>

    operation wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: Object? /*(!)AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams*/): Promise<ArrayBuffer>
  }


  /*(!) var */ SubtleCrypto: object { prototype: SubtleCrypto; on create(): SubtleCrypto }


  /**
  * The textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Text)
  */

  type Text = aspect CharacterData, Slottable
  {
    guarded
    wholeText: Text

    operation splitText(offset: Number): Text
  }


  /*(!) var */ Text: object { prototype: Text; on create(data: Text? = empty): Text }


  /**
  * A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder)
  */

  type TextDecoder = aspect TextDecoderCommon
  {
    operation decode(input: AllowSharedBufferSource? = empty, options: TextDecodeOptions? = empty): Text
  }


  /*(!) var */ TextDecoder: object { prototype: TextDecoder; on create(label: Text? = empty, options: TextDecoderOptions? = empty): TextDecoder }


  type TextDecoderCommon = aspect
  {
    guarded
    encoding: Text

    guarded
    fatal: YesNo

    guarded
    ignoreBOM: YesNo
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoderStream) */

  type TextDecoderStream = aspect GenericTransformStream, TextDecoderCommon
  {
    guarded
    readable: ReadableStream<Текст>

    guarded
    writable: WritableStream<BufferSource>
  }


  /*(!) var */ TextDecoderStream: object { prototype: TextDecoderStream; on create(label: Text? = empty, options: TextDecoderOptions? = empty): TextDecoderStream }


  /**
  * TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder)
  */

  type TextEncoder = aspect TextEncoderCommon
  {
    operation encode(input: Text? = empty): Uint8Array

    operation encodeInto(source: Text, destination: Uint8Array): TextEncoderEncodeIntoResult
  }


  /*(!) var */ TextEncoder: object { prototype: TextEncoder; on create(): TextEncoder }


  type TextEncoderCommon = aspect
  {
    guarded
    encoding: Text
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoderStream) */

  type TextEncoderStream = aspect GenericTransformStream, TextEncoderCommon
  {
    guarded
    readable: ReadableStream<Uint8Array>

    guarded
    writable: WritableStream<Текст>
  }


  /*(!) var */ TextEncoderStream: object { prototype: TextEncoderStream; on create(): TextEncoderStream }


  /**
  * The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics)
  */

  type TextMetrics = aspect
  {
    guarded
    actualBoundingBoxAscent: Number

    guarded
    actualBoundingBoxDescent: Number

    guarded
    actualBoundingBoxLeft: Number

    guarded
    actualBoundingBoxRight: Number

    guarded
    fontBoundingBoxAscent: Number

    guarded
    fontBoundingBoxDescent: Number

    guarded
    width: Number
  }


  /*(!) var */ TextMetrics: object { prototype: TextMetrics; on create(): TextMetrics }


  type TextTrackEventMap = aspect
  {
    cuechange: Event
  }


  /**
  * This interface also inherits properties from EventTarget.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack)
  */

  type TextTrack = aspect EventTarget
  {
    guarded
    activeCues: TextTrackCueList?

    guarded
    cues: TextTrackCueList?

    guarded
    id: Text

    guarded
    inBandMetadataTrackDispatchType: Text

    guarded
    kind: TextTrackKind

    guarded
    label: Text

    guarded
    language: Text

    mode: TextTrackMode

    oncuechange: (operation(this: TextTrack, ev: Event): /*(!) any */ Object?)?

    operation addCue(cue: TextTrackCue)

    operation removeCue(cue: TextTrackCue)

    operation addEventListener<K = /*(!) keyof TextTrackEventMap */ Object?>(type`: K, listener: operation(this: TextTrack, ev: /*(!) TextTrackEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof TextTrackEventMap */ Object?>(type`: K, listener: operation(this: TextTrack, ev: /*(!) TextTrackEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ TextTrack: object { prototype: TextTrack; on create(): TextTrack }


  type TextTrackCueEventMap = aspect
  {
    enter: Event

    exit: Event
  }


  /**
  * TextTrackCues represent a string of text that will be displayed for some duration of time on a TextTrack. This includes the start and end times that the cue will be displayed. A TextTrackCue cannot be used directly, instead one of the derived types (e.g. VTTCue) must be used.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue)
  */

  type TextTrackCue = aspect EventTarget
  {
    endTime: Number

    id: Text

    onenter: (operation(this: TextTrackCue, ev: Event): /*(!) any */ Object?)?

    onexit: (operation(this: TextTrackCue, ev: Event): /*(!) any */ Object?)?

    pauseOnExit: YesNo

    startTime: Number

    guarded
    track: TextTrack?

    operation addEventListener<K = /*(!) keyof TextTrackCueEventMap */ Object?>(type`: K, listener: operation(this: TextTrackCue, ev: /*(!) TextTrackCueEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof TextTrackCueEventMap */ Object?>(type`: K, listener: operation(this: TextTrackCue, ev: /*(!) TextTrackCueEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ TextTrackCue: object { prototype: TextTrackCue; on create(): TextTrackCue }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList) */

  type TextTrackCueList = aspect
  {
    guarded
    length: Number

    operation getCueById(id: Text): TextTrackCue?

    /*(!) [index: number]: TextTrackCue*/
  }


  /*(!) var */ TextTrackCueList: object { prototype: TextTrackCueList; on create(): TextTrackCueList }


  type TextTrackListEventMap = aspect
  {
    addtrack: TrackEvent

    change: Event

    removetrack: TrackEvent
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList) */

  type TextTrackList = aspect EventTarget
  {
    guarded
    length: Number

    onaddtrack: (operation(this: TextTrackList, ev: TrackEvent): /*(!) any */ Object?)?

    onchange: (operation(this: TextTrackList, ev: Event): /*(!) any */ Object?)?

    onremovetrack: (operation(this: TextTrackList, ev: TrackEvent): /*(!) any */ Object?)?

    operation getTrackById(id: Text): TextTrack?

    operation addEventListener<K = /*(!) keyof TextTrackListEventMap */ Object?>(type`: K, listener: operation(this: TextTrackList, ev: /*(!) TextTrackListEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof TextTrackListEventMap */ Object?>(type`: K, listener: operation(this: TextTrackList, ev: /*(!) TextTrackListEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    /*(!) [index: number]: TextTrack*/
  }


  /*(!) var */ TextTrackList: object { prototype: TextTrackList; on create(): TextTrackList }


  /**
  * Used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video> elements.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges)
  */

  type TimeRanges = aspect
  {
    guarded
    length: Number

    operation end(index: Number): Number

    operation start(index: Number): Number
  }


  /*(!) var */ TimeRanges: object { prototype: TimeRanges; on create(): TimeRanges }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent) */

  type ToggleEvent = aspect Event
  {
    guarded
    newState: Text

    guarded
    oldState: Text
  }


  /*(!) var */ ToggleEvent: object { prototype: ToggleEvent; on create(type`: Text, eventInitDict: ToggleEventInit? = empty): ToggleEvent }


  /**
  * A single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch)
  */

  type Touch = aspect
  {
    guarded
    clientX: Number

    guarded
    clientY: Number

    guarded
    force: Number

    guarded
    identifier: Number

    guarded
    pageX: Number

    guarded
    pageY: Number

    guarded
    radiusX: Number

    guarded
    radiusY: Number

    guarded
    rotationAngle: Number

    guarded
    screenX: Number

    guarded
    screenY: Number

    guarded
    target: EventTarget
  }


  /*(!) var */ Touch: object { prototype: Touch; on create(touchInitDict: TouchInit): Touch }


  /**
  * An event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent)
  */

  type TouchEvent = aspect UIEvent
  {
    guarded
    altKey: YesNo

    guarded
    changedTouches: TouchList

    guarded
    ctrlKey: YesNo

    guarded
    metaKey: YesNo

    guarded
    shiftKey: YesNo

    guarded
    targetTouches: TouchList

    guarded
    touches: TouchList
  }


  /*(!) var */ TouchEvent: object { prototype: TouchEvent; on create(type`: Text, eventInitDict: TouchEventInit? = empty): TouchEvent }


  /**
  * A list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList)
  */

  type TouchList = aspect
  {
    guarded
    length: Number

    operation item(index: Number): Touch?

    /*(!) [index: number]: Touch*/
  }


  /*(!) var */ TouchList: object { prototype: TouchList; on create(): TouchList }


  /**
  * The TrackEvent interface, part of the HTML DOM specification, is used for events which represent changes to the set of available tracks on an HTML media element; these events are addtrack and removetrack.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent)
  */

  type TrackEvent = aspect Event
  {
    guarded
    track: TextTrack?
  }


  /*(!) var */ TrackEvent: object { prototype: TrackEvent; on create(type`: Text, eventInitDict: TrackEventInit? = empty): TrackEvent }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream) */

  type TransformStream<I, O> = aspect
  {
    guarded
    readable: ReadableStream<O>

    guarded
    writable: WritableStream<I>
  }


  /*(!) var */ TransformStream: object { prototype: TransformStream; on create(transformer: Transformer<I, O>? = empty, writableStrategy: QueuingStrategy<I>? = empty, readableStrategy: QueuingStrategy<O>? = empty): TransformStream<I, O> }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController) */

  type TransformStreamDefaultController<O> = aspect
  {
    guarded
    desiredSize: Number?

    operation enqueue(chunk: O? = empty)

    operation error`(reason: /*(!) any */ Object? = empty)

    operation terminate()
  }


  /*(!) var */ TransformStreamDefaultController: object { prototype: TransformStreamDefaultController; on create(): TransformStreamDefaultController }


  /**
  * Events providing information related to transitions.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent)
  */

  type TransitionEvent = aspect Event
  {
    guarded
    elapsedTime: Number

    guarded
    propertyName: Text

    guarded
    pseudoElement: Text
  }


  /*(!) var */ TransitionEvent: object { prototype: TransitionEvent; on create(type`: Text, transitionEventInitDict: TransitionEventInit? = empty): TransitionEvent }


  /**
  * The nodes of a document subtree and a position within them.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker)
  */

  type TreeWalker = aspect
  {
    currentNode: Node

    guarded
    filter: NodeFilter?

    guarded
    root: Node

    guarded
    whatToShow: Number

    operation firstChild(): Node?

    operation lastChild(): Node?

    operation nextNode(): Node?

    operation nextSibling(): Node?

    operation parentNode(): Node?

    operation previousNode(): Node?

    operation previousSibling(): Node?
  }


  /*(!) var */ TreeWalker: object { prototype: TreeWalker; on create(): TreeWalker }


  /**
  * Simple user interface events.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent)
  */

  type UIEvent = aspect Event
  {

  }


  /*(!) var */ UIEvent: object { prototype: UIEvent; on create(type`: Text, eventInitDict: UIEventInit? = empty): UIEvent }


  /**
  * The URL interface represents an object providing static methods used for creating object URLs.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)
  */

  type URL = aspect
  {
    hash: Text

    host: Text

    hostname: Text

    href: Text

    operation toString(): Text

    guarded
    origin: Text

    password: Text

    pathname: Text

    port: Text

    protocol: Text

    search: Text

    guarded
    searchParams: URLSearchParams

    username: Text

    operation toJSON(): Text
  }


  /*(!) var */ URL: object { prototype: URL; on create(url: Object? /*(!)Текст | URL*/, base: Object? /*(!)Текст | URL | пусто*/ = empty): URL; operation canParse(url: Object? /*(!)Текст | URL*/, base: Text? = empty): YesNo; operation createObjectURL(obj: Object? /*(!)Blob | MediaSource*/): Text; operation revokeObjectURL(url: Text) }


  type webkitURL = URL

  /*(!) var */ webkitURL: /*(!) typeof URL */ Object?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams) */

  type URLSearchParams = aspect
  {
    guarded
    size: Number

    operation append(name: Text, value: Text)

    operation delete(name: Text, value: Text? = empty)

    operation get(name: Text): Text?

    operation getAll(name: Text): Список<Текст>

    operation has(name: Text, value: Text? = empty): YesNo

    operation set(name: Text, value: Text)

    operation sort()

    operation toString(): Text

    operation forEach(callbackfn: operation(value: Text, key: Text, parent: URLSearchParams), thisArg: /*(!) any */ Object? = empty)
  }


  /*(!) var */ URLSearchParams: object { prototype: URLSearchParams; on create(init: Object? /*(!)Список<Список<Текст>> | Record<Текст, Текст> | Текст | URLSearchParams | пусто*/ = empty): URLSearchParams }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation) */

  type UserActivation = aspect
  {
    guarded
    hasBeenActive: YesNo

    guarded
    isActive: YesNo
  }


  /*(!) var */ UserActivation: object { prototype: UserActivation; on create(): UserActivation }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue) */

  type VTTCue = aspect TextTrackCue
  {
    align: AlignSetting

    line: LineAndPositionSetting

    lineAlign: LineAlignSetting

    position: LineAndPositionSetting

    positionAlign: PositionAlignSetting

    region: VTTRegion?

    size: Number

    snapToLines: YesNo

    text: Text

    vertical: DirectionSetting

    operation getCueAsHTML(): DocumentFragment

    operation addEventListener<K = /*(!) keyof TextTrackCueEventMap */ Object?>(type`: K, listener: operation(this: VTTCue, ev: /*(!) TextTrackCueEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof TextTrackCueEventMap */ Object?>(type`: K, listener: operation(this: VTTCue, ev: /*(!) TextTrackCueEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ VTTCue: object { prototype: VTTCue; on create(startTime: Number, endTime: Number, text: Text): VTTCue }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion) */

  type VTTRegion = aspect
  {
    id: Text

    lines: Number

    regionAnchorX: Number

    regionAnchorY: Number

    scroll: ScrollSetting

    viewportAnchorX: Number

    viewportAnchorY: Number

    width: Number
  }


  /*(!) var */ VTTRegion: object { prototype: VTTRegion; on create(): VTTRegion }


  /**
  * The validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState)
  */

  type ValidityState = aspect
  {
    guarded
    badInput: YesNo

    guarded
    customError: YesNo

    guarded
    patternMismatch: YesNo

    guarded
    rangeOverflow: YesNo

    guarded
    rangeUnderflow: YesNo

    guarded
    stepMismatch: YesNo

    guarded
    tooLong: YesNo

    guarded
    tooShort: YesNo

    guarded
    typeMismatch: YesNo

    guarded
    valid: YesNo

    guarded
    valueMissing: YesNo
  }


  /*(!) var */ ValidityState: object { prototype: ValidityState; on create(): ValidityState }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace) */

  type VideoColorSpace = aspect
  {
    guarded
    fullRange: YesNo?

    guarded
    matrix: VideoMatrixCoefficients?

    guarded
    primaries: VideoColorPrimaries?

    guarded
    transfer: VideoTransferCharacteristics?

    operation toJSON(): VideoColorSpaceInit
  }


  /*(!) var */ VideoColorSpace: object { prototype: VideoColorSpace; on create(init: VideoColorSpaceInit? = empty): VideoColorSpace }


  type VideoDecoderEventMap = aspect
  {
    dequeue: Event
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder)
  */

  type VideoDecoder = aspect EventTarget
  {
    guarded
    decodeQueueSize: Number

    ondequeue: (operation(this: VideoDecoder, ev: Event): /*(!) any */ Object?)?

    guarded
    state: CodecState

    operation close()

    operation configure(config: VideoDecoderConfig)

    operation decode(chunk: EncodedVideoChunk)

    operation flush(): Promise<Ничего>

    operation reset()

    operation addEventListener<K = /*(!) keyof VideoDecoderEventMap */ Object?>(type`: K, listener: operation(this: VideoDecoder, ev: /*(!) VideoDecoderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof VideoDecoderEventMap */ Object?>(type`: K, listener: operation(this: VideoDecoder, ev: /*(!) VideoDecoderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ VideoDecoder: object { prototype: VideoDecoder; on create(init: VideoDecoderInit): VideoDecoder; operation isConfigSupported(config: VideoDecoderConfig): Promise<VideoDecoderSupport> }


  type VideoEncoderEventMap = aspect
  {
    dequeue: Event
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder)
  */

  type VideoEncoder = aspect EventTarget
  {
    guarded
    encodeQueueSize: Number

    ondequeue: (operation(this: VideoEncoder, ev: Event): /*(!) any */ Object?)?

    guarded
    state: CodecState

    operation close()

    operation configure(config: VideoEncoderConfig)

    operation encode(frame: VideoFrame, options: VideoEncoderEncodeOptions? = empty)

    operation flush(): Promise<Ничего>

    operation reset()

    operation addEventListener<K = /*(!) keyof VideoEncoderEventMap */ Object?>(type`: K, listener: operation(this: VideoEncoder, ev: /*(!) VideoEncoderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof VideoEncoderEventMap */ Object?>(type`: K, listener: operation(this: VideoEncoder, ev: /*(!) VideoEncoderEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ VideoEncoder: object { prototype: VideoEncoder; on create(init: VideoEncoderInit): VideoEncoder; operation isConfigSupported(config: VideoEncoderConfig): Promise<VideoEncoderSupport> }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame) */

  type VideoFrame = aspect
  {
    guarded
    codedHeight: Number

    guarded
    codedRect: DOMRectReadOnly?

    guarded
    codedWidth: Number

    guarded
    colorSpace: VideoColorSpace

    guarded
    displayHeight: Number

    guarded
    displayWidth: Number

    guarded
    duration: Number?

    guarded
    format: VideoPixelFormat?

    guarded
    timestamp: Number

    guarded
    visibleRect: DOMRectReadOnly?

    operation allocationSize(options: VideoFrameCopyToOptions? = empty): Number

    operation clone(): VideoFrame

    operation close()

    operation copyTo(destination: BufferSource, options: VideoFrameCopyToOptions? = empty): Promise<Список<PlaneLayout>>
  }


  /*(!) var */ VideoFrame: object { prototype: VideoFrame; on create(image: CanvasImageSource, init: VideoFrameInit? = empty): VideoFrame; on create(data: BufferSource, init: VideoFrameBufferInit): VideoFrame }


  /**
  * Returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality)
  */

  type VideoPlaybackQuality = aspect
  {

  }


  /*(!) var */ VideoPlaybackQuality: object { prototype: VideoPlaybackQuality; on create(): VideoPlaybackQuality }


  type VisualViewportEventMap = aspect
  {
    resize: Event

    scroll: Event
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport) */

  type VisualViewport = aspect EventTarget
  {
    guarded
    height: Number

    guarded
    offsetLeft: Number

    guarded
    offsetTop: Number

    onresize: (operation(this: VisualViewport, ev: Event): /*(!) any */ Object?)?

    onscroll: (operation(this: VisualViewport, ev: Event): /*(!) any */ Object?)?

    guarded
    pageLeft: Number

    guarded
    pageTop: Number

    guarded
    scale: Number

    guarded
    width: Number

    operation addEventListener<K = /*(!) keyof VisualViewportEventMap */ Object?>(type`: K, listener: operation(this: VisualViewport, ev: /*(!) VisualViewportEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof VisualViewportEventMap */ Object?>(type`: K, listener: operation(this: VisualViewport, ev: /*(!) VisualViewportEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ VisualViewport: object { prototype: VisualViewport; on create(): VisualViewport }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_color_buffer_float) */

  type WEBGL_color_buffer_float = aspect
  {
    guarded
    RGBA32F_EXT = 0x8814

    guarded
    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211

    guarded
    UNSIGNED_NORMALIZED_EXT = 0x8C17
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc) */

  type WEBGL_compressed_texture_astc = aspect
  {
    operation getSupportedProfiles(): Список<Текст>

    guarded
    COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0

    guarded
    COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1

    guarded
    COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2

    guarded
    COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3

    guarded
    COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4

    guarded
    COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5

    guarded
    COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6

    guarded
    COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7

    guarded
    COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8

    guarded
    COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9

    guarded
    COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA

    guarded
    COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB

    guarded
    COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC

    guarded
    COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC

    guarded
    COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc) */

  type WEBGL_compressed_texture_etc = aspect
  {
    guarded
    COMPRESSED_R11_EAC = 0x9270

    guarded
    COMPRESSED_SIGNED_R11_EAC = 0x9271

    guarded
    COMPRESSED_RG11_EAC = 0x9272

    guarded
    COMPRESSED_SIGNED_RG11_EAC = 0x9273

    guarded
    COMPRESSED_RGB8_ETC2 = 0x9274

    guarded
    COMPRESSED_SRGB8_ETC2 = 0x9275

    guarded
    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276

    guarded
    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277

    guarded
    COMPRESSED_RGBA8_ETC2_EAC = 0x9278

    guarded
    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc1) */

  type WEBGL_compressed_texture_etc1 = aspect
  {
    guarded
    COMPRESSED_RGB_ETC1_WEBGL = 0x8D64
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_pvrtc) */

  type WEBGL_compressed_texture_pvrtc = aspect
  {
    guarded
    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00

    guarded
    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01

    guarded
    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02

    guarded
    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03
  }


  /**
  * The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc)
  */

  type WEBGL_compressed_texture_s3tc = aspect
  {
    guarded
    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0

    guarded
    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1

    guarded
    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2

    guarded
    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb) */

  type WEBGL_compressed_texture_s3tc_srgb = aspect
  {
    guarded
    COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C

    guarded
    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D

    guarded
    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E

    guarded
    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F
  }


  /**
  * The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_renderer_info)
  */

  type WEBGL_debug_renderer_info = aspect
  {
    guarded
    UNMASKED_VENDOR_WEBGL = 0x9245

    guarded
    UNMASKED_RENDERER_WEBGL = 0x9246
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders) */

  type WEBGL_debug_shaders = aspect
  {
    operation getTranslatedShaderSource(shader: WebGLShader): Text
  }


  /**
  * The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_depth_texture)
  */

  type WEBGL_depth_texture = aspect
  {
    guarded
    UNSIGNED_INT_24_8_WEBGL = 0x84FA
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers) */

  type WEBGL_draw_buffers = aspect
  {
    operation drawBuffersWEBGL(buffers: Список<GLenum>)

    guarded
    COLOR_ATTACHMENT0_WEBGL = 0x8CE0

    guarded
    COLOR_ATTACHMENT1_WEBGL = 0x8CE1

    guarded
    COLOR_ATTACHMENT2_WEBGL = 0x8CE2

    guarded
    COLOR_ATTACHMENT3_WEBGL = 0x8CE3

    guarded
    COLOR_ATTACHMENT4_WEBGL = 0x8CE4

    guarded
    COLOR_ATTACHMENT5_WEBGL = 0x8CE5

    guarded
    COLOR_ATTACHMENT6_WEBGL = 0x8CE6

    guarded
    COLOR_ATTACHMENT7_WEBGL = 0x8CE7

    guarded
    COLOR_ATTACHMENT8_WEBGL = 0x8CE8

    guarded
    COLOR_ATTACHMENT9_WEBGL = 0x8CE9

    guarded
    COLOR_ATTACHMENT10_WEBGL = 0x8CEA

    guarded
    COLOR_ATTACHMENT11_WEBGL = 0x8CEB

    guarded
    COLOR_ATTACHMENT12_WEBGL = 0x8CEC

    guarded
    COLOR_ATTACHMENT13_WEBGL = 0x8CED

    guarded
    COLOR_ATTACHMENT14_WEBGL = 0x8CEE

    guarded
    COLOR_ATTACHMENT15_WEBGL = 0x8CEF

    guarded
    DRAW_BUFFER0_WEBGL = 0x8825

    guarded
    DRAW_BUFFER1_WEBGL = 0x8826

    guarded
    DRAW_BUFFER2_WEBGL = 0x8827

    guarded
    DRAW_BUFFER3_WEBGL = 0x8828

    guarded
    DRAW_BUFFER4_WEBGL = 0x8829

    guarded
    DRAW_BUFFER5_WEBGL = 0x882A

    guarded
    DRAW_BUFFER6_WEBGL = 0x882B

    guarded
    DRAW_BUFFER7_WEBGL = 0x882C

    guarded
    DRAW_BUFFER8_WEBGL = 0x882D

    guarded
    DRAW_BUFFER9_WEBGL = 0x882E

    guarded
    DRAW_BUFFER10_WEBGL = 0x882F

    guarded
    DRAW_BUFFER11_WEBGL = 0x8830

    guarded
    DRAW_BUFFER12_WEBGL = 0x8831

    guarded
    DRAW_BUFFER13_WEBGL = 0x8832

    guarded
    DRAW_BUFFER14_WEBGL = 0x8833

    guarded
    DRAW_BUFFER15_WEBGL = 0x8834

    guarded
    MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF

    guarded
    MAX_DRAW_BUFFERS_WEBGL = 0x8824
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context) */

  type WEBGL_lose_context = aspect
  {
    operation loseContext()

    operation restoreContext()
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw) */

  type WEBGL_multi_draw = aspect
  {
    operation multiDrawArraysInstancedWEBGL(mode: GLenum, firstsList: Object? /*(!)Int32Array | Список<GLint>*/, firstsOffset: GLuint, countsList: Object? /*(!)Int32Array | Список<GLsizei>*/, countsOffset: GLuint, instanceCountsList: Object? /*(!)Int32Array | Список<GLsizei>*/, instanceCountsOffset: GLuint, drawcount: GLsizei)

    operation multiDrawArraysWEBGL(mode: GLenum, firstsList: Object? /*(!)Int32Array | Список<GLint>*/, firstsOffset: GLuint, countsList: Object? /*(!)Int32Array | Список<GLsizei>*/, countsOffset: GLuint, drawcount: GLsizei)

    operation multiDrawElementsInstancedWEBGL(mode: GLenum, countsList: Object? /*(!)Int32Array | Список<GLsizei>*/, countsOffset: GLuint, type`: GLenum, offsetsList: Object? /*(!)Int32Array | Список<GLsizei>*/, offsetsOffset: GLuint, instanceCountsList: Object? /*(!)Int32Array | Список<GLsizei>*/, instanceCountsOffset: GLuint, drawcount: GLsizei)

    operation multiDrawElementsWEBGL(mode: GLenum, countsList: Object? /*(!)Int32Array | Список<GLsizei>*/, countsOffset: GLuint, type`: GLenum, offsetsList: Object? /*(!)Int32Array | Список<GLsizei>*/, offsetsOffset: GLuint, drawcount: GLsizei)
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLock)
  */

  type WakeLock = aspect
  {
    operation request(type`: WakeLockType? = empty): Promise<WakeLockSentinel>
  }


  /*(!) var */ WakeLock: object { prototype: WakeLock; on create(): WakeLock }


  type WakeLockSentinelEventMap = aspect
  {
    release: Event
  }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel)
  */

  type WakeLockSentinel = aspect EventTarget
  {
    onrelease: (operation(this: WakeLockSentinel, ev: Event): /*(!) any */ Object?)?

    guarded
    released: YesNo

    guarded
    type`: WakeLockType

    operation release(): Promise<Ничего>

    operation addEventListener<K = /*(!) keyof WakeLockSentinelEventMap */ Object?>(type`: K, listener: operation(this: WakeLockSentinel, ev: /*(!) WakeLockSentinelEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof WakeLockSentinelEventMap */ Object?>(type`: K, listener: operation(this: WakeLockSentinel, ev: /*(!) WakeLockSentinelEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ WakeLockSentinel: object { prototype: WakeLockSentinel; on create(): WakeLockSentinel }


  /**
  * A WaveShaperNode always has exactly one input and one output.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode)
  */

  type WaveShaperNode = aspect AudioNode
  {
    curve: Float32Array?

    oversample: OverSampleType
  }


  /*(!) var */ WaveShaperNode: object { prototype: WaveShaperNode; on create(context: BaseAudioContext, options: WaveShaperOptions? = empty): WaveShaperNode }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext) */

  type WebGL2RenderingContext = aspect WebGL2RenderingContextBase, WebGL2RenderingContextOverloads, WebGLRenderingContextBase
  {

  }


  /*(!) var */ WebGL2RenderingContext: object { prototype: WebGL2RenderingContext; on create(): WebGL2RenderingContext; guarded READ_BUFFER = 0x0C02; guarded UNPACK_ROW_LENGTH = 0x0CF2; guarded UNPACK_SKIP_ROWS = 0x0CF3; guarded UNPACK_SKIP_PIXELS = 0x0CF4; guarded PACK_ROW_LENGTH = 0x0D02; guarded PACK_SKIP_ROWS = 0x0D03; guarded PACK_SKIP_PIXELS = 0x0D04; guarded COLOR = 0x1800; guarded DEPTH = 0x1801; guarded STENCIL = 0x1802; guarded RED = 0x1903; guarded RGB8 = 0x8051; guarded RGBA8 = 0x8058; guarded RGB10_A2 = 0x8059; guarded TEXTURE_BINDING_3D = 0x806A; guarded UNPACK_SKIP_IMAGES = 0x806D; guarded UNPACK_IMAGE_HEIGHT = 0x806E; guarded TEXTURE_3D = 0x806F; guarded TEXTURE_WRAP_R = 0x8072; guarded MAX_3D_TEXTURE_SIZE = 0x8073; guarded UNSIGNED_INT_2_10_10_10_REV = 0x8368; guarded MAX_ELEMENTS_VERTICES = 0x80E8; guarded MAX_ELEMENTS_INDICES = 0x80E9; guarded TEXTURE_MIN_LOD = 0x813A; guarded TEXTURE_MAX_LOD = 0x813B; guarded TEXTURE_BASE_LEVEL = 0x813C; guarded TEXTURE_MAX_LEVEL = 0x813D; guarded MIN = 0x8007; guarded MAX = 0x8008; guarded DEPTH_COMPONENT24 = 0x81A6; guarded MAX_TEXTURE_LOD_BIAS = 0x84FD; guarded TEXTURE_COMPARE_MODE = 0x884C; guarded TEXTURE_COMPARE_FUNC = 0x884D; guarded CURRENT_QUERY = 0x8865; guarded QUERY_RESULT = 0x8866; guarded QUERY_RESULT_AVAILABLE = 0x8867; guarded STREAM_READ = 0x88E1; guarded STREAM_COPY = 0x88E2; guarded STATIC_READ = 0x88E5; guarded STATIC_COPY = 0x88E6; guarded DYNAMIC_READ = 0x88E9; guarded DYNAMIC_COPY = 0x88EA; guarded MAX_DRAW_BUFFERS = 0x8824; guarded DRAW_BUFFER0 = 0x8825; guarded DRAW_BUFFER1 = 0x8826; guarded DRAW_BUFFER2 = 0x8827; guarded DRAW_BUFFER3 = 0x8828; guarded DRAW_BUFFER4 = 0x8829; guarded DRAW_BUFFER5 = 0x882A; guarded DRAW_BUFFER6 = 0x882B; guarded DRAW_BUFFER7 = 0x882C; guarded DRAW_BUFFER8 = 0x882D; guarded DRAW_BUFFER9 = 0x882E; guarded DRAW_BUFFER10 = 0x882F; guarded DRAW_BUFFER11 = 0x8830; guarded DRAW_BUFFER12 = 0x8831; guarded DRAW_BUFFER13 = 0x8832; guarded DRAW_BUFFER14 = 0x8833; guarded DRAW_BUFFER15 = 0x8834; guarded MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49; guarded MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A; guarded SAMPLER_3D = 0x8B5F; guarded SAMPLER_2D_SHADOW = 0x8B62; guarded FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B; guarded PIXEL_PACK_BUFFER = 0x88EB; guarded PIXEL_UNPACK_BUFFER = 0x88EC; guarded PIXEL_PACK_BUFFER_BINDING = 0x88ED; guarded PIXEL_UNPACK_BUFFER_BINDING = 0x88EF; guarded FLOAT_MAT2x3 = 0x8B65; guarded FLOAT_MAT2x4 = 0x8B66; guarded FLOAT_MAT3x2 = 0x8B67; guarded FLOAT_MAT3x4 = 0x8B68; guarded FLOAT_MAT4x2 = 0x8B69; guarded FLOAT_MAT4x3 = 0x8B6A; guarded SRGB = 0x8C40; guarded SRGB8 = 0x8C41; guarded SRGB8_ALPHA8 = 0x8C43; guarded COMPARE_REF_TO_TEXTURE = 0x884E; guarded RGBA32F = 0x8814; guarded RGB32F = 0x8815; guarded RGBA16F = 0x881A; guarded RGB16F = 0x881B; guarded VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD; guarded MAX_ARRAY_TEXTURE_LAYERS = 0x88FF; guarded MIN_PROGRAM_TEXEL_OFFSET = 0x8904; guarded MAX_PROGRAM_TEXEL_OFFSET = 0x8905; guarded MAX_VARYING_COMPONENTS = 0x8B4B; guarded TEXTURE_2D_ARRAY = 0x8C1A; guarded TEXTURE_BINDING_2D_ARRAY = 0x8C1D; guarded R11F_G11F_B10F = 0x8C3A; guarded UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B; guarded RGB9_E5 = 0x8C3D; guarded UNSIGNED_INT_5_9_9_9_REV = 0x8C3E; guarded TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F; guarded MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80; guarded TRANSFORM_FEEDBACK_VARYINGS = 0x8C83; guarded TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84; guarded TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85; guarded TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88; guarded RASTERIZER_DISCARD = 0x8C89; guarded MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A; guarded MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B; guarded INTERLEAVED_ATTRIBS = 0x8C8C; guarded SEPARATE_ATTRIBS = 0x8C8D; guarded TRANSFORM_FEEDBACK_BUFFER = 0x8C8E; guarded TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F; guarded RGBA32UI = 0x8D70; guarded RGB32UI = 0x8D71; guarded RGBA16UI = 0x8D76; guarded RGB16UI = 0x8D77; guarded RGBA8UI = 0x8D7C; guarded RGB8UI = 0x8D7D; guarded RGBA32I = 0x8D82; guarded RGB32I = 0x8D83; guarded RGBA16I = 0x8D88; guarded RGB16I = 0x8D89; guarded RGBA8I = 0x8D8E; guarded RGB8I = 0x8D8F; guarded RED_INTEGER = 0x8D94; guarded RGB_INTEGER = 0x8D98; guarded RGBA_INTEGER = 0x8D99; guarded SAMPLER_2D_ARRAY = 0x8DC1; guarded SAMPLER_2D_ARRAY_SHADOW = 0x8DC4; guarded SAMPLER_CUBE_SHADOW = 0x8DC5; guarded UNSIGNED_INT_VEC2 = 0x8DC6; guarded UNSIGNED_INT_VEC3 = 0x8DC7; guarded UNSIGNED_INT_VEC4 = 0x8DC8; guarded INT_SAMPLER_2D = 0x8DCA; guarded INT_SAMPLER_3D = 0x8DCB; guarded INT_SAMPLER_CUBE = 0x8DCC; guarded INT_SAMPLER_2D_ARRAY = 0x8DCF; guarded UNSIGNED_INT_SAMPLER_2D = 0x8DD2; guarded UNSIGNED_INT_SAMPLER_3D = 0x8DD3; guarded UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4; guarded UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7; guarded DEPTH_COMPONENT32F = 0x8CAC; guarded DEPTH32F_STENCIL8 = 0x8CAD; guarded FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD; guarded FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210; guarded FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211; guarded FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212; guarded FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213; guarded FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214; guarded FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215; guarded FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216; guarded FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217; guarded FRAMEBUFFER_DEFAULT = 0x8218; guarded UNSIGNED_INT_24_8 = 0x84FA; guarded DEPTH24_STENCIL8 = 0x88F0; guarded UNSIGNED_NORMALIZED = 0x8C17; guarded DRAW_FRAMEBUFFER_BINDING = 0x8CA6; guarded READ_FRAMEBUFFER = 0x8CA8; guarded DRAW_FRAMEBUFFER = 0x8CA9; guarded READ_FRAMEBUFFER_BINDING = 0x8CAA; guarded RENDERBUFFER_SAMPLES = 0x8CAB; guarded FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4; guarded MAX_COLOR_ATTACHMENTS = 0x8CDF; guarded COLOR_ATTACHMENT1 = 0x8CE1; guarded COLOR_ATTACHMENT2 = 0x8CE2; guarded COLOR_ATTACHMENT3 = 0x8CE3; guarded COLOR_ATTACHMENT4 = 0x8CE4; guarded COLOR_ATTACHMENT5 = 0x8CE5; guarded COLOR_ATTACHMENT6 = 0x8CE6; guarded COLOR_ATTACHMENT7 = 0x8CE7; guarded COLOR_ATTACHMENT8 = 0x8CE8; guarded COLOR_ATTACHMENT9 = 0x8CE9; guarded COLOR_ATTACHMENT10 = 0x8CEA; guarded COLOR_ATTACHMENT11 = 0x8CEB; guarded COLOR_ATTACHMENT12 = 0x8CEC; guarded COLOR_ATTACHMENT13 = 0x8CED; guarded COLOR_ATTACHMENT14 = 0x8CEE; guarded COLOR_ATTACHMENT15 = 0x8CEF; guarded FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56; guarded MAX_SAMPLES = 0x8D57; guarded HALF_FLOAT = 0x140B; guarded RG = 0x8227; guarded RG_INTEGER = 0x8228; guarded R8 = 0x8229; guarded RG8 = 0x822B; guarded R16F = 0x822D; guarded R32F = 0x822E; guarded RG16F = 0x822F; guarded RG32F = 0x8230; guarded R8I = 0x8231; guarded R8UI = 0x8232; guarded R16I = 0x8233; guarded R16UI = 0x8234; guarded R32I = 0x8235; guarded R32UI = 0x8236; guarded RG8I = 0x8237; guarded RG8UI = 0x8238; guarded RG16I = 0x8239; guarded RG16UI = 0x823A; guarded RG32I = 0x823B; guarded RG32UI = 0x823C; guarded VERTEX_ARRAY_BINDING = 0x85B5; guarded R8_SNORM = 0x8F94; guarded RG8_SNORM = 0x8F95; guarded RGB8_SNORM = 0x8F96; guarded RGBA8_SNORM = 0x8F97; guarded SIGNED_NORMALIZED = 0x8F9C; guarded COPY_READ_BUFFER = 0x8F36; guarded COPY_WRITE_BUFFER = 0x8F37; guarded COPY_READ_BUFFER_BINDING = 0x8F36; guarded COPY_WRITE_BUFFER_BINDING = 0x8F37; guarded UNIFORM_BUFFER = 0x8A11; guarded UNIFORM_BUFFER_BINDING = 0x8A28; guarded UNIFORM_BUFFER_START = 0x8A29; guarded UNIFORM_BUFFER_SIZE = 0x8A2A; guarded MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B; guarded MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D; guarded MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E; guarded MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F; guarded MAX_UNIFORM_BLOCK_SIZE = 0x8A30; guarded MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31; guarded MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33; guarded UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34; guarded ACTIVE_UNIFORM_BLOCKS = 0x8A36; guarded UNIFORM_TYPE = 0x8A37; guarded UNIFORM_SIZE = 0x8A38; guarded UNIFORM_BLOCK_INDEX = 0x8A3A; guarded UNIFORM_OFFSET = 0x8A3B; guarded UNIFORM_ARRAY_STRIDE = 0x8A3C; guarded UNIFORM_MATRIX_STRIDE = 0x8A3D; guarded UNIFORM_IS_ROW_MAJOR = 0x8A3E; guarded UNIFORM_BLOCK_BINDING = 0x8A3F; guarded UNIFORM_BLOCK_DATA_SIZE = 0x8A40; guarded UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42; guarded UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43; guarded UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44; guarded UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46; guarded INVALID_INDEX = 0xFFFFFFFF; guarded MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122; guarded MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125; guarded MAX_SERVER_WAIT_TIMEOUT = 0x9111; guarded OBJECT_TYPE = 0x9112; guarded SYNC_CONDITION = 0x9113; guarded SYNC_STATUS = 0x9114; guarded SYNC_FLAGS = 0x9115; guarded SYNC_FENCE = 0x9116; guarded SYNC_GPU_COMMANDS_COMPLETE = 0x9117; guarded UNSIGNALED = 0x9118; guarded SIGNALED = 0x9119; guarded ALREADY_SIGNALED = 0x911A; guarded TIMEOUT_EXPIRED = 0x911B; guarded CONDITION_SATISFIED = 0x911C; guarded WAIT_FAILED = 0x911D; guarded SYNC_FLUSH_COMMANDS_BIT = 0x00000001; guarded VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE; guarded ANY_SAMPLES_PASSED = 0x8C2F; guarded ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A; guarded SAMPLER_BINDING = 0x8919; guarded RGB10_A2UI = 0x906F; guarded INT_2_10_10_10_REV = 0x8D9F; guarded TRANSFORM_FEEDBACK = 0x8E22; guarded TRANSFORM_FEEDBACK_PAUSED = 0x8E23; guarded TRANSFORM_FEEDBACK_ACTIVE = 0x8E24; guarded TRANSFORM_FEEDBACK_BINDING = 0x8E25; guarded TEXTURE_IMMUTABLE_FORMAT = 0x912F; guarded MAX_ELEMENT_INDEX = 0x8D6B; guarded TEXTURE_IMMUTABLE_LEVELS = 0x82DF; guarded TIMEOUT_IGNORED: -1; guarded MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 0x9247; guarded DEPTH_BUFFER_BIT = 0x00000100; guarded STENCIL_BUFFER_BIT = 0x00000400; guarded COLOR_BUFFER_BIT = 0x00004000; guarded POINTS = 0x0000; guarded LINES = 0x0001; guarded LINE_LOOP = 0x0002; guarded LINE_STRIP = 0x0003; guarded TRIANGLES = 0x0004; guarded TRIANGLE_STRIP = 0x0005; guarded TRIANGLE_FAN = 0x0006; guarded ZERO: 0; guarded ONE: 1; guarded SRC_COLOR = 0x0300; guarded ONE_MINUS_SRC_COLOR = 0x0301; guarded SRC_ALPHA = 0x0302; guarded ONE_MINUS_SRC_ALPHA = 0x0303; guarded DST_ALPHA = 0x0304; guarded ONE_MINUS_DST_ALPHA = 0x0305; guarded DST_COLOR = 0x0306; guarded ONE_MINUS_DST_COLOR = 0x0307; guarded SRC_ALPHA_SATURATE = 0x0308; guarded FUNC_ADD = 0x8006; guarded BLEND_EQUATION = 0x8009; guarded BLEND_EQUATION_RGB = 0x8009; guarded BLEND_EQUATION_ALPHA = 0x883D; guarded FUNC_SUBTRACT = 0x800A; guarded FUNC_REVERSE_SUBTRACT = 0x800B; guarded BLEND_DST_RGB = 0x80C8; guarded BLEND_SRC_RGB = 0x80C9; guarded BLEND_DST_ALPHA = 0x80CA; guarded BLEND_SRC_ALPHA = 0x80CB; guarded CONSTANT_COLOR = 0x8001; guarded ONE_MINUS_CONSTANT_COLOR = 0x8002; guarded CONSTANT_ALPHA = 0x8003; guarded ONE_MINUS_CONSTANT_ALPHA = 0x8004; guarded BLEND_COLOR = 0x8005; guarded ARRAY_BUFFER = 0x8892; guarded ELEMENT_ARRAY_BUFFER = 0x8893; guarded ARRAY_BUFFER_BINDING = 0x8894; guarded ELEMENT_ARRAY_BUFFER_BINDING = 0x8895; guarded STREAM_DRAW = 0x88E0; guarded STATIC_DRAW = 0x88E4; guarded DYNAMIC_DRAW = 0x88E8; guarded BUFFER_SIZE = 0x8764; guarded BUFFER_USAGE = 0x8765; guarded CURRENT_VERTEX_ATTRIB = 0x8626; guarded FRONT = 0x0404; guarded BACK = 0x0405; guarded FRONT_AND_BACK = 0x0408; guarded CULL_FACE = 0x0B44; guarded BLEND = 0x0BE2; guarded DITHER = 0x0BD0; guarded STENCIL_TEST = 0x0B90; guarded DEPTH_TEST = 0x0B71; guarded SCISSOR_TEST = 0x0C11; guarded POLYGON_OFFSET_FILL = 0x8037; guarded SAMPLE_ALPHA_TO_COVERAGE = 0x809E; guarded SAMPLE_COVERAGE = 0x80A0; guarded NO_ERROR: 0; guarded INVALID_ENUM = 0x0500; guarded INVALID_VALUE = 0x0501; guarded INVALID_OPERATION = 0x0502; guarded OUT_OF_MEMORY = 0x0505; guarded CW = 0x0900; guarded CCW = 0x0901; guarded LINE_WIDTH = 0x0B21; guarded ALIASED_POINT_SIZE_RANGE = 0x846D; guarded ALIASED_LINE_WIDTH_RANGE = 0x846E; guarded CULL_FACE_MODE = 0x0B45; guarded FRONT_FACE = 0x0B46; guarded DEPTH_RANGE = 0x0B70; guarded DEPTH_WRITEMASK = 0x0B72; guarded DEPTH_CLEAR_VALUE = 0x0B73; guarded DEPTH_FUNC = 0x0B74; guarded STENCIL_CLEAR_VALUE = 0x0B91; guarded STENCIL_FUNC = 0x0B92; guarded STENCIL_FAIL = 0x0B94; guarded STENCIL_PASS_DEPTH_FAIL = 0x0B95; guarded STENCIL_PASS_DEPTH_PASS = 0x0B96; guarded STENCIL_REF = 0x0B97; guarded STENCIL_VALUE_MASK = 0x0B93; guarded STENCIL_WRITEMASK = 0x0B98; guarded STENCIL_BACK_FUNC = 0x8800; guarded STENCIL_BACK_FAIL = 0x8801; guarded STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802; guarded STENCIL_BACK_PASS_DEPTH_PASS = 0x8803; guarded STENCIL_BACK_REF = 0x8CA3; guarded STENCIL_BACK_VALUE_MASK = 0x8CA4; guarded STENCIL_BACK_WRITEMASK = 0x8CA5; guarded VIEWPORT = 0x0BA2; guarded SCISSOR_BOX = 0x0C10; guarded COLOR_CLEAR_VALUE = 0x0C22; guarded COLOR_WRITEMASK = 0x0C23; guarded UNPACK_ALIGNMENT = 0x0CF5; guarded PACK_ALIGNMENT = 0x0D05; guarded MAX_TEXTURE_SIZE = 0x0D33; guarded MAX_VIEWPORT_DIMS = 0x0D3A; guarded SUBPIXEL_BITS = 0x0D50; guarded RED_BITS = 0x0D52; guarded GREEN_BITS = 0x0D53; guarded BLUE_BITS = 0x0D54; guarded ALPHA_BITS = 0x0D55; guarded DEPTH_BITS = 0x0D56; guarded STENCIL_BITS = 0x0D57; guarded POLYGON_OFFSET_UNITS = 0x2A00; guarded POLYGON_OFFSET_FACTOR = 0x8038; guarded TEXTURE_BINDING_2D = 0x8069; guarded SAMPLE_BUFFERS = 0x80A8; guarded SAMPLES = 0x80A9; guarded SAMPLE_COVERAGE_VALUE = 0x80AA; guarded SAMPLE_COVERAGE_INVERT = 0x80AB; guarded COMPRESSED_TEXTURE_FORMATS = 0x86A3; guarded DONT_CARE = 0x1100; guarded FASTEST = 0x1101; guarded NICEST = 0x1102; guarded GENERATE_MIPMAP_HINT = 0x8192; guarded BYTE = 0x1400; guarded UNSIGNED_BYTE = 0x1401; guarded SHORT = 0x1402; guarded UNSIGNED_SHORT = 0x1403; guarded INT = 0x1404; guarded UNSIGNED_INT = 0x1405; guarded FLOAT = 0x1406; guarded DEPTH_COMPONENT = 0x1902; guarded ALPHA = 0x1906; guarded RGB = 0x1907; guarded RGBA = 0x1908; guarded LUMINANCE = 0x1909; guarded LUMINANCE_ALPHA = 0x190A; guarded UNSIGNED_SHORT_4_4_4_4 = 0x8033; guarded UNSIGNED_SHORT_5_5_5_1 = 0x8034; guarded UNSIGNED_SHORT_5_6_5 = 0x8363; guarded FRAGMENT_SHADER = 0x8B30; guarded VERTEX_SHADER = 0x8B31; guarded MAX_VERTEX_ATTRIBS = 0x8869; guarded MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB; guarded MAX_VARYING_VECTORS = 0x8DFC; guarded MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D; guarded MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C; guarded MAX_TEXTURE_IMAGE_UNITS = 0x8872; guarded MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD; guarded SHADER_TYPE = 0x8B4F; guarded DELETE_STATUS = 0x8B80; guarded LINK_STATUS = 0x8B82; guarded VALIDATE_STATUS = 0x8B83; guarded ATTACHED_SHADERS = 0x8B85; guarded ACTIVE_UNIFORMS = 0x8B86; guarded ACTIVE_ATTRIBUTES = 0x8B89; guarded SHADING_LANGUAGE_VERSION = 0x8B8C; guarded CURRENT_PROGRAM = 0x8B8D; guarded NEVER = 0x0200; guarded LESS = 0x0201; guarded EQUAL = 0x0202; guarded LEQUAL = 0x0203; guarded GREATER = 0x0204; guarded NOTEQUAL = 0x0205; guarded GEQUAL = 0x0206; guarded ALWAYS = 0x0207; guarded KEEP = 0x1E00; guarded REPLACE = 0x1E01; guarded INCR = 0x1E02; guarded DECR = 0x1E03; guarded INVERT = 0x150A; guarded INCR_WRAP = 0x8507; guarded DECR_WRAP = 0x8508; guarded VENDOR = 0x1F00; guarded RENDERER = 0x1F01; guarded VERSION = 0x1F02; guarded NEAREST = 0x2600; guarded LINEAR = 0x2601; guarded NEAREST_MIPMAP_NEAREST = 0x2700; guarded LINEAR_MIPMAP_NEAREST = 0x2701; guarded NEAREST_MIPMAP_LINEAR = 0x2702; guarded LINEAR_MIPMAP_LINEAR = 0x2703; guarded TEXTURE_MAG_FILTER = 0x2800; guarded TEXTURE_MIN_FILTER = 0x2801; guarded TEXTURE_WRAP_S = 0x2802; guarded TEXTURE_WRAP_T = 0x2803; guarded TEXTURE_2D = 0x0DE1; guarded TEXTURE = 0x1702; guarded TEXTURE_CUBE_MAP = 0x8513; guarded TEXTURE_BINDING_CUBE_MAP = 0x8514; guarded TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515; guarded TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516; guarded TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517; guarded TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518; guarded TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519; guarded TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A; guarded MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C; guarded TEXTURE0 = 0x84C0; guarded TEXTURE1 = 0x84C1; guarded TEXTURE2 = 0x84C2; guarded TEXTURE3 = 0x84C3; guarded TEXTURE4 = 0x84C4; guarded TEXTURE5 = 0x84C5; guarded TEXTURE6 = 0x84C6; guarded TEXTURE7 = 0x84C7; guarded TEXTURE8 = 0x84C8; guarded TEXTURE9 = 0x84C9; guarded TEXTURE10 = 0x84CA; guarded TEXTURE11 = 0x84CB; guarded TEXTURE12 = 0x84CC; guarded TEXTURE13 = 0x84CD; guarded TEXTURE14 = 0x84CE; guarded TEXTURE15 = 0x84CF; guarded TEXTURE16 = 0x84D0; guarded TEXTURE17 = 0x84D1; guarded TEXTURE18 = 0x84D2; guarded TEXTURE19 = 0x84D3; guarded TEXTURE20 = 0x84D4; guarded TEXTURE21 = 0x84D5; guarded TEXTURE22 = 0x84D6; guarded TEXTURE23 = 0x84D7; guarded TEXTURE24 = 0x84D8; guarded TEXTURE25 = 0x84D9; guarded TEXTURE26 = 0x84DA; guarded TEXTURE27 = 0x84DB; guarded TEXTURE28 = 0x84DC; guarded TEXTURE29 = 0x84DD; guarded TEXTURE30 = 0x84DE; guarded TEXTURE31 = 0x84DF; guarded ACTIVE_TEXTURE = 0x84E0; guarded REPEAT = 0x2901; guarded CLAMP_TO_EDGE = 0x812F; guarded MIRRORED_REPEAT = 0x8370; guarded FLOAT_VEC2 = 0x8B50; guarded FLOAT_VEC3 = 0x8B51; guarded FLOAT_VEC4 = 0x8B52; guarded INT_VEC2 = 0x8B53; guarded INT_VEC3 = 0x8B54; guarded INT_VEC4 = 0x8B55; guarded BOOL = 0x8B56; guarded BOOL_VEC2 = 0x8B57; guarded BOOL_VEC3 = 0x8B58; guarded BOOL_VEC4 = 0x8B59; guarded FLOAT_MAT2 = 0x8B5A; guarded FLOAT_MAT3 = 0x8B5B; guarded FLOAT_MAT4 = 0x8B5C; guarded SAMPLER_2D = 0x8B5E; guarded SAMPLER_CUBE = 0x8B60; guarded VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622; guarded VERTEX_ATTRIB_ARRAY_SIZE = 0x8623; guarded VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624; guarded VERTEX_ATTRIB_ARRAY_TYPE = 0x8625; guarded VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A; guarded VERTEX_ATTRIB_ARRAY_POINTER = 0x8645; guarded VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F; guarded IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A; guarded IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B; guarded COMPILE_STATUS = 0x8B81; guarded LOW_FLOAT = 0x8DF0; guarded MEDIUM_FLOAT = 0x8DF1; guarded HIGH_FLOAT = 0x8DF2; guarded LOW_INT = 0x8DF3; guarded MEDIUM_INT = 0x8DF4; guarded HIGH_INT = 0x8DF5; guarded FRAMEBUFFER = 0x8D40; guarded RENDERBUFFER = 0x8D41; guarded RGBA4 = 0x8056; guarded RGB5_A1 = 0x8057; guarded RGB565 = 0x8D62; guarded DEPTH_COMPONENT16 = 0x81A5; guarded STENCIL_INDEX8 = 0x8D48; guarded DEPTH_STENCIL = 0x84F9; guarded RENDERBUFFER_WIDTH = 0x8D42; guarded RENDERBUFFER_HEIGHT = 0x8D43; guarded RENDERBUFFER_INTERNAL_FORMAT = 0x8D44; guarded RENDERBUFFER_RED_SIZE = 0x8D50; guarded RENDERBUFFER_GREEN_SIZE = 0x8D51; guarded RENDERBUFFER_BLUE_SIZE = 0x8D52; guarded RENDERBUFFER_ALPHA_SIZE = 0x8D53; guarded RENDERBUFFER_DEPTH_SIZE = 0x8D54; guarded RENDERBUFFER_STENCIL_SIZE = 0x8D55; guarded FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0; guarded FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1; guarded FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2; guarded FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3; guarded COLOR_ATTACHMENT0 = 0x8CE0; guarded DEPTH_ATTACHMENT = 0x8D00; guarded STENCIL_ATTACHMENT = 0x8D20; guarded DEPTH_STENCIL_ATTACHMENT = 0x821A; guarded NONE: 0; guarded FRAMEBUFFER_COMPLETE = 0x8CD5; guarded FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6; guarded FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7; guarded FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9; guarded FRAMEBUFFER_UNSUPPORTED = 0x8CDD; guarded FRAMEBUFFER_BINDING = 0x8CA6; guarded RENDERBUFFER_BINDING = 0x8CA7; guarded MAX_RENDERBUFFER_SIZE = 0x84E8; guarded INVALID_FRAMEBUFFER_OPERATION = 0x0506; guarded UNPACK_FLIP_Y_WEBGL = 0x9240; guarded UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241; guarded CONTEXT_LOST_WEBGL = 0x9242; guarded UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243; guarded BROWSER_DEFAULT_WEBGL = 0x9244 }


  type WebGL2RenderingContextBase = aspect
  {
    operation beginQuery(target: GLenum, query: WebGLQuery)

    operation beginTransformFeedback(primitiveMode: GLenum)

    operation bindBufferBase(target: GLenum, index: GLuint, buffer: WebGLBuffer?)

    operation bindBufferRange(target: GLenum, index: GLuint, buffer: WebGLBuffer?, offset: GLintptr, size: GLsizeiptr)

    operation bindSampler(unit: GLuint, sampler: WebGLSampler?)

    operation bindTransformFeedback(target: GLenum, tf: WebGLTransformFeedback?)

    operation bindVertexArray(array: WebGLVertexArrayObject?)

    operation blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum)

    operation clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint)

    operation clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List, srcOffset: GLuint? = empty)

    operation clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List, srcOffset: GLuint? = empty)

    operation clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List, srcOffset: GLuint? = empty)

    operation clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum

    operation compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr)

    operation compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset: GLuint? = empty, srcLengthOverride: GLuint? = empty)

    operation compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr)

    operation compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset: GLuint? = empty, srcLengthOverride: GLuint? = empty)

    operation copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr)

    operation copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)

    operation createQuery(): WebGLQuery?

    operation createSampler(): WebGLSampler?

    operation createTransformFeedback(): WebGLTransformFeedback?

    operation createVertexArray(): WebGLVertexArrayObject?

    operation deleteQuery(query: WebGLQuery?)

    operation deleteSampler(sampler: WebGLSampler?)

    operation deleteSync(sync: WebGLSync?)

    operation deleteTransformFeedback(tf: WebGLTransformFeedback?)

    operation deleteVertexArray(vertexArray: WebGLVertexArrayObject?)

    operation drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei)

    operation drawBuffers(buffers: Список<GLenum>)

    operation drawElementsInstanced(mode: GLenum, count: GLsizei, type`: GLenum, offset: GLintptr, instanceCount: GLsizei)

    operation drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type`: GLenum, offset: GLintptr)

    operation endQuery(target: GLenum)

    operation endTransformFeedback()

    operation fenceSync(condition: GLenum, flags: GLbitfield): WebGLSync?

    operation framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: WebGLTexture?, level: GLint, layer: GLint)

    operation getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint): Text?

    operation getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum): /*(!) any */ Object?

    operation getActiveUniforms(program: WebGLProgram, uniformIndices: Список<GLuint>, pname: GLenum): /*(!) any */ Object?

    operation getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView, dstOffset: GLuint? = empty, length: GLuint? = empty)

    operation getFragDataLocation(program: WebGLProgram, name: Text): GLint

    operation getIndexedParameter(target: GLenum, index: GLuint): /*(!) any */ Object?

    operation getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum): /*(!) any */ Object?

    operation getQuery(target: GLenum, pname: GLenum): WebGLQuery?

    operation getQueryParameter(query: WebGLQuery, pname: GLenum): /*(!) any */ Object?

    operation getSamplerParameter(sampler: WebGLSampler, pname: GLenum): /*(!) any */ Object?

    operation getSyncParameter(sync: WebGLSync, pname: GLenum): /*(!) any */ Object?

    operation getTransformFeedbackVarying(program: WebGLProgram, index: GLuint): WebGLActiveInfo?

    operation getUniformBlockIndex(program: WebGLProgram, uniformBlockName: Text): GLuint

    operation getUniformIndices(program: WebGLProgram, uniformNames: Список<Текст>): Список<GLuint>?

    operation invalidateFramebuffer(target: GLenum, attachments: Список<GLenum>)

    operation invalidateSubFramebuffer(target: GLenum, attachments: Список<GLenum>, x: GLint, y: GLint, width: GLsizei, height: GLsizei)

    operation isQuery(query: WebGLQuery?): GLboolean

    operation isSampler(sampler: WebGLSampler?): GLboolean

    operation isSync(sync: WebGLSync?): GLboolean

    operation isTransformFeedback(tf: WebGLTransformFeedback?): GLboolean

    operation isVertexArray(vertexArray: WebGLVertexArrayObject?): GLboolean

    operation pauseTransformFeedback()

    operation readBuffer(src: GLenum)

    operation renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)

    operation resumeTransformFeedback()

    operation samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat)

    operation samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint)

    operation texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type`: GLenum, pboOffset: GLintptr)

    operation texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type`: GLenum, source: TexImageSource)

    operation texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type`: GLenum, srcData: ArrayBufferView?)

    operation texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type`: GLenum, srcData: ArrayBufferView, srcOffset: GLuint)

    operation texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)

    operation texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei)

    operation texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type`: GLenum, pboOffset: GLintptr)

    operation texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type`: GLenum, source: TexImageSource)

    operation texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type`: GLenum, srcData: ArrayBufferView?, srcOffset: GLuint? = empty)

    operation transformFeedbackVaryings(program: WebGLProgram, varyings: Список<Текст>, bufferMode: GLenum)

    operation uniform1ui(location: WebGLUniformLocation?, v0: GLuint)

    operation uniform1uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform2ui(location: WebGLUniformLocation?, v0: GLuint, v1: GLuint)

    operation uniform2uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform3ui(location: WebGLUniformLocation?, v0: GLuint, v1: GLuint, v2: GLuint)

    operation uniform3uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform4ui(location: WebGLUniformLocation?, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint)

    operation uniform4uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint)

    operation uniformMatrix2x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniformMatrix2x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniformMatrix3x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniformMatrix3x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniformMatrix4x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniformMatrix4x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation vertexAttribDivisor(index: GLuint, divisor: GLuint)

    operation vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint)

    operation vertexAttribI4iv(index: GLuint, values: Int32List)

    operation vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint)

    operation vertexAttribI4uiv(index: GLuint, values: Uint32List)

    operation vertexAttribIPointer(index: GLuint, size: GLint, type`: GLenum, stride: GLsizei, offset: GLintptr)

    operation waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64)

    guarded
    READ_BUFFER = 0x0C02

    guarded
    UNPACK_ROW_LENGTH = 0x0CF2

    guarded
    UNPACK_SKIP_ROWS = 0x0CF3

    guarded
    UNPACK_SKIP_PIXELS = 0x0CF4

    guarded
    PACK_ROW_LENGTH = 0x0D02

    guarded
    PACK_SKIP_ROWS = 0x0D03

    guarded
    PACK_SKIP_PIXELS = 0x0D04

    guarded
    COLOR = 0x1800

    guarded
    DEPTH = 0x1801

    guarded
    STENCIL = 0x1802

    guarded
    RED = 0x1903

    guarded
    RGB8 = 0x8051

    guarded
    RGBA8 = 0x8058

    guarded
    RGB10_A2 = 0x8059

    guarded
    TEXTURE_BINDING_3D = 0x806A

    guarded
    UNPACK_SKIP_IMAGES = 0x806D

    guarded
    UNPACK_IMAGE_HEIGHT = 0x806E

    guarded
    TEXTURE_3D = 0x806F

    guarded
    TEXTURE_WRAP_R = 0x8072

    guarded
    MAX_3D_TEXTURE_SIZE = 0x8073

    guarded
    UNSIGNED_INT_2_10_10_10_REV = 0x8368

    guarded
    MAX_ELEMENTS_VERTICES = 0x80E8

    guarded
    MAX_ELEMENTS_INDICES = 0x80E9

    guarded
    TEXTURE_MIN_LOD = 0x813A

    guarded
    TEXTURE_MAX_LOD = 0x813B

    guarded
    TEXTURE_BASE_LEVEL = 0x813C

    guarded
    TEXTURE_MAX_LEVEL = 0x813D

    guarded
    MIN = 0x8007

    guarded
    MAX = 0x8008

    guarded
    DEPTH_COMPONENT24 = 0x81A6

    guarded
    MAX_TEXTURE_LOD_BIAS = 0x84FD

    guarded
    TEXTURE_COMPARE_MODE = 0x884C

    guarded
    TEXTURE_COMPARE_FUNC = 0x884D

    guarded
    CURRENT_QUERY = 0x8865

    guarded
    QUERY_RESULT = 0x8866

    guarded
    QUERY_RESULT_AVAILABLE = 0x8867

    guarded
    STREAM_READ = 0x88E1

    guarded
    STREAM_COPY = 0x88E2

    guarded
    STATIC_READ = 0x88E5

    guarded
    STATIC_COPY = 0x88E6

    guarded
    DYNAMIC_READ = 0x88E9

    guarded
    DYNAMIC_COPY = 0x88EA

    guarded
    MAX_DRAW_BUFFERS = 0x8824

    guarded
    DRAW_BUFFER0 = 0x8825

    guarded
    DRAW_BUFFER1 = 0x8826

    guarded
    DRAW_BUFFER2 = 0x8827

    guarded
    DRAW_BUFFER3 = 0x8828

    guarded
    DRAW_BUFFER4 = 0x8829

    guarded
    DRAW_BUFFER5 = 0x882A

    guarded
    DRAW_BUFFER6 = 0x882B

    guarded
    DRAW_BUFFER7 = 0x882C

    guarded
    DRAW_BUFFER8 = 0x882D

    guarded
    DRAW_BUFFER9 = 0x882E

    guarded
    DRAW_BUFFER10 = 0x882F

    guarded
    DRAW_BUFFER11 = 0x8830

    guarded
    DRAW_BUFFER12 = 0x8831

    guarded
    DRAW_BUFFER13 = 0x8832

    guarded
    DRAW_BUFFER14 = 0x8833

    guarded
    DRAW_BUFFER15 = 0x8834

    guarded
    MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49

    guarded
    MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A

    guarded
    SAMPLER_3D = 0x8B5F

    guarded
    SAMPLER_2D_SHADOW = 0x8B62

    guarded
    FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B

    guarded
    PIXEL_PACK_BUFFER = 0x88EB

    guarded
    PIXEL_UNPACK_BUFFER = 0x88EC

    guarded
    PIXEL_PACK_BUFFER_BINDING = 0x88ED

    guarded
    PIXEL_UNPACK_BUFFER_BINDING = 0x88EF

    guarded
    FLOAT_MAT2x3 = 0x8B65

    guarded
    FLOAT_MAT2x4 = 0x8B66

    guarded
    FLOAT_MAT3x2 = 0x8B67

    guarded
    FLOAT_MAT3x4 = 0x8B68

    guarded
    FLOAT_MAT4x2 = 0x8B69

    guarded
    FLOAT_MAT4x3 = 0x8B6A

    guarded
    SRGB = 0x8C40

    guarded
    SRGB8 = 0x8C41

    guarded
    SRGB8_ALPHA8 = 0x8C43

    guarded
    COMPARE_REF_TO_TEXTURE = 0x884E

    guarded
    RGBA32F = 0x8814

    guarded
    RGB32F = 0x8815

    guarded
    RGBA16F = 0x881A

    guarded
    RGB16F = 0x881B

    guarded
    VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD

    guarded
    MAX_ARRAY_TEXTURE_LAYERS = 0x88FF

    guarded
    MIN_PROGRAM_TEXEL_OFFSET = 0x8904

    guarded
    MAX_PROGRAM_TEXEL_OFFSET = 0x8905

    guarded
    MAX_VARYING_COMPONENTS = 0x8B4B

    guarded
    TEXTURE_2D_ARRAY = 0x8C1A

    guarded
    TEXTURE_BINDING_2D_ARRAY = 0x8C1D

    guarded
    R11F_G11F_B10F = 0x8C3A

    guarded
    UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B

    guarded
    RGB9_E5 = 0x8C3D

    guarded
    UNSIGNED_INT_5_9_9_9_REV = 0x8C3E

    guarded
    TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F

    guarded
    MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80

    guarded
    TRANSFORM_FEEDBACK_VARYINGS = 0x8C83

    guarded
    TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84

    guarded
    TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85

    guarded
    TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88

    guarded
    RASTERIZER_DISCARD = 0x8C89

    guarded
    MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A

    guarded
    MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B

    guarded
    INTERLEAVED_ATTRIBS = 0x8C8C

    guarded
    SEPARATE_ATTRIBS = 0x8C8D

    guarded
    TRANSFORM_FEEDBACK_BUFFER = 0x8C8E

    guarded
    TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F

    guarded
    RGBA32UI = 0x8D70

    guarded
    RGB32UI = 0x8D71

    guarded
    RGBA16UI = 0x8D76

    guarded
    RGB16UI = 0x8D77

    guarded
    RGBA8UI = 0x8D7C

    guarded
    RGB8UI = 0x8D7D

    guarded
    RGBA32I = 0x8D82

    guarded
    RGB32I = 0x8D83

    guarded
    RGBA16I = 0x8D88

    guarded
    RGB16I = 0x8D89

    guarded
    RGBA8I = 0x8D8E

    guarded
    RGB8I = 0x8D8F

    guarded
    RED_INTEGER = 0x8D94

    guarded
    RGB_INTEGER = 0x8D98

    guarded
    RGBA_INTEGER = 0x8D99

    guarded
    SAMPLER_2D_ARRAY = 0x8DC1

    guarded
    SAMPLER_2D_ARRAY_SHADOW = 0x8DC4

    guarded
    SAMPLER_CUBE_SHADOW = 0x8DC5

    guarded
    UNSIGNED_INT_VEC2 = 0x8DC6

    guarded
    UNSIGNED_INT_VEC3 = 0x8DC7

    guarded
    UNSIGNED_INT_VEC4 = 0x8DC8

    guarded
    INT_SAMPLER_2D = 0x8DCA

    guarded
    INT_SAMPLER_3D = 0x8DCB

    guarded
    INT_SAMPLER_CUBE = 0x8DCC

    guarded
    INT_SAMPLER_2D_ARRAY = 0x8DCF

    guarded
    UNSIGNED_INT_SAMPLER_2D = 0x8DD2

    guarded
    UNSIGNED_INT_SAMPLER_3D = 0x8DD3

    guarded
    UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4

    guarded
    UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7

    guarded
    DEPTH_COMPONENT32F = 0x8CAC

    guarded
    DEPTH32F_STENCIL8 = 0x8CAD

    guarded
    FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD

    guarded
    FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210

    guarded
    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211

    guarded
    FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212

    guarded
    FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213

    guarded
    FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214

    guarded
    FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215

    guarded
    FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216

    guarded
    FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217

    guarded
    FRAMEBUFFER_DEFAULT = 0x8218

    guarded
    UNSIGNED_INT_24_8 = 0x84FA

    guarded
    DEPTH24_STENCIL8 = 0x88F0

    guarded
    UNSIGNED_NORMALIZED = 0x8C17

    guarded
    DRAW_FRAMEBUFFER_BINDING = 0x8CA6

    guarded
    READ_FRAMEBUFFER = 0x8CA8

    guarded
    DRAW_FRAMEBUFFER = 0x8CA9

    guarded
    READ_FRAMEBUFFER_BINDING = 0x8CAA

    guarded
    RENDERBUFFER_SAMPLES = 0x8CAB

    guarded
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4

    guarded
    MAX_COLOR_ATTACHMENTS = 0x8CDF

    guarded
    COLOR_ATTACHMENT1 = 0x8CE1

    guarded
    COLOR_ATTACHMENT2 = 0x8CE2

    guarded
    COLOR_ATTACHMENT3 = 0x8CE3

    guarded
    COLOR_ATTACHMENT4 = 0x8CE4

    guarded
    COLOR_ATTACHMENT5 = 0x8CE5

    guarded
    COLOR_ATTACHMENT6 = 0x8CE6

    guarded
    COLOR_ATTACHMENT7 = 0x8CE7

    guarded
    COLOR_ATTACHMENT8 = 0x8CE8

    guarded
    COLOR_ATTACHMENT9 = 0x8CE9

    guarded
    COLOR_ATTACHMENT10 = 0x8CEA

    guarded
    COLOR_ATTACHMENT11 = 0x8CEB

    guarded
    COLOR_ATTACHMENT12 = 0x8CEC

    guarded
    COLOR_ATTACHMENT13 = 0x8CED

    guarded
    COLOR_ATTACHMENT14 = 0x8CEE

    guarded
    COLOR_ATTACHMENT15 = 0x8CEF

    guarded
    FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56

    guarded
    MAX_SAMPLES = 0x8D57

    guarded
    HALF_FLOAT = 0x140B

    guarded
    RG = 0x8227

    guarded
    RG_INTEGER = 0x8228

    guarded
    R8 = 0x8229

    guarded
    RG8 = 0x822B

    guarded
    R16F = 0x822D

    guarded
    R32F = 0x822E

    guarded
    RG16F = 0x822F

    guarded
    RG32F = 0x8230

    guarded
    R8I = 0x8231

    guarded
    R8UI = 0x8232

    guarded
    R16I = 0x8233

    guarded
    R16UI = 0x8234

    guarded
    R32I = 0x8235

    guarded
    R32UI = 0x8236

    guarded
    RG8I = 0x8237

    guarded
    RG8UI = 0x8238

    guarded
    RG16I = 0x8239

    guarded
    RG16UI = 0x823A

    guarded
    RG32I = 0x823B

    guarded
    RG32UI = 0x823C

    guarded
    VERTEX_ARRAY_BINDING = 0x85B5

    guarded
    R8_SNORM = 0x8F94

    guarded
    RG8_SNORM = 0x8F95

    guarded
    RGB8_SNORM = 0x8F96

    guarded
    RGBA8_SNORM = 0x8F97

    guarded
    SIGNED_NORMALIZED = 0x8F9C

    guarded
    COPY_READ_BUFFER = 0x8F36

    guarded
    COPY_WRITE_BUFFER = 0x8F37

    guarded
    COPY_READ_BUFFER_BINDING = 0x8F36

    guarded
    COPY_WRITE_BUFFER_BINDING = 0x8F37

    guarded
    UNIFORM_BUFFER = 0x8A11

    guarded
    UNIFORM_BUFFER_BINDING = 0x8A28

    guarded
    UNIFORM_BUFFER_START = 0x8A29

    guarded
    UNIFORM_BUFFER_SIZE = 0x8A2A

    guarded
    MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B

    guarded
    MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D

    guarded
    MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E

    guarded
    MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F

    guarded
    MAX_UNIFORM_BLOCK_SIZE = 0x8A30

    guarded
    MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31

    guarded
    MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33

    guarded
    UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34

    guarded
    ACTIVE_UNIFORM_BLOCKS = 0x8A36

    guarded
    UNIFORM_TYPE = 0x8A37

    guarded
    UNIFORM_SIZE = 0x8A38

    guarded
    UNIFORM_BLOCK_INDEX = 0x8A3A

    guarded
    UNIFORM_OFFSET = 0x8A3B

    guarded
    UNIFORM_ARRAY_STRIDE = 0x8A3C

    guarded
    UNIFORM_MATRIX_STRIDE = 0x8A3D

    guarded
    UNIFORM_IS_ROW_MAJOR = 0x8A3E

    guarded
    UNIFORM_BLOCK_BINDING = 0x8A3F

    guarded
    UNIFORM_BLOCK_DATA_SIZE = 0x8A40

    guarded
    UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42

    guarded
    UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43

    guarded
    UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44

    guarded
    UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46

    guarded
    INVALID_INDEX = 0xFFFFFFFF

    guarded
    MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122

    guarded
    MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125

    guarded
    MAX_SERVER_WAIT_TIMEOUT = 0x9111

    guarded
    OBJECT_TYPE = 0x9112

    guarded
    SYNC_CONDITION = 0x9113

    guarded
    SYNC_STATUS = 0x9114

    guarded
    SYNC_FLAGS = 0x9115

    guarded
    SYNC_FENCE = 0x9116

    guarded
    SYNC_GPU_COMMANDS_COMPLETE = 0x9117

    guarded
    UNSIGNALED = 0x9118

    guarded
    SIGNALED = 0x9119

    guarded
    ALREADY_SIGNALED = 0x911A

    guarded
    TIMEOUT_EXPIRED = 0x911B

    guarded
    CONDITION_SATISFIED = 0x911C

    guarded
    WAIT_FAILED = 0x911D

    guarded
    SYNC_FLUSH_COMMANDS_BIT = 0x00000001

    guarded
    VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE

    guarded
    ANY_SAMPLES_PASSED = 0x8C2F

    guarded
    ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A

    guarded
    SAMPLER_BINDING = 0x8919

    guarded
    RGB10_A2UI = 0x906F

    guarded
    INT_2_10_10_10_REV = 0x8D9F

    guarded
    TRANSFORM_FEEDBACK = 0x8E22

    guarded
    TRANSFORM_FEEDBACK_PAUSED = 0x8E23

    guarded
    TRANSFORM_FEEDBACK_ACTIVE = 0x8E24

    guarded
    TRANSFORM_FEEDBACK_BINDING = 0x8E25

    guarded
    TEXTURE_IMMUTABLE_FORMAT = 0x912F

    guarded
    MAX_ELEMENT_INDEX = 0x8D6B

    guarded
    TEXTURE_IMMUTABLE_LEVELS = 0x82DF

    guarded
    TIMEOUT_IGNORED: -1

    guarded
    MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 0x9247
  }


  type WebGL2RenderingContextOverloads = aspect
  {
    operation bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum)

    operation bufferData(target: GLenum, srcData: BufferSource?, usage: GLenum)

    operation bufferData(target: GLenum, srcData: ArrayBufferView, usage: GLenum, srcOffset: GLuint, length: GLuint? = empty)

    operation bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: BufferSource)

    operation bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: ArrayBufferView, srcOffset: GLuint, length: GLuint? = empty)

    operation compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr)

    operation compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset: GLuint? = empty, srcLengthOverride: GLuint? = empty)

    operation compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr)

    operation compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset: GLuint? = empty, srcLengthOverride: GLuint? = empty)

    operation readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type`: GLenum, dstData: ArrayBufferView?)

    operation readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type`: GLenum, offset: GLintptr)

    operation readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type`: GLenum, dstData: ArrayBufferView, dstOffset: GLuint)

    operation texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type`: GLenum, pixels: ArrayBufferView?)

    operation texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type`: GLenum, source: TexImageSource)

    operation texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type`: GLenum, pboOffset: GLintptr)

    operation texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type`: GLenum, source: TexImageSource)

    operation texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type`: GLenum, srcData: ArrayBufferView, srcOffset: GLuint)

    operation texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type`: GLenum, pixels: ArrayBufferView?)

    operation texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type`: GLenum, source: TexImageSource)

    operation texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type`: GLenum, pboOffset: GLintptr)

    operation texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type`: GLenum, source: TexImageSource)

    operation texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type`: GLenum, srcData: ArrayBufferView, srcOffset: GLuint)

    operation uniform1fv(location: WebGLUniformLocation?, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform1iv(location: WebGLUniformLocation?, data: Int32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform2fv(location: WebGLUniformLocation?, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform2iv(location: WebGLUniformLocation?, data: Int32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform3fv(location: WebGLUniformLocation?, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform3iv(location: WebGLUniformLocation?, data: Int32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform4fv(location: WebGLUniformLocation?, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniform4iv(location: WebGLUniformLocation?, data: Int32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniformMatrix2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniformMatrix3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)

    operation uniformMatrix4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List, srcOffset: GLuint? = empty, srcLength: GLuint? = empty)
  }


  /**
  * Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo)
  */

  type WebGLActiveInfo = aspect
  {
    guarded
    name: Text

    guarded
    size: GLint

    guarded
    type`: GLenum
  }


  /*(!) var */ WebGLActiveInfo: object { prototype: WebGLActiveInfo; on create(): WebGLActiveInfo }


  /**
  * Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLBuffer)
  */

  type WebGLBuffer = aspect
  {

  }


  /*(!) var */ WebGLBuffer: object { prototype: WebGLBuffer; on create(): WebGLBuffer }


  /**
  * The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent)
  */

  type WebGLContextEvent = aspect Event
  {
    guarded
    statusMessage: Text
  }


  /*(!) var */ WebGLContextEvent: object { prototype: WebGLContextEvent; on create(type`: Text, eventInit: WebGLContextEventInit? = empty): WebGLContextEvent }


  /**
  * Part of the WebGL API and represents a collection of buffers that serve as a rendering destination.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLFramebuffer)
  */

  type WebGLFramebuffer = aspect
  {

  }


  /*(!) var */ WebGLFramebuffer: object { prototype: WebGLFramebuffer; on create(): WebGLFramebuffer }


  /**
  * The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLProgram)
  */

  type WebGLProgram = aspect
  {

  }


  /*(!) var */ WebGLProgram: object { prototype: WebGLProgram; on create(): WebGLProgram }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLQuery) */

  type WebGLQuery = aspect
  {

  }


  /*(!) var */ WebGLQuery: object { prototype: WebGLQuery; on create(): WebGLQuery }


  /**
  * Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderbuffer)
  */

  type WebGLRenderbuffer = aspect
  {

  }


  /*(!) var */ WebGLRenderbuffer: object { prototype: WebGLRenderbuffer; on create(): WebGLRenderbuffer }


  /**
  * Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext)
  */

  type WebGLRenderingContext = aspect WebGLRenderingContextBase, WebGLRenderingContextOverloads
  {

  }


  /*(!) var */ WebGLRenderingContext: object { prototype: WebGLRenderingContext; on create(): WebGLRenderingContext; guarded DEPTH_BUFFER_BIT = 0x00000100; guarded STENCIL_BUFFER_BIT = 0x00000400; guarded COLOR_BUFFER_BIT = 0x00004000; guarded POINTS = 0x0000; guarded LINES = 0x0001; guarded LINE_LOOP = 0x0002; guarded LINE_STRIP = 0x0003; guarded TRIANGLES = 0x0004; guarded TRIANGLE_STRIP = 0x0005; guarded TRIANGLE_FAN = 0x0006; guarded ZERO: 0; guarded ONE: 1; guarded SRC_COLOR = 0x0300; guarded ONE_MINUS_SRC_COLOR = 0x0301; guarded SRC_ALPHA = 0x0302; guarded ONE_MINUS_SRC_ALPHA = 0x0303; guarded DST_ALPHA = 0x0304; guarded ONE_MINUS_DST_ALPHA = 0x0305; guarded DST_COLOR = 0x0306; guarded ONE_MINUS_DST_COLOR = 0x0307; guarded SRC_ALPHA_SATURATE = 0x0308; guarded FUNC_ADD = 0x8006; guarded BLEND_EQUATION = 0x8009; guarded BLEND_EQUATION_RGB = 0x8009; guarded BLEND_EQUATION_ALPHA = 0x883D; guarded FUNC_SUBTRACT = 0x800A; guarded FUNC_REVERSE_SUBTRACT = 0x800B; guarded BLEND_DST_RGB = 0x80C8; guarded BLEND_SRC_RGB = 0x80C9; guarded BLEND_DST_ALPHA = 0x80CA; guarded BLEND_SRC_ALPHA = 0x80CB; guarded CONSTANT_COLOR = 0x8001; guarded ONE_MINUS_CONSTANT_COLOR = 0x8002; guarded CONSTANT_ALPHA = 0x8003; guarded ONE_MINUS_CONSTANT_ALPHA = 0x8004; guarded BLEND_COLOR = 0x8005; guarded ARRAY_BUFFER = 0x8892; guarded ELEMENT_ARRAY_BUFFER = 0x8893; guarded ARRAY_BUFFER_BINDING = 0x8894; guarded ELEMENT_ARRAY_BUFFER_BINDING = 0x8895; guarded STREAM_DRAW = 0x88E0; guarded STATIC_DRAW = 0x88E4; guarded DYNAMIC_DRAW = 0x88E8; guarded BUFFER_SIZE = 0x8764; guarded BUFFER_USAGE = 0x8765; guarded CURRENT_VERTEX_ATTRIB = 0x8626; guarded FRONT = 0x0404; guarded BACK = 0x0405; guarded FRONT_AND_BACK = 0x0408; guarded CULL_FACE = 0x0B44; guarded BLEND = 0x0BE2; guarded DITHER = 0x0BD0; guarded STENCIL_TEST = 0x0B90; guarded DEPTH_TEST = 0x0B71; guarded SCISSOR_TEST = 0x0C11; guarded POLYGON_OFFSET_FILL = 0x8037; guarded SAMPLE_ALPHA_TO_COVERAGE = 0x809E; guarded SAMPLE_COVERAGE = 0x80A0; guarded NO_ERROR: 0; guarded INVALID_ENUM = 0x0500; guarded INVALID_VALUE = 0x0501; guarded INVALID_OPERATION = 0x0502; guarded OUT_OF_MEMORY = 0x0505; guarded CW = 0x0900; guarded CCW = 0x0901; guarded LINE_WIDTH = 0x0B21; guarded ALIASED_POINT_SIZE_RANGE = 0x846D; guarded ALIASED_LINE_WIDTH_RANGE = 0x846E; guarded CULL_FACE_MODE = 0x0B45; guarded FRONT_FACE = 0x0B46; guarded DEPTH_RANGE = 0x0B70; guarded DEPTH_WRITEMASK = 0x0B72; guarded DEPTH_CLEAR_VALUE = 0x0B73; guarded DEPTH_FUNC = 0x0B74; guarded STENCIL_CLEAR_VALUE = 0x0B91; guarded STENCIL_FUNC = 0x0B92; guarded STENCIL_FAIL = 0x0B94; guarded STENCIL_PASS_DEPTH_FAIL = 0x0B95; guarded STENCIL_PASS_DEPTH_PASS = 0x0B96; guarded STENCIL_REF = 0x0B97; guarded STENCIL_VALUE_MASK = 0x0B93; guarded STENCIL_WRITEMASK = 0x0B98; guarded STENCIL_BACK_FUNC = 0x8800; guarded STENCIL_BACK_FAIL = 0x8801; guarded STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802; guarded STENCIL_BACK_PASS_DEPTH_PASS = 0x8803; guarded STENCIL_BACK_REF = 0x8CA3; guarded STENCIL_BACK_VALUE_MASK = 0x8CA4; guarded STENCIL_BACK_WRITEMASK = 0x8CA5; guarded VIEWPORT = 0x0BA2; guarded SCISSOR_BOX = 0x0C10; guarded COLOR_CLEAR_VALUE = 0x0C22; guarded COLOR_WRITEMASK = 0x0C23; guarded UNPACK_ALIGNMENT = 0x0CF5; guarded PACK_ALIGNMENT = 0x0D05; guarded MAX_TEXTURE_SIZE = 0x0D33; guarded MAX_VIEWPORT_DIMS = 0x0D3A; guarded SUBPIXEL_BITS = 0x0D50; guarded RED_BITS = 0x0D52; guarded GREEN_BITS = 0x0D53; guarded BLUE_BITS = 0x0D54; guarded ALPHA_BITS = 0x0D55; guarded DEPTH_BITS = 0x0D56; guarded STENCIL_BITS = 0x0D57; guarded POLYGON_OFFSET_UNITS = 0x2A00; guarded POLYGON_OFFSET_FACTOR = 0x8038; guarded TEXTURE_BINDING_2D = 0x8069; guarded SAMPLE_BUFFERS = 0x80A8; guarded SAMPLES = 0x80A9; guarded SAMPLE_COVERAGE_VALUE = 0x80AA; guarded SAMPLE_COVERAGE_INVERT = 0x80AB; guarded COMPRESSED_TEXTURE_FORMATS = 0x86A3; guarded DONT_CARE = 0x1100; guarded FASTEST = 0x1101; guarded NICEST = 0x1102; guarded GENERATE_MIPMAP_HINT = 0x8192; guarded BYTE = 0x1400; guarded UNSIGNED_BYTE = 0x1401; guarded SHORT = 0x1402; guarded UNSIGNED_SHORT = 0x1403; guarded INT = 0x1404; guarded UNSIGNED_INT = 0x1405; guarded FLOAT = 0x1406; guarded DEPTH_COMPONENT = 0x1902; guarded ALPHA = 0x1906; guarded RGB = 0x1907; guarded RGBA = 0x1908; guarded LUMINANCE = 0x1909; guarded LUMINANCE_ALPHA = 0x190A; guarded UNSIGNED_SHORT_4_4_4_4 = 0x8033; guarded UNSIGNED_SHORT_5_5_5_1 = 0x8034; guarded UNSIGNED_SHORT_5_6_5 = 0x8363; guarded FRAGMENT_SHADER = 0x8B30; guarded VERTEX_SHADER = 0x8B31; guarded MAX_VERTEX_ATTRIBS = 0x8869; guarded MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB; guarded MAX_VARYING_VECTORS = 0x8DFC; guarded MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D; guarded MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C; guarded MAX_TEXTURE_IMAGE_UNITS = 0x8872; guarded MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD; guarded SHADER_TYPE = 0x8B4F; guarded DELETE_STATUS = 0x8B80; guarded LINK_STATUS = 0x8B82; guarded VALIDATE_STATUS = 0x8B83; guarded ATTACHED_SHADERS = 0x8B85; guarded ACTIVE_UNIFORMS = 0x8B86; guarded ACTIVE_ATTRIBUTES = 0x8B89; guarded SHADING_LANGUAGE_VERSION = 0x8B8C; guarded CURRENT_PROGRAM = 0x8B8D; guarded NEVER = 0x0200; guarded LESS = 0x0201; guarded EQUAL = 0x0202; guarded LEQUAL = 0x0203; guarded GREATER = 0x0204; guarded NOTEQUAL = 0x0205; guarded GEQUAL = 0x0206; guarded ALWAYS = 0x0207; guarded KEEP = 0x1E00; guarded REPLACE = 0x1E01; guarded INCR = 0x1E02; guarded DECR = 0x1E03; guarded INVERT = 0x150A; guarded INCR_WRAP = 0x8507; guarded DECR_WRAP = 0x8508; guarded VENDOR = 0x1F00; guarded RENDERER = 0x1F01; guarded VERSION = 0x1F02; guarded NEAREST = 0x2600; guarded LINEAR = 0x2601; guarded NEAREST_MIPMAP_NEAREST = 0x2700; guarded LINEAR_MIPMAP_NEAREST = 0x2701; guarded NEAREST_MIPMAP_LINEAR = 0x2702; guarded LINEAR_MIPMAP_LINEAR = 0x2703; guarded TEXTURE_MAG_FILTER = 0x2800; guarded TEXTURE_MIN_FILTER = 0x2801; guarded TEXTURE_WRAP_S = 0x2802; guarded TEXTURE_WRAP_T = 0x2803; guarded TEXTURE_2D = 0x0DE1; guarded TEXTURE = 0x1702; guarded TEXTURE_CUBE_MAP = 0x8513; guarded TEXTURE_BINDING_CUBE_MAP = 0x8514; guarded TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515; guarded TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516; guarded TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517; guarded TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518; guarded TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519; guarded TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A; guarded MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C; guarded TEXTURE0 = 0x84C0; guarded TEXTURE1 = 0x84C1; guarded TEXTURE2 = 0x84C2; guarded TEXTURE3 = 0x84C3; guarded TEXTURE4 = 0x84C4; guarded TEXTURE5 = 0x84C5; guarded TEXTURE6 = 0x84C6; guarded TEXTURE7 = 0x84C7; guarded TEXTURE8 = 0x84C8; guarded TEXTURE9 = 0x84C9; guarded TEXTURE10 = 0x84CA; guarded TEXTURE11 = 0x84CB; guarded TEXTURE12 = 0x84CC; guarded TEXTURE13 = 0x84CD; guarded TEXTURE14 = 0x84CE; guarded TEXTURE15 = 0x84CF; guarded TEXTURE16 = 0x84D0; guarded TEXTURE17 = 0x84D1; guarded TEXTURE18 = 0x84D2; guarded TEXTURE19 = 0x84D3; guarded TEXTURE20 = 0x84D4; guarded TEXTURE21 = 0x84D5; guarded TEXTURE22 = 0x84D6; guarded TEXTURE23 = 0x84D7; guarded TEXTURE24 = 0x84D8; guarded TEXTURE25 = 0x84D9; guarded TEXTURE26 = 0x84DA; guarded TEXTURE27 = 0x84DB; guarded TEXTURE28 = 0x84DC; guarded TEXTURE29 = 0x84DD; guarded TEXTURE30 = 0x84DE; guarded TEXTURE31 = 0x84DF; guarded ACTIVE_TEXTURE = 0x84E0; guarded REPEAT = 0x2901; guarded CLAMP_TO_EDGE = 0x812F; guarded MIRRORED_REPEAT = 0x8370; guarded FLOAT_VEC2 = 0x8B50; guarded FLOAT_VEC3 = 0x8B51; guarded FLOAT_VEC4 = 0x8B52; guarded INT_VEC2 = 0x8B53; guarded INT_VEC3 = 0x8B54; guarded INT_VEC4 = 0x8B55; guarded BOOL = 0x8B56; guarded BOOL_VEC2 = 0x8B57; guarded BOOL_VEC3 = 0x8B58; guarded BOOL_VEC4 = 0x8B59; guarded FLOAT_MAT2 = 0x8B5A; guarded FLOAT_MAT3 = 0x8B5B; guarded FLOAT_MAT4 = 0x8B5C; guarded SAMPLER_2D = 0x8B5E; guarded SAMPLER_CUBE = 0x8B60; guarded VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622; guarded VERTEX_ATTRIB_ARRAY_SIZE = 0x8623; guarded VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624; guarded VERTEX_ATTRIB_ARRAY_TYPE = 0x8625; guarded VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A; guarded VERTEX_ATTRIB_ARRAY_POINTER = 0x8645; guarded VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F; guarded IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A; guarded IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B; guarded COMPILE_STATUS = 0x8B81; guarded LOW_FLOAT = 0x8DF0; guarded MEDIUM_FLOAT = 0x8DF1; guarded HIGH_FLOAT = 0x8DF2; guarded LOW_INT = 0x8DF3; guarded MEDIUM_INT = 0x8DF4; guarded HIGH_INT = 0x8DF5; guarded FRAMEBUFFER = 0x8D40; guarded RENDERBUFFER = 0x8D41; guarded RGBA4 = 0x8056; guarded RGB5_A1 = 0x8057; guarded RGB565 = 0x8D62; guarded DEPTH_COMPONENT16 = 0x81A5; guarded STENCIL_INDEX8 = 0x8D48; guarded DEPTH_STENCIL = 0x84F9; guarded RENDERBUFFER_WIDTH = 0x8D42; guarded RENDERBUFFER_HEIGHT = 0x8D43; guarded RENDERBUFFER_INTERNAL_FORMAT = 0x8D44; guarded RENDERBUFFER_RED_SIZE = 0x8D50; guarded RENDERBUFFER_GREEN_SIZE = 0x8D51; guarded RENDERBUFFER_BLUE_SIZE = 0x8D52; guarded RENDERBUFFER_ALPHA_SIZE = 0x8D53; guarded RENDERBUFFER_DEPTH_SIZE = 0x8D54; guarded RENDERBUFFER_STENCIL_SIZE = 0x8D55; guarded FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0; guarded FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1; guarded FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2; guarded FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3; guarded COLOR_ATTACHMENT0 = 0x8CE0; guarded DEPTH_ATTACHMENT = 0x8D00; guarded STENCIL_ATTACHMENT = 0x8D20; guarded DEPTH_STENCIL_ATTACHMENT = 0x821A; guarded NONE: 0; guarded FRAMEBUFFER_COMPLETE = 0x8CD5; guarded FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6; guarded FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7; guarded FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9; guarded FRAMEBUFFER_UNSUPPORTED = 0x8CDD; guarded FRAMEBUFFER_BINDING = 0x8CA6; guarded RENDERBUFFER_BINDING = 0x8CA7; guarded MAX_RENDERBUFFER_SIZE = 0x84E8; guarded INVALID_FRAMEBUFFER_OPERATION = 0x0506; guarded UNPACK_FLIP_Y_WEBGL = 0x9240; guarded UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241; guarded CONTEXT_LOST_WEBGL = 0x9242; guarded UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243; guarded BROWSER_DEFAULT_WEBGL = 0x9244 }


  type WebGLRenderingContextBase = aspect
  {
    guarded
    canvas: Object? /*(!)HTMLCanvasElement | OffscreenCanvas*/

    drawingBufferColorSpace: PredefinedColorSpace

    guarded
    drawingBufferHeight: GLsizei

    guarded
    drawingBufferWidth: GLsizei

    operation activeTexture(texture: GLenum)

    operation attachShader(program: WebGLProgram, shader: WebGLShader)

    operation bindAttribLocation(program: WebGLProgram, index: GLuint, name: Text)

    operation bindBuffer(target: GLenum, buffer: WebGLBuffer?)

    operation bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer?)

    operation bindRenderbuffer(target: GLenum, renderbuffer: WebGLRenderbuffer?)

    operation bindTexture(target: GLenum, texture: WebGLTexture?)

    operation blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf)

    operation blendEquation(mode: GLenum)

    operation blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum)

    operation blendFunc(sfactor: GLenum, dfactor: GLenum)

    operation blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum)

    operation checkFramebufferStatus(target: GLenum): GLenum

    operation clear(mask: GLbitfield)

    operation clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf)

    operation clearDepth(depth: GLclampf)

    operation clearStencil(s: GLint)

    operation colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean)

    operation compileShader(shader: WebGLShader)

    operation copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint)

    operation copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)

    operation createBuffer(): WebGLBuffer?

    operation createFramebuffer(): WebGLFramebuffer?

    operation createProgram(): WebGLProgram?

    operation createRenderbuffer(): WebGLRenderbuffer?

    operation createShader(type`: GLenum): WebGLShader?

    operation createTexture(): WebGLTexture?

    operation cullFace(mode: GLenum)

    operation deleteBuffer(buffer: WebGLBuffer?)

    operation deleteFramebuffer(framebuffer: WebGLFramebuffer?)

    operation deleteProgram(program: WebGLProgram?)

    operation deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?)

    operation deleteShader(shader: WebGLShader?)

    operation deleteTexture(texture: WebGLTexture?)

    operation depthFunc(func: GLenum)

    operation depthMask(flag: GLboolean)

    operation depthRange(zNear: GLclampf, zFar: GLclampf)

    operation detachShader(program: WebGLProgram, shader: WebGLShader)

    operation disable(cap: GLenum)

    operation disableVertexAttribArray(index: GLuint)

    operation drawArrays(mode: GLenum, first: GLint, count: GLsizei)

    operation drawElements(mode: GLenum, count: GLsizei, type`: GLenum, offset: GLintptr)

    operation enable(cap: GLenum)

    operation enableVertexAttribArray(index: GLuint)

    operation finish()

    operation flush()

    operation framebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer?)

    operation framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture?, level: GLint)

    operation frontFace(mode: GLenum)

    operation generateMipmap(target: GLenum)

    operation getActiveAttrib(program: WebGLProgram, index: GLuint): WebGLActiveInfo?

    operation getActiveUniform(program: WebGLProgram, index: GLuint): WebGLActiveInfo?

    operation getAttachedShaders(program: WebGLProgram): Список<WebGLShader>?

    operation getAttribLocation(program: WebGLProgram, name: Text): GLint

    operation getBufferParameter(target: GLenum, pname: GLenum): /*(!) any */ Object?

    operation getContextAttributes(): WebGLContextAttributes?

    operation getError(): GLenum

    operation getExtension(extensionName: Text): ANGLE_instanced_arrays?

    // operation getExtension(extensionName: "ANGLE_instanced_arrays"): ANGLE_instanced_arrays?

    // operation getExtension(extensionName: "EXT_blend_minmax"): EXT_blend_minmax?

    // operation getExtension(extensionName: "EXT_color_buffer_float"): EXT_color_buffer_float?

    // operation getExtension(extensionName: "EXT_color_buffer_half_float"): EXT_color_buffer_half_float?

    // operation getExtension(extensionName: "EXT_float_blend"): EXT_float_blend?

    // operation getExtension(extensionName: "EXT_frag_depth"): EXT_frag_depth?

    // operation getExtension(extensionName: "EXT_sRGB"): EXT_sRGB?

    // operation getExtension(extensionName: "EXT_shader_texture_lod"): EXT_shader_texture_lod?

    // operation getExtension(extensionName: "EXT_texture_compression_bptc"): EXT_texture_compression_bptc?

    // operation getExtension(extensionName: "EXT_texture_compression_rgtc"): EXT_texture_compression_rgtc?

    // operation getExtension(extensionName: "EXT_texture_filter_anisotropic"): EXT_texture_filter_anisotropic?

    // operation getExtension(extensionName: "KHR_parallel_shader_compile"): KHR_parallel_shader_compile?

    // operation getExtension(extensionName: "OES_element_index_uint"): OES_element_index_uint?

    // operation getExtension(extensionName: "OES_fbo_render_mipmap"): OES_fbo_render_mipmap?

    // operation getExtension(extensionName: "OES_standard_derivatives"): OES_standard_derivatives?

    // operation getExtension(extensionName: "OES_texture_float"): OES_texture_float?

    // operation getExtension(extensionName: "OES_texture_float_linear"): OES_texture_float_linear?

    // operation getExtension(extensionName: "OES_texture_half_float"): OES_texture_half_float?

    // operation getExtension(extensionName: "OES_texture_half_float_linear"): OES_texture_half_float_linear?

    // operation getExtension(extensionName: "OES_vertex_array_object"): OES_vertex_array_object?

    // operation getExtension(extensionName: "OVR_multiview2"): OVR_multiview2?

    // operation getExtension(extensionName: "WEBGL_color_buffer_float"): WEBGL_color_buffer_float?

    // operation getExtension(extensionName: "WEBGL_compressed_texture_astc"): WEBGL_compressed_texture_astc?

    // operation getExtension(extensionName: "WEBGL_compressed_texture_etc"): WEBGL_compressed_texture_etc?

    // operation getExtension(extensionName: "WEBGL_compressed_texture_etc1"): WEBGL_compressed_texture_etc1?

    // operation getExtension(extensionName: "WEBGL_compressed_texture_pvrtc"): WEBGL_compressed_texture_pvrtc?

    // operation getExtension(extensionName: "WEBGL_compressed_texture_s3tc"): WEBGL_compressed_texture_s3tc?

    // operation getExtension(extensionName: "WEBGL_compressed_texture_s3tc_srgb"): WEBGL_compressed_texture_s3tc_srgb?

    // operation getExtension(extensionName: "WEBGL_debug_renderer_info"): WEBGL_debug_renderer_info?

    // operation getExtension(extensionName: "WEBGL_debug_shaders"): WEBGL_debug_shaders?

    // operation getExtension(extensionName: "WEBGL_depth_texture"): WEBGL_depth_texture?

    // operation getExtension(extensionName: "WEBGL_draw_buffers"): WEBGL_draw_buffers?

    // operation getExtension(extensionName: "WEBGL_lose_context"): WEBGL_lose_context?

    // operation getExtension(extensionName: "WEBGL_multi_draw"): WEBGL_multi_draw?

    operation getExtension(name: Text): /*(!) any */ Object?

    operation getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum): /*(!) any */ Object?

    operation getParameter(pname: GLenum): /*(!) any */ Object?

    operation getProgramInfoLog(program: WebGLProgram): Text?

    operation getProgramParameter(program: WebGLProgram, pname: GLenum): /*(!) any */ Object?

    operation getRenderbufferParameter(target: GLenum, pname: GLenum): /*(!) any */ Object?

    operation getShaderInfoLog(shader: WebGLShader): Text?

    operation getShaderParameter(shader: WebGLShader, pname: GLenum): /*(!) any */ Object?

    operation getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): WebGLShaderPrecisionFormat?

    operation getShaderSource(shader: WebGLShader): Text?

    operation getSupportedExtensions(): Список<Текст>?

    operation getTexParameter(target: GLenum, pname: GLenum): /*(!) any */ Object?

    operation getUniform(program: WebGLProgram, location: WebGLUniformLocation): /*(!) any */ Object?

    operation getUniformLocation(program: WebGLProgram, name: Text): WebGLUniformLocation?

    operation getVertexAttrib(index: GLuint, pname: GLenum): /*(!) any */ Object?

    operation getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr

    operation hint(target: GLenum, mode: GLenum)

    operation isBuffer(buffer: WebGLBuffer?): GLboolean

    operation isContextLost(): YesNo

    operation isEnabled(cap: GLenum): GLboolean

    operation isFramebuffer(framebuffer: WebGLFramebuffer?): GLboolean

    operation isProgram(program: WebGLProgram?): GLboolean

    operation isRenderbuffer(renderbuffer: WebGLRenderbuffer?): GLboolean

    operation isShader(shader: WebGLShader?): GLboolean

    operation isTexture(texture: WebGLTexture?): GLboolean

    operation lineWidth(width: GLfloat)

    operation linkProgram(program: WebGLProgram)

    operation pixelStorei(pname: GLenum, param: Object? /*(!)GLint | GLboolean*/)

    operation polygonOffset(factor: GLfloat, units: GLfloat)

    operation renderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei)

    operation sampleCoverage(value: GLclampf, invert: GLboolean)

    operation scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei)

    operation shaderSource(shader: WebGLShader, source: Text)

    operation stencilFunc(func: GLenum, ref`: GLint, mask: GLuint)

    operation stencilFuncSeparate(face: GLenum, func: GLenum, ref`: GLint, mask: GLuint)

    operation stencilMask(mask: GLuint)

    operation stencilMaskSeparate(face: GLenum, mask: GLuint)

    operation stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum)

    operation stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum)

    operation texParameterf(target: GLenum, pname: GLenum, param: GLfloat)

    operation texParameteri(target: GLenum, pname: GLenum, param: GLint)

    operation uniform1f(location: WebGLUniformLocation?, x: GLfloat)

    operation uniform1i(location: WebGLUniformLocation?, x: GLint)

    operation uniform2f(location: WebGLUniformLocation?, x: GLfloat, y: GLfloat)

    operation uniform2i(location: WebGLUniformLocation?, x: GLint, y: GLint)

    operation uniform3f(location: WebGLUniformLocation?, x: GLfloat, y: GLfloat, z: GLfloat)

    operation uniform3i(location: WebGLUniformLocation?, x: GLint, y: GLint, z: GLint)

    operation uniform4f(location: WebGLUniformLocation?, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)

    operation uniform4i(location: WebGLUniformLocation?, x: GLint, y: GLint, z: GLint, w: GLint)

    operation useProgram(program: WebGLProgram?)

    operation validateProgram(program: WebGLProgram)

    operation vertexAttrib1f(index: GLuint, x: GLfloat)

    operation vertexAttrib1fv(index: GLuint, values: Float32List)

    operation vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat)

    operation vertexAttrib2fv(index: GLuint, values: Float32List)

    operation vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)

    operation vertexAttrib3fv(index: GLuint, values: Float32List)

    operation vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)

    operation vertexAttrib4fv(index: GLuint, values: Float32List)

    operation vertexAttribPointer(index: GLuint, size: GLint, type`: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr)

    operation viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei)

    guarded
    DEPTH_BUFFER_BIT = 0x00000100

    guarded
    STENCIL_BUFFER_BIT = 0x00000400

    guarded
    COLOR_BUFFER_BIT = 0x00004000

    guarded
    POINTS = 0x0000

    guarded
    LINES = 0x0001

    guarded
    LINE_LOOP = 0x0002

    guarded
    LINE_STRIP = 0x0003

    guarded
    TRIANGLES = 0x0004

    guarded
    TRIANGLE_STRIP = 0x0005

    guarded
    TRIANGLE_FAN = 0x0006

    guarded
    ZERO: 0

    guarded
    ONE: 1

    guarded
    SRC_COLOR = 0x0300

    guarded
    ONE_MINUS_SRC_COLOR = 0x0301

    guarded
    SRC_ALPHA = 0x0302

    guarded
    ONE_MINUS_SRC_ALPHA = 0x0303

    guarded
    DST_ALPHA = 0x0304

    guarded
    ONE_MINUS_DST_ALPHA = 0x0305

    guarded
    DST_COLOR = 0x0306

    guarded
    ONE_MINUS_DST_COLOR = 0x0307

    guarded
    SRC_ALPHA_SATURATE = 0x0308

    guarded
    FUNC_ADD = 0x8006

    guarded
    BLEND_EQUATION = 0x8009

    guarded
    BLEND_EQUATION_RGB = 0x8009

    guarded
    BLEND_EQUATION_ALPHA = 0x883D

    guarded
    FUNC_SUBTRACT = 0x800A

    guarded
    FUNC_REVERSE_SUBTRACT = 0x800B

    guarded
    BLEND_DST_RGB = 0x80C8

    guarded
    BLEND_SRC_RGB = 0x80C9

    guarded
    BLEND_DST_ALPHA = 0x80CA

    guarded
    BLEND_SRC_ALPHA = 0x80CB

    guarded
    CONSTANT_COLOR = 0x8001

    guarded
    ONE_MINUS_CONSTANT_COLOR = 0x8002

    guarded
    CONSTANT_ALPHA = 0x8003

    guarded
    ONE_MINUS_CONSTANT_ALPHA = 0x8004

    guarded
    BLEND_COLOR = 0x8005

    guarded
    ARRAY_BUFFER = 0x8892

    guarded
    ELEMENT_ARRAY_BUFFER = 0x8893

    guarded
    ARRAY_BUFFER_BINDING = 0x8894

    guarded
    ELEMENT_ARRAY_BUFFER_BINDING = 0x8895

    guarded
    STREAM_DRAW = 0x88E0

    guarded
    STATIC_DRAW = 0x88E4

    guarded
    DYNAMIC_DRAW = 0x88E8

    guarded
    BUFFER_SIZE = 0x8764

    guarded
    BUFFER_USAGE = 0x8765

    guarded
    CURRENT_VERTEX_ATTRIB = 0x8626

    guarded
    FRONT = 0x0404

    guarded
    BACK = 0x0405

    guarded
    FRONT_AND_BACK = 0x0408

    guarded
    CULL_FACE = 0x0B44

    guarded
    BLEND = 0x0BE2

    guarded
    DITHER = 0x0BD0

    guarded
    STENCIL_TEST = 0x0B90

    guarded
    DEPTH_TEST = 0x0B71

    guarded
    SCISSOR_TEST = 0x0C11

    guarded
    POLYGON_OFFSET_FILL = 0x8037

    guarded
    SAMPLE_ALPHA_TO_COVERAGE = 0x809E

    guarded
    SAMPLE_COVERAGE = 0x80A0

    guarded
    NO_ERROR: 0

    guarded
    INVALID_ENUM = 0x0500

    guarded
    INVALID_VALUE = 0x0501

    guarded
    INVALID_OPERATION = 0x0502

    guarded
    OUT_OF_MEMORY = 0x0505

    guarded
    CW = 0x0900

    guarded
    CCW = 0x0901

    guarded
    LINE_WIDTH = 0x0B21

    guarded
    ALIASED_POINT_SIZE_RANGE = 0x846D

    guarded
    ALIASED_LINE_WIDTH_RANGE = 0x846E

    guarded
    CULL_FACE_MODE = 0x0B45

    guarded
    FRONT_FACE = 0x0B46

    guarded
    DEPTH_RANGE = 0x0B70

    guarded
    DEPTH_WRITEMASK = 0x0B72

    guarded
    DEPTH_CLEAR_VALUE = 0x0B73

    guarded
    DEPTH_FUNC = 0x0B74

    guarded
    STENCIL_CLEAR_VALUE = 0x0B91

    guarded
    STENCIL_FUNC = 0x0B92

    guarded
    STENCIL_FAIL = 0x0B94

    guarded
    STENCIL_PASS_DEPTH_FAIL = 0x0B95

    guarded
    STENCIL_PASS_DEPTH_PASS = 0x0B96

    guarded
    STENCIL_REF = 0x0B97

    guarded
    STENCIL_VALUE_MASK = 0x0B93

    guarded
    STENCIL_WRITEMASK = 0x0B98

    guarded
    STENCIL_BACK_FUNC = 0x8800

    guarded
    STENCIL_BACK_FAIL = 0x8801

    guarded
    STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802

    guarded
    STENCIL_BACK_PASS_DEPTH_PASS = 0x8803

    guarded
    STENCIL_BACK_REF = 0x8CA3

    guarded
    STENCIL_BACK_VALUE_MASK = 0x8CA4

    guarded
    STENCIL_BACK_WRITEMASK = 0x8CA5

    guarded
    VIEWPORT = 0x0BA2

    guarded
    SCISSOR_BOX = 0x0C10

    guarded
    COLOR_CLEAR_VALUE = 0x0C22

    guarded
    COLOR_WRITEMASK = 0x0C23

    guarded
    UNPACK_ALIGNMENT = 0x0CF5

    guarded
    PACK_ALIGNMENT = 0x0D05

    guarded
    MAX_TEXTURE_SIZE = 0x0D33

    guarded
    MAX_VIEWPORT_DIMS = 0x0D3A

    guarded
    SUBPIXEL_BITS = 0x0D50

    guarded
    RED_BITS = 0x0D52

    guarded
    GREEN_BITS = 0x0D53

    guarded
    BLUE_BITS = 0x0D54

    guarded
    ALPHA_BITS = 0x0D55

    guarded
    DEPTH_BITS = 0x0D56

    guarded
    STENCIL_BITS = 0x0D57

    guarded
    POLYGON_OFFSET_UNITS = 0x2A00

    guarded
    POLYGON_OFFSET_FACTOR = 0x8038

    guarded
    TEXTURE_BINDING_2D = 0x8069

    guarded
    SAMPLE_BUFFERS = 0x80A8

    guarded
    SAMPLES = 0x80A9

    guarded
    SAMPLE_COVERAGE_VALUE = 0x80AA

    guarded
    SAMPLE_COVERAGE_INVERT = 0x80AB

    guarded
    COMPRESSED_TEXTURE_FORMATS = 0x86A3

    guarded
    DONT_CARE = 0x1100

    guarded
    FASTEST = 0x1101

    guarded
    NICEST = 0x1102

    guarded
    GENERATE_MIPMAP_HINT = 0x8192

    guarded
    BYTE = 0x1400

    guarded
    UNSIGNED_BYTE = 0x1401

    guarded
    SHORT = 0x1402

    guarded
    UNSIGNED_SHORT = 0x1403

    guarded
    INT = 0x1404

    guarded
    UNSIGNED_INT = 0x1405

    guarded
    FLOAT = 0x1406

    guarded
    DEPTH_COMPONENT = 0x1902

    guarded
    ALPHA = 0x1906

    guarded
    RGB = 0x1907

    guarded
    RGBA = 0x1908

    guarded
    LUMINANCE = 0x1909

    guarded
    LUMINANCE_ALPHA = 0x190A

    guarded
    UNSIGNED_SHORT_4_4_4_4 = 0x8033

    guarded
    UNSIGNED_SHORT_5_5_5_1 = 0x8034

    guarded
    UNSIGNED_SHORT_5_6_5 = 0x8363

    guarded
    FRAGMENT_SHADER = 0x8B30

    guarded
    VERTEX_SHADER = 0x8B31

    guarded
    MAX_VERTEX_ATTRIBS = 0x8869

    guarded
    MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB

    guarded
    MAX_VARYING_VECTORS = 0x8DFC

    guarded
    MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D

    guarded
    MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C

    guarded
    MAX_TEXTURE_IMAGE_UNITS = 0x8872

    guarded
    MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD

    guarded
    SHADER_TYPE = 0x8B4F

    guarded
    DELETE_STATUS = 0x8B80

    guarded
    LINK_STATUS = 0x8B82

    guarded
    VALIDATE_STATUS = 0x8B83

    guarded
    ATTACHED_SHADERS = 0x8B85

    guarded
    ACTIVE_UNIFORMS = 0x8B86

    guarded
    ACTIVE_ATTRIBUTES = 0x8B89

    guarded
    SHADING_LANGUAGE_VERSION = 0x8B8C

    guarded
    CURRENT_PROGRAM = 0x8B8D

    guarded
    NEVER = 0x0200

    guarded
    LESS = 0x0201

    guarded
    EQUAL = 0x0202

    guarded
    LEQUAL = 0x0203

    guarded
    GREATER = 0x0204

    guarded
    NOTEQUAL = 0x0205

    guarded
    GEQUAL = 0x0206

    guarded
    ALWAYS = 0x0207

    guarded
    KEEP = 0x1E00

    guarded
    REPLACE = 0x1E01

    guarded
    INCR = 0x1E02

    guarded
    DECR = 0x1E03

    guarded
    INVERT = 0x150A

    guarded
    INCR_WRAP = 0x8507

    guarded
    DECR_WRAP = 0x8508

    guarded
    VENDOR = 0x1F00

    guarded
    RENDERER = 0x1F01

    guarded
    VERSION = 0x1F02

    guarded
    NEAREST = 0x2600

    guarded
    LINEAR = 0x2601

    guarded
    NEAREST_MIPMAP_NEAREST = 0x2700

    guarded
    LINEAR_MIPMAP_NEAREST = 0x2701

    guarded
    NEAREST_MIPMAP_LINEAR = 0x2702

    guarded
    LINEAR_MIPMAP_LINEAR = 0x2703

    guarded
    TEXTURE_MAG_FILTER = 0x2800

    guarded
    TEXTURE_MIN_FILTER = 0x2801

    guarded
    TEXTURE_WRAP_S = 0x2802

    guarded
    TEXTURE_WRAP_T = 0x2803

    guarded
    TEXTURE_2D = 0x0DE1

    guarded
    TEXTURE = 0x1702

    guarded
    TEXTURE_CUBE_MAP = 0x8513

    guarded
    TEXTURE_BINDING_CUBE_MAP = 0x8514

    guarded
    TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515

    guarded
    TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516

    guarded
    TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517

    guarded
    TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518

    guarded
    TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519

    guarded
    TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A

    guarded
    MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C

    guarded
    TEXTURE0 = 0x84C0

    guarded
    TEXTURE1 = 0x84C1

    guarded
    TEXTURE2 = 0x84C2

    guarded
    TEXTURE3 = 0x84C3

    guarded
    TEXTURE4 = 0x84C4

    guarded
    TEXTURE5 = 0x84C5

    guarded
    TEXTURE6 = 0x84C6

    guarded
    TEXTURE7 = 0x84C7

    guarded
    TEXTURE8 = 0x84C8

    guarded
    TEXTURE9 = 0x84C9

    guarded
    TEXTURE10 = 0x84CA

    guarded
    TEXTURE11 = 0x84CB

    guarded
    TEXTURE12 = 0x84CC

    guarded
    TEXTURE13 = 0x84CD

    guarded
    TEXTURE14 = 0x84CE

    guarded
    TEXTURE15 = 0x84CF

    guarded
    TEXTURE16 = 0x84D0

    guarded
    TEXTURE17 = 0x84D1

    guarded
    TEXTURE18 = 0x84D2

    guarded
    TEXTURE19 = 0x84D3

    guarded
    TEXTURE20 = 0x84D4

    guarded
    TEXTURE21 = 0x84D5

    guarded
    TEXTURE22 = 0x84D6

    guarded
    TEXTURE23 = 0x84D7

    guarded
    TEXTURE24 = 0x84D8

    guarded
    TEXTURE25 = 0x84D9

    guarded
    TEXTURE26 = 0x84DA

    guarded
    TEXTURE27 = 0x84DB

    guarded
    TEXTURE28 = 0x84DC

    guarded
    TEXTURE29 = 0x84DD

    guarded
    TEXTURE30 = 0x84DE

    guarded
    TEXTURE31 = 0x84DF

    guarded
    ACTIVE_TEXTURE = 0x84E0

    guarded
    REPEAT = 0x2901

    guarded
    CLAMP_TO_EDGE = 0x812F

    guarded
    MIRRORED_REPEAT = 0x8370

    guarded
    FLOAT_VEC2 = 0x8B50

    guarded
    FLOAT_VEC3 = 0x8B51

    guarded
    FLOAT_VEC4 = 0x8B52

    guarded
    INT_VEC2 = 0x8B53

    guarded
    INT_VEC3 = 0x8B54

    guarded
    INT_VEC4 = 0x8B55

    guarded
    BOOL = 0x8B56

    guarded
    BOOL_VEC2 = 0x8B57

    guarded
    BOOL_VEC3 = 0x8B58

    guarded
    BOOL_VEC4 = 0x8B59

    guarded
    FLOAT_MAT2 = 0x8B5A

    guarded
    FLOAT_MAT3 = 0x8B5B

    guarded
    FLOAT_MAT4 = 0x8B5C

    guarded
    SAMPLER_2D = 0x8B5E

    guarded
    SAMPLER_CUBE = 0x8B60

    guarded
    VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622

    guarded
    VERTEX_ATTRIB_ARRAY_SIZE = 0x8623

    guarded
    VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624

    guarded
    VERTEX_ATTRIB_ARRAY_TYPE = 0x8625

    guarded
    VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A

    guarded
    VERTEX_ATTRIB_ARRAY_POINTER = 0x8645

    guarded
    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F

    guarded
    IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A

    guarded
    IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B

    guarded
    COMPILE_STATUS = 0x8B81

    guarded
    LOW_FLOAT = 0x8DF0

    guarded
    MEDIUM_FLOAT = 0x8DF1

    guarded
    HIGH_FLOAT = 0x8DF2

    guarded
    LOW_INT = 0x8DF3

    guarded
    MEDIUM_INT = 0x8DF4

    guarded
    HIGH_INT = 0x8DF5

    guarded
    FRAMEBUFFER = 0x8D40

    guarded
    RENDERBUFFER = 0x8D41

    guarded
    RGBA4 = 0x8056

    guarded
    RGB5_A1 = 0x8057

    guarded
    RGB565 = 0x8D62

    guarded
    DEPTH_COMPONENT16 = 0x81A5

    guarded
    STENCIL_INDEX8 = 0x8D48

    guarded
    DEPTH_STENCIL = 0x84F9

    guarded
    RENDERBUFFER_WIDTH = 0x8D42

    guarded
    RENDERBUFFER_HEIGHT = 0x8D43

    guarded
    RENDERBUFFER_INTERNAL_FORMAT = 0x8D44

    guarded
    RENDERBUFFER_RED_SIZE = 0x8D50

    guarded
    RENDERBUFFER_GREEN_SIZE = 0x8D51

    guarded
    RENDERBUFFER_BLUE_SIZE = 0x8D52

    guarded
    RENDERBUFFER_ALPHA_SIZE = 0x8D53

    guarded
    RENDERBUFFER_DEPTH_SIZE = 0x8D54

    guarded
    RENDERBUFFER_STENCIL_SIZE = 0x8D55

    guarded
    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0

    guarded
    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1

    guarded
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2

    guarded
    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3

    guarded
    COLOR_ATTACHMENT0 = 0x8CE0

    guarded
    DEPTH_ATTACHMENT = 0x8D00

    guarded
    STENCIL_ATTACHMENT = 0x8D20

    guarded
    DEPTH_STENCIL_ATTACHMENT = 0x821A

    guarded
    NONE: 0

    guarded
    FRAMEBUFFER_COMPLETE = 0x8CD5

    guarded
    FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6

    guarded
    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7

    guarded
    FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9

    guarded
    FRAMEBUFFER_UNSUPPORTED = 0x8CDD

    guarded
    FRAMEBUFFER_BINDING = 0x8CA6

    guarded
    RENDERBUFFER_BINDING = 0x8CA7

    guarded
    MAX_RENDERBUFFER_SIZE = 0x84E8

    guarded
    INVALID_FRAMEBUFFER_OPERATION = 0x0506

    guarded
    UNPACK_FLIP_Y_WEBGL = 0x9240

    guarded
    UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241

    guarded
    CONTEXT_LOST_WEBGL = 0x9242

    guarded
    UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243

    guarded
    BROWSER_DEFAULT_WEBGL = 0x9244
  }


  type WebGLRenderingContextOverloads = aspect
  {
    operation bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum)

    operation bufferData(target: GLenum, data: BufferSource?, usage: GLenum)

    operation bufferSubData(target: GLenum, offset: GLintptr, data: BufferSource)

    operation compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView)

    operation compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView)

    operation readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type`: GLenum, pixels: ArrayBufferView?)

    operation texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type`: GLenum, pixels: ArrayBufferView?)

    operation texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type`: GLenum, source: TexImageSource)

    operation texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type`: GLenum, pixels: ArrayBufferView?)

    operation texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type`: GLenum, source: TexImageSource)

    operation uniform1fv(location: WebGLUniformLocation?, v: Float32List)

    operation uniform1iv(location: WebGLUniformLocation?, v: Int32List)

    operation uniform2fv(location: WebGLUniformLocation?, v: Float32List)

    operation uniform2iv(location: WebGLUniformLocation?, v: Int32List)

    operation uniform3fv(location: WebGLUniformLocation?, v: Float32List)

    operation uniform3iv(location: WebGLUniformLocation?, v: Int32List)

    operation uniform4fv(location: WebGLUniformLocation?, v: Float32List)

    operation uniform4iv(location: WebGLUniformLocation?, v: Int32List)

    operation uniformMatrix2fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Float32List)

    operation uniformMatrix3fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Float32List)

    operation uniformMatrix4fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Float32List)
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSampler) */

  type WebGLSampler = aspect
  {

  }


  /*(!) var */ WebGLSampler: object { prototype: WebGLSampler; on create(): WebGLSampler }


  /**
  * The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShader)
  */

  type WebGLShader = aspect
  {

  }


  /*(!) var */ WebGLShader: object { prototype: WebGLShader; on create(): WebGLShader }


  /**
  * Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat)
  */

  type WebGLShaderPrecisionFormat = aspect
  {
    guarded
    precision: GLint

    guarded
    rangeMax: GLint

    guarded
    rangeMin: GLint
  }


  /*(!) var */ WebGLShaderPrecisionFormat: object { prototype: WebGLShaderPrecisionFormat; on create(): WebGLShaderPrecisionFormat }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSync) */

  type WebGLSync = aspect
  {

  }


  /*(!) var */ WebGLSync: object { prototype: WebGLSync; on create(): WebGLSync }


  /**
  * Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTexture)
  */

  type WebGLTexture = aspect
  {

  }


  /*(!) var */ WebGLTexture: object { prototype: WebGLTexture; on create(): WebGLTexture }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTransformFeedback) */

  type WebGLTransformFeedback = aspect
  {

  }


  /*(!) var */ WebGLTransformFeedback: object { prototype: WebGLTransformFeedback; on create(): WebGLTransformFeedback }


  /**
  * Part of the WebGL API and represents the location of a uniform variable in a shader program.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLUniformLocation)
  */

  type WebGLUniformLocation = aspect
  {

  }


  /*(!) var */ WebGLUniformLocation: object { prototype: WebGLUniformLocation; on create(): WebGLUniformLocation }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject) */

  type WebGLVertexArrayObject = aspect
  {

  }


  /*(!) var */ WebGLVertexArrayObject: object { prototype: WebGLVertexArrayObject; on create(): WebGLVertexArrayObject }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObjectOES) */

  type WebGLVertexArrayObjectOES = aspect
  {

  }


  type WebSocketEventMap = aspect
  {
    close: CloseEvent

    error`: Event

    message: MessageEvent

    open: Event
  }


  /**
  * Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket)
  */

  type WebSocket = aspect EventTarget
  {
    binaryType: BinaryType

    guarded
    bufferedAmount: Number

    guarded
    extensions: Text

    onclose: (operation(this: WebSocket, ev: CloseEvent): /*(!) any */ Object?)?

    onerror: (operation(this: WebSocket, ev: Event): /*(!) any */ Object?)?

    onmessage: (operation(this: WebSocket, ev: MessageEvent): /*(!) any */ Object?)?

    onopen: (operation(this: WebSocket, ev: Event): /*(!) any */ Object?)?

    guarded
    protocol: Text

    guarded
    readyState: Number

    guarded
    url: Text

    operation close(code: Number? = empty, reason: Text? = empty)

    operation send(data: Object? /*(!)Текст | ArrayBufferLike | Blob | ArrayBufferView*/)

    guarded
    CONNECTING: 0

    guarded
    OPEN: 1

    guarded
    CLOSING: 2

    guarded
    CLOSED: 3

    operation addEventListener<K = /*(!) keyof WebSocketEventMap */ Object?>(type`: K, listener: operation(this: WebSocket, ev: /*(!) WebSocketEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof WebSocketEventMap */ Object?>(type`: K, listener: operation(this: WebSocket, ev: /*(!) WebSocketEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ WebSocket: object { prototype: WebSocket; on create(url: Object? /*(!)Текст | URL*/, protocols: Object? /*(!)Текст | Список<Текст> | пусто*/ = empty): WebSocket; guarded CONNECTING: 0; guarded OPEN: 1; guarded CLOSING: 2; guarded CLOSED: 3 }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport)
  */

  type WebTransport = aspect
  {
    guarded
    closed: Promise<WebTransportCloseInfo>

    guarded
    datagrams: WebTransportDatagramDuplexStream

    guarded
    incomingBidirectionalStreams: ReadableStream

    guarded
    incomingUnidirectionalStreams: ReadableStream

    guarded
    ready: Promise<пусто>

    operation close(closeInfo: WebTransportCloseInfo? = empty)

    operation createBidirectionalStream(options: WebTransportSendStreamOptions? = empty): Promise<WebTransportBidirectionalStream>

    operation createUnidirectionalStream(options: WebTransportSendStreamOptions? = empty): Promise<WritableStream>
  }


  /*(!) var */ WebTransport: object { prototype: WebTransport; on create(url: Object? /*(!)Текст | URL*/, options: WebTransportOptions? = empty): WebTransport }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream)
  */

  type WebTransportBidirectionalStream = aspect
  {
    guarded
    readable: ReadableStream

    guarded
    writable: WritableStream
  }


  /*(!) var */ WebTransportBidirectionalStream: object { prototype: WebTransportBidirectionalStream; on create(): WebTransportBidirectionalStream }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream)
  */

  type WebTransportDatagramDuplexStream = aspect
  {
    incomingHighWaterMark: Number

    incomingMaxAge: Number

    guarded
    maxDatagramSize: Number

    outgoingHighWaterMark: Number

    outgoingMaxAge: Number

    guarded
    readable: ReadableStream

    guarded
    writable: WritableStream
  }


  /*(!) var */ WebTransportDatagramDuplexStream: object { prototype: WebTransportDatagramDuplexStream; on create(): WebTransportDatagramDuplexStream }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError)
  */

  type WebTransportError = aspect DOMException
  {
    guarded
    source: WebTransportErrorSource

    guarded
    streamErrorCode: Number?
  }


  /*(!) var */ WebTransportError: object { prototype: WebTransportError; on create(message: Text? = empty, options: WebTransportErrorOptions? = empty): WebTransportError }


  /**
  * Events that occur due to the user moving a mouse wheel or similar input device.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent)
  */

  type WheelEvent = aspect MouseEvent
  {
    guarded
    deltaMode: Number

    guarded
    deltaX: Number

    guarded
    deltaY: Number

    guarded
    deltaZ: Number

    guarded
    DOM_DELTA_PIXEL = 0x00

    guarded
    DOM_DELTA_LINE = 0x01

    guarded
    DOM_DELTA_PAGE = 0x02
  }


  /*(!) var */ WheelEvent: object { prototype: WheelEvent; on create(type`: Text, eventInitDict: WheelEventInit? = empty): WheelEvent; guarded DOM_DELTA_PIXEL = 0x00; guarded DOM_DELTA_LINE = 0x01; guarded DOM_DELTA_PAGE = 0x02 }


  type WindowEventMap = aspect GlobalEventHandlersEventMap, WindowEventHandlersEventMap
  {
    DOMContentLoaded: Event

    devicemotion: DeviceMotionEvent

    deviceorientation: DeviceOrientationEvent

    gamepadconnected: GamepadEvent

    gamepaddisconnected: GamepadEvent

    orientationchange: Event
  }


  /**
  * A window containing a DOM document; the document property points to the DOM document loaded in that window.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window)
  */

  type Window = aspect EventTarget, AnimationFrameProvider, GlobalEventHandlers, WindowEventHandlers, WindowLocalStorage, WindowOrWorkerGlobalScope, WindowSessionStorage
  {
    operation location(href: Object? /*(!)Текст | Location*/): /*(!) no_type */ Object?

    operation postMessage(message: /*(!) any */ Object?, options: WindowPostMessageOptions? = empty)

    operation scroll(x: Number, y: Number)

    operation scrollBy(x: Number, y: Number)

    operation scrollTo(x: Number, y: Number)

    operation addEventListener<K = /*(!) keyof WindowEventMap */ Object?>(type`: K, listener: operation(this: Window, ev: /*(!) WindowEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof WindowEventMap */ Object?>(type`: K, listener: operation(this: Window, ev: /*(!) WindowEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    /*(!) [index: number]: Window*/
  }


  /*(!) var */ Window: object { prototype: Window; on create(): Window }


  type WindowEventHandlersEventMap = aspect
  {
    afterprint: Event

    beforeprint: Event

    beforeunload: BeforeUnloadEvent

    gamepadconnected: GamepadEvent

    gamepaddisconnected: GamepadEvent

    hashchange: HashChangeEvent

    languagechange: Event

    message: MessageEvent

    messageerror: MessageEvent

    offline: Event

    online: Event

    pagehide: PageTransitionEvent

    pageshow: PageTransitionEvent

    popstate: PopStateEvent

    rejectionhandled: PromiseRejectionEvent

    storage: StorageEvent

    unhandledrejection: PromiseRejectionEvent

    unload: Event
  }


  type WindowEventHandlers = aspect
  {
    onafterprint: (operation(this: WindowEventHandlers, ev: Event): /*(!) any */ Object?)?

    onbeforeprint: (operation(this: WindowEventHandlers, ev: Event): /*(!) any */ Object?)?

    onbeforeunload: (operation(this: WindowEventHandlers, ev: BeforeUnloadEvent): /*(!) any */ Object?)?

    ongamepadconnected: (operation(this: WindowEventHandlers, ev: GamepadEvent): /*(!) any */ Object?)?

    ongamepaddisconnected: (operation(this: WindowEventHandlers, ev: GamepadEvent): /*(!) any */ Object?)?

    onhashchange: (operation(this: WindowEventHandlers, ev: HashChangeEvent): /*(!) any */ Object?)?

    onlanguagechange: (operation(this: WindowEventHandlers, ev: Event): /*(!) any */ Object?)?

    onmessage: (operation(this: WindowEventHandlers, ev: MessageEvent): /*(!) any */ Object?)?

    onmessageerror: (operation(this: WindowEventHandlers, ev: MessageEvent): /*(!) any */ Object?)?

    onoffline: (operation(this: WindowEventHandlers, ev: Event): /*(!) any */ Object?)?

    ononline: (operation(this: WindowEventHandlers, ev: Event): /*(!) any */ Object?)?

    onpagehide: (operation(this: WindowEventHandlers, ev: PageTransitionEvent): /*(!) any */ Object?)?

    onpageshow: (operation(this: WindowEventHandlers, ev: PageTransitionEvent): /*(!) any */ Object?)?

    onpopstate: (operation(this: WindowEventHandlers, ev: PopStateEvent): /*(!) any */ Object?)?

    onrejectionhandled: (operation(this: WindowEventHandlers, ev: PromiseRejectionEvent): /*(!) any */ Object?)?

    onstorage: (operation(this: WindowEventHandlers, ev: StorageEvent): /*(!) any */ Object?)?

    onunhandledrejection: (operation(this: WindowEventHandlers, ev: PromiseRejectionEvent): /*(!) any */ Object?)?

    onunload: (operation(this: WindowEventHandlers, ev: Event): /*(!) any */ Object?)?

    operation addEventListener<K = /*(!) keyof WindowEventHandlersEventMap */ Object?>(type`: K, listener: operation(this: WindowEventHandlers, ev: /*(!) WindowEventHandlersEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof WindowEventHandlersEventMap */ Object?>(type`: K, listener: operation(this: WindowEventHandlers, ev: /*(!) WindowEventHandlersEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  type WindowLocalStorage = aspect
  {
    guarded
    localStorage: Storage
  }


  type WindowOrWorkerGlobalScope = aspect
  {
    guarded
    caches: CacheStorage

    guarded
    crossOriginIsolated: YesNo

    guarded
    crypto: Crypto

    guarded
    indexedDB: IDBFactory

    guarded
    isSecureContext: YesNo

    guarded
    origin: Text

    guarded
    performance: Performance

    operation atob(data: Text): Text

    operation btoa(data: Text): Text

    operation clearInterval(id: Number?)

    operation clearTimeout(id: Number?)

    operation createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions? = empty): Promise<ImageBitmap>

    operation createImageBitmap(image: ImageBitmapSource, sx: Number, sy: Number, sw: Number, sh: Number, options: ImageBitmapOptions? = empty): Promise<ImageBitmap>

    operation fetch(input: Object? /*(!)RequestInfo | URL*/, init: RequestInit? = empty): Promise<Response>

    operation queueMicrotask(callback: VoidFunction)

    operation reportError(e: /*(!) any */ Object?)

    #js.МассивПараметров
    operation setInterval(handler: TimerHandler, timeout: Number? = empty, arguments: Список</*(!) any */ Object?>): Number

    #js.МассивПараметров
    operation setTimeout(handler: TimerHandler, timeout: Number? = empty, arguments: Список</*(!) any */ Object?>): Number

    operation structuredClone<T>(value: T, options: StructuredSerializeOptions? = empty): T
  }


  type WindowSessionStorage = aspect
  {
    guarded
    sessionStorage: Storage
  }


  type WorkerEventMap = aspect AbstractWorkerEventMap
  {
    message: MessageEvent

    messageerror: MessageEvent
  }


  /**
  * This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker)
  */

  type Worker = aspect EventTarget, AbstractWorker
  {
    onmessage: (operation(this: Worker, ev: MessageEvent): /*(!) any */ Object?)?

    onmessageerror: (operation(this: Worker, ev: MessageEvent): /*(!) any */ Object?)?

    operation postMessage(message: /*(!) any */ Object?, transfer: Список<Transferable>)

    operation postMessage(message: /*(!) any */ Object?, options: StructuredSerializeOptions? = empty)

    operation terminate()

    operation addEventListener<K = /*(!) keyof WorkerEventMap */ Object?>(type`: K, listener: operation(this: Worker, ev: /*(!) WorkerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof WorkerEventMap */ Object?>(type`: K, listener: operation(this: Worker, ev: /*(!) WorkerEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ Worker: object { prototype: Worker; on create(scriptURL: Object? /*(!)Текст | URL*/, options: WorkerOptions? = empty): Worker }


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worklet)
  */

  type Worklet = aspect
  {
    operation addModule(moduleURL: Object? /*(!)Текст | URL*/, options: WorkletOptions? = empty): Promise<Ничего>
  }


  /*(!) var */ Worklet: object { prototype: Worklet; on create(): Worklet }


  /**
  * This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream)
  */

  type WritableStream<W> = aspect
  {
    guarded
    locked: YesNo

    operation abort(reason: /*(!) any */ Object? = empty): Promise<Ничего>

    operation close(): Promise<Ничего>

    operation getWriter(): WritableStreamDefaultWriter<W>
  }


  /*(!) var */ WritableStream: object { prototype: WritableStream; on create(underlyingSink: UnderlyingSink<W>? = empty, strategy: QueuingStrategy<W>? = empty): WritableStream<W> }


  /**
  * This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)
  */

  type WritableStreamDefaultController = aspect
  {
    guarded
    signal: AbortSignal

    operation error`(e: /*(!) any */ Object? = empty)
  }


  /*(!) var */ WritableStreamDefaultController: object { prototype: WritableStreamDefaultController; on create(): WritableStreamDefaultController }


  /**
  * This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter)
  */

  type WritableStreamDefaultWriter<W> = aspect
  {
    guarded
    closed: Promise<пусто>

    guarded
    desiredSize: Number?

    guarded
    ready: Promise<пусто>

    operation abort(reason: /*(!) any */ Object? = empty): Promise<Ничего>

    operation close(): Promise<Ничего>

    operation releaseLock()

    operation write(chunk: W? = empty): Promise<Ничего>
  }


  /*(!) var */ WritableStreamDefaultWriter: object { prototype: WritableStreamDefaultWriter; on create(stream: WritableStream<W>): WritableStreamDefaultWriter<W> }


  /**
  * An XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLDocument)
  */

  type XMLDocument = aspect Document
  {
    operation addEventListener<K = /*(!) keyof DocumentEventMap */ Object?>(type`: K, listener: operation(this: XMLDocument, ev: /*(!) DocumentEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof DocumentEventMap */ Object?>(type`: K, listener: operation(this: XMLDocument, ev: /*(!) DocumentEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ XMLDocument: object { prototype: XMLDocument; on create(): XMLDocument }


  type XMLHttpRequestEventMap = aspect XMLHttpRequestEventTargetEventMap
  {
    readystatechange: Event
  }


  /**
  * Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest)
  */

  type XMLHttpRequest = aspect XMLHttpRequestEventTarget
  {
    onreadystatechange: (operation(this: XMLHttpRequest, ev: Event): /*(!) any */ Object?)?

    guarded
    readyState: Number

    guarded
    response: /*(!) any */ Object?

    guarded
    responseText: Text

    responseType: XMLHttpRequestResponseType

    guarded
    responseURL: Text

    guarded
    responseXML: Document?

    guarded
    status: Number

    guarded
    statusText: Text

    timeout: Number

    guarded
    upload: XMLHttpRequestUpload

    withCredentials: YesNo

    operation abort()

    operation getAllResponseHeaders(): Text

    operation getResponseHeader(name: Text): Text?

    operation open(method: Text, url: Object? /*(!)Текст | URL*/)

    operation open(method: Text, url: Object? /*(!)Текст | URL*/, async: YesNo, username: Text? = empty, password: Text? = empty)

    operation overrideMimeType(mime: Text)

    operation send(body: Object? /*(!)Document | XMLHttpRequestBodyInit | пусто | пусто*/ = empty)

    operation setRequestHeader(name: Text, value: Text)

    guarded
    UNSENT: 0

    guarded
    OPENED: 1

    guarded
    HEADERS_RECEIVED: 2

    guarded
    LOADING: 3

    guarded
    DONE: 4

    operation addEventListener<K = /*(!) keyof XMLHttpRequestEventMap */ Object?>(type`: K, listener: operation(this: XMLHttpRequest, ev: /*(!) XMLHttpRequestEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof XMLHttpRequestEventMap */ Object?>(type`: K, listener: operation(this: XMLHttpRequest, ev: /*(!) XMLHttpRequestEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ XMLHttpRequest: object { prototype: XMLHttpRequest; on create(): XMLHttpRequest; guarded UNSENT: 0; guarded OPENED: 1; guarded HEADERS_RECEIVED: 2; guarded LOADING: 3; guarded DONE: 4 }


  type XMLHttpRequestEventTargetEventMap = aspect
  {
    abort: ProgressEvent<XMLHttpRequestEventTarget>

    error`: ProgressEvent<XMLHttpRequestEventTarget>

    load: ProgressEvent<XMLHttpRequestEventTarget>

    loadend: ProgressEvent<XMLHttpRequestEventTarget>

    loadstart: ProgressEvent<XMLHttpRequestEventTarget>

    progress: ProgressEvent<XMLHttpRequestEventTarget>

    timeout: ProgressEvent<XMLHttpRequestEventTarget>
  }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestEventTarget) */

  type XMLHttpRequestEventTarget = aspect EventTarget
  {
    onabort: (operation(this: XMLHttpRequest, ev: ProgressEvent): /*(!) any */ Object?)?

    onerror: (operation(this: XMLHttpRequest, ev: ProgressEvent): /*(!) any */ Object?)?

    onload: (operation(this: XMLHttpRequest, ev: ProgressEvent): /*(!) any */ Object?)?

    onloadend: (operation(this: XMLHttpRequest, ev: ProgressEvent): /*(!) any */ Object?)?

    onloadstart: (operation(this: XMLHttpRequest, ev: ProgressEvent): /*(!) any */ Object?)?

    onprogress: (operation(this: XMLHttpRequest, ev: ProgressEvent): /*(!) any */ Object?)?

    ontimeout: (operation(this: XMLHttpRequest, ev: ProgressEvent): /*(!) any */ Object?)?

    operation addEventListener<K = /*(!) keyof XMLHttpRequestEventTargetEventMap */ Object?>(type`: K, listener: operation(this: XMLHttpRequestEventTarget, ev: /*(!) XMLHttpRequestEventTargetEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof XMLHttpRequestEventTargetEventMap */ Object?>(type`: K, listener: operation(this: XMLHttpRequestEventTarget, ev: /*(!) XMLHttpRequestEventTargetEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ XMLHttpRequestEventTarget: object { prototype: XMLHttpRequestEventTarget; on create(): XMLHttpRequestEventTarget }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestUpload) */

  type XMLHttpRequestUpload = aspect XMLHttpRequestEventTarget
  {
    operation addEventListener<K = /*(!) keyof XMLHttpRequestEventTargetEventMap */ Object?>(type`: K, listener: operation(this: XMLHttpRequestUpload, ev: /*(!) XMLHttpRequestEventTargetEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

    operation removeEventListener<K = /*(!) keyof XMLHttpRequestEventTargetEventMap */ Object?>(type`: K, listener: operation(this: XMLHttpRequestUpload, ev: /*(!) XMLHttpRequestEventTargetEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

    operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)
  }


  /*(!) var */ XMLHttpRequestUpload: object { prototype: XMLHttpRequestUpload; on create(): XMLHttpRequestUpload }


  /**
  * Provides the serializeToString() method to construct an XML string representing a DOM tree.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLSerializer)
  */

  type XMLSerializer = aspect
  {
    operation serializeToString(root: Node): Text
  }


  /*(!) var */ XMLSerializer: object { prototype: XMLSerializer; on create(): XMLSerializer }


  /**
  * The XPathEvaluator interface allows to compile and evaluate XPath expressions.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathEvaluator)
  */

  type XPathEvaluator = aspect XPathEvaluatorBase
  {

  }


  /*(!) var */ XPathEvaluator: object { prototype: XPathEvaluator; on create(): XPathEvaluator }


  type XPathEvaluatorBase = aspect
  {
    operation createExpression(expression: Text, resolver: XPathNSResolver? = empty): XPathExpression

    operation createNSResolver(nodeResolver: Node): Node

    operation evaluate(expression: Text, contextNode: Node, resolver: XPathNSResolver? = empty, type`: Number? = empty, result: XPathResult? = empty): XPathResult
  }


  /**
  * This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information its DOM tree.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathExpression)
  */

  type XPathExpression = aspect
  {
    operation evaluate(contextNode: Node, type`: Number? = empty, result: XPathResult? = empty): XPathResult
  }


  /*(!) var */ XPathExpression: object { prototype: XPathExpression; on create(): XPathExpression }


  /**
  * The results generated by evaluating an XPath expression within the context of a given node.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult)
  */

  type XPathResult = aspect
  {
    guarded
    booleanValue: YesNo

    guarded
    invalidIteratorState: YesNo

    guarded
    numberValue: Number

    guarded
    resultType: Number

    guarded
    singleNodeValue: Node?

    guarded
    snapshotLength: Number

    guarded
    stringValue: Text

    operation iterateNext(): Node?

    operation snapshotItem(index: Number): Node?

    guarded
    ANY_TYPE: 0

    guarded
    NUMBER_TYPE: 1

    guarded
    STRING_TYPE: 2

    guarded
    BOOLEAN_TYPE: 3

    guarded
    UNORDERED_NODE_ITERATOR_TYPE: 4

    guarded
    ORDERED_NODE_ITERATOR_TYPE: 5

    guarded
    UNORDERED_NODE_SNAPSHOT_TYPE: 6

    guarded
    ORDERED_NODE_SNAPSHOT_TYPE: 7

    guarded
    ANY_UNORDERED_NODE_TYPE: 8

    guarded
    FIRST_ORDERED_NODE_TYPE: 9
  }


  /*(!) var */ XPathResult: object { prototype: XPathResult; on create(): XPathResult; guarded ANY_TYPE: 0; guarded NUMBER_TYPE: 1; guarded STRING_TYPE: 2; guarded BOOLEAN_TYPE: 3; guarded UNORDERED_NODE_ITERATOR_TYPE: 4; guarded ORDERED_NODE_ITERATOR_TYPE: 5; guarded UNORDERED_NODE_SNAPSHOT_TYPE: 6; guarded ORDERED_NODE_SNAPSHOT_TYPE: 7; guarded ANY_UNORDERED_NODE_TYPE: 8; guarded FIRST_ORDERED_NODE_TYPE: 9 }


  /**
  * An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate <xsl:param> parameter values, and to apply the transformation to documents.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor)
  */

  type XSLTProcessor = aspect
  {
    operation clearParameters()

    operation getParameter(namespaceURI: Text?, localName: Text): /*(!) any */ Object?

    operation importStylesheet(style: Node)

    operation removeParameter(namespaceURI: Text?, localName: Text)

    operation reset()

    operation setParameter(namespaceURI: Text?, localName: Text, value: /*(!) any */ Object?)

    operation transformToDocument(source: Node): Document

    operation transformToFragment(source: Node, output: Document): DocumentFragment
  }


  /*(!) var */ XSLTProcessor: object { prototype: XSLTProcessor; on create(): XSLTProcessor }


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/console) */

  type Console = aspect
  {
    #js.МассивПараметров
    operation assert(condition: YesNo? = empty, data: Список</*(!) any */ Object?>)

    operation clear()

    operation count(label: Text? = empty)

    operation countReset(label: Text? = empty)

    #js.МассивПараметров
    operation debug(data: Список</*(!) any */ Object?>)

    operation dir(item: /*(!) any */ Object? = empty, options: /*(!) any */ Object? = empty)

    #js.МассивПараметров
    operation dirxml(data: Список</*(!) any */ Object?>)

    #js.МассивПараметров
    operation error`(data: Список</*(!) any */ Object?>)

    #js.МассивПараметров
    operation group(data: Список</*(!) any */ Object?>)

    #js.МассивПараметров
    operation groupCollapsed(data: Список</*(!) any */ Object?>)

    operation groupEnd()

    #js.МассивПараметров
    operation info(data: Список</*(!) any */ Object?>)

    #js.МассивПараметров
    operation log(data: Список</*(!) any */ Object?>)

    operation table(tabularData: /*(!) any */ Object? = empty, properties: Список<Текст>? = empty)

    operation time(label: Text? = empty)

    operation timeEnd(label: Text? = empty)

    #js.МассивПараметров
    operation timeLog(label: Text? = empty, data: Список</*(!) any */ Object?>)

    operation timeStamp(label: Text? = empty)

    #js.МассивПараметров
    operation trace(data: Список</*(!) any */ Object?>)

    #js.МассивПараметров
    operation warn(data: Список</*(!) any */ Object?>)
  }


  /*(!) var */ console: Console


  /** Holds useful CSS-related methods. No object with this interface are implemented: it contains only static methods and therefore is a utilitarian interface. */

  external /*(!) CSS */
  {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation Hz(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation Q(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation ch(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation cm(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation cqb(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation cqh(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation cqi(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation cqmax(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation cqmin(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation cqw(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation deg(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation dpcm(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation dpi(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation dppx(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation dvb(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation dvh(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation dvi(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation dvmax(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation dvmin(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation dvw(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation em(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/escape_static) */

    operation escape(ident: Text): Text

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation ex(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation fr(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation grad(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation kHz(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation lvb(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation lvh(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation lvi(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation lvmax(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation lvmin(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation lvw(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation mm(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation ms(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation number(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation pc(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation percent(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation pt(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation px(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation rad(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/registerProperty_static) */

    operation registerProperty(definition: PropertyDefinition)

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation rem(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation s(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/supports_static) */

    operation supports(property: Text, value: Text): YesNo

    operation supports(conditionText: Text): YesNo

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation svb(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation svh(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation svi(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation svmax(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation svmin(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation svw(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation turn(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation vb(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation vh(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation vi(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation vmax(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation vmin(value: Number): CSSUnitValue

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) */

    operation vw(value: Number): CSSUnitValue}

  external /*(!) WebAssembly */
  {
    type CompileError = aspect Error
    {

    }


    /*(!) var */ CompileError: object { prototype: CompileError; on create(message: Text? = empty): CompileError; /*(!) (message?: string): CompileError*/ }


    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global) */

    type Global<T = ValueType> = aspect
    {
      value: /*(!) ValueTypeMap[T] */ Object?

      operation valueOf(): /*(!) ValueTypeMap[T] */ Object?
    }


    /*(!) var */ Global: object { prototype: Global; on create(descriptor: GlobalDescriptor<T>, v: /*(!) ValueTypeMap[T] */ Object? = empty): Global<T> }


    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance) */

    type Instance = aspect
    {
      guarded
      exports: Exports
    }


    /*(!) var */ Instance: object { prototype: Instance; on create(module: Module, importObject: Imports? = empty): Instance }


    type LinkError = aspect Error
    {

    }


    /*(!) var */ LinkError: object { prototype: LinkError; on create(message: Text? = empty): LinkError; /*(!) (message?: string): LinkError*/ }


    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) */

    type Memory = aspect
    {
      guarded
      buffer: ArrayBuffer

      operation grow(delta: Number): Number
    }


    /*(!) var */ Memory: object { prototype: Memory; on create(descriptor: MemoryDescriptor): Memory }


    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module) */

    type Module = aspect
    {

    }


    /*(!) var */ Module: object { prototype: Module; on create(bytes: BufferSource): Module; operation customSections(moduleObject: Module, sectionName: Text): Список<ArrayBuffer>; operation exports(moduleObject: Module): Список<ModuleExportDescriptor>; operation imports(moduleObject: Module): Список<ModuleImportDescriptor> }


    type RuntimeError = aspect Error
    {

    }


    /*(!) var */ RuntimeError: object { prototype: RuntimeError; on create(message: Text? = empty): RuntimeError; /*(!) (message?: string): RuntimeError*/ }


    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table) */

    type Table = aspect
    {
      guarded
      length: Number

      operation get(index: Number): /*(!) any */ Object?

      operation grow(delta: Number, value: /*(!) any */ Object? = empty): Number

      operation set(index: Number, value: /*(!) any */ Object? = empty)
    }


    /*(!) var */ Table: object { prototype: Table; on create(descriptor: TableDescriptor, value: /*(!) any */ Object? = empty): Table }


    type GlobalDescriptor<T = ValueType> = aspect
    {
      mutable: YesNo

      value: T
    }


    type MemoryDescriptor = aspect
    {
      initial: Number

      maximum: Number

      shared: YesNo
    }


    type ModuleExportDescriptor = aspect
    {
      kind: ImportExportKind

      name: Text
    }


    type ModuleImportDescriptor = aspect
    {
      kind: ImportExportKind

      module: Text

      name: Text
    }


    type TableDescriptor = aspect
    {
      element: TableKind

      initial: Number

      maximum: Number
    }


    type ValueTypeMap = aspect
    {
      anyfunc: Function

      externref: /*(!) any */ Object?

      f32: Number

      f64: Number

      i32: Number

      i64: bigint

      v128: Никогда
    }


    type WebAssemblyInstantiatedSource = aspect
    {
      instance: Instance

      module: Module
    }


    type ImportExportKind = Object? /*(!)"function" | "global" | "memory" | "table"*/

    type TableKind = Object? /*(!)"anyfunc" | "externref"*/

    type ExportValue = Object? /*(!)Function | Global | Memory | Table*/

    type Exports = Record<Текст, ExportValue>

    type ImportValue = Object? /*(!)ExportValue | Number*/

    type Imports = Record<Текст, ModuleImports>

    type ModuleImports = Record<Текст, ImportValue>

    type ValueType = /*(!) keyof ValueTypeMap */ Object?

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile) */

    operation compile(bytes: BufferSource): Promise<Module>

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming) */

    operation compileStreaming(source: Object? /*(!)Response | PromiseLike<Response>*/): Promise<Module>

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate) */

    operation instantiate(bytes: BufferSource, importObject: Imports? = empty): Promise<WebAssemblyInstantiatedSource>

    operation instantiate(moduleObject: Module, importObject: Imports? = empty): Promise<Instance>

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming) */

    operation instantiateStreaming(source: Object? /*(!)Response | PromiseLike<Response>*/, importObject: Imports? = empty): Promise<WebAssemblyInstantiatedSource>

    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate) */

    operation validate(bytes: BufferSource): YesNo}

  type BlobCallback = aspect
  {
    /*(!) (blob: Blob | null): void*/
  }


  type CustomElementConstructor = aspect
  {
    #js.МассивПараметров
    on create(params: Список</*(!) any */ Object?>): HTMLElement
  }


  type DecodeErrorCallback = aspect
  {
    /*(!) (error: DOMException): void*/
  }


  type DecodeSuccessCallback = aspect
  {
    /*(!) (decodedData: AudioBuffer): void*/
  }


  type EncodedVideoChunkOutputCallback = aspect
  {
    /*(!) (chunk: EncodedVideoChunk, metadata?: EncodedVideoChunkMetadata): void*/
  }


  type ErrorCallback = aspect
  {
    /*(!) (err: DOMException): void*/
  }


  type FileCallback = aspect
  {
    /*(!) (file: File): void*/
  }


  type FileSystemEntriesCallback = aspect
  {
    /*(!) (entries: FileSystemEntry[]): void*/
  }


  type FileSystemEntryCallback = aspect
  {
    /*(!) (entry: FileSystemEntry): void*/
  }


  type FrameRequestCallback = aspect
  {
    /*(!) (time: DOMHighResTimeStamp): void*/
  }


  type FunctionStringCallback = aspect
  {
    /*(!) (data: string): void*/
  }


  type IdleRequestCallback = aspect
  {
    /*(!) (deadline: IdleDeadline): void*/
  }


  type IntersectionObserverCallback = aspect
  {
    /*(!) (entries: IntersectionObserverEntry[], observer: IntersectionObserver): void*/
  }


  type LockGrantedCallback = aspect
  {
    /*(!) (lock: Lock | null): any*/
  }


  type MediaSessionActionHandler = aspect
  {
    /*(!) (details: MediaSessionActionDetails): void*/
  }


  type MutationCallback = aspect
  {
    /*(!) (mutations: MutationRecord[], observer: MutationObserver): void*/
  }


  type NotificationPermissionCallback = aspect
  {
    /*(!) (permission: NotificationPermission): void*/
  }


  type OnBeforeUnloadEventHandlerNonNull = aspect
  {
    /*(!) (event: Event): string | null*/
  }


  type OnErrorEventHandlerNonNull = aspect
  {
    /*(!) (event: Event | string, source?: string, lineno?: number, colno?: number, error?: Error): any*/
  }


  type PerformanceObserverCallback = aspect
  {
    /*(!) (entries: PerformanceObserverEntryList, observer: PerformanceObserver): void*/
  }


  type PositionCallback = aspect
  {
    /*(!) (position: GeolocationPosition): void*/
  }


  type PositionErrorCallback = aspect
  {
    /*(!) (positionError: GeolocationPositionError): void*/
  }


  type QueuingStrategySize<T> = aspect
  {
    /*(!) (chunk: T): number*/
  }


  type RTCPeerConnectionErrorCallback = aspect
  {
    /*(!) (error: DOMException): void*/
  }


  type RTCSessionDescriptionCallback = aspect
  {
    /*(!) (description: RTCSessionDescriptionInit): void*/
  }


  type RemotePlaybackAvailabilityCallback = aspect
  {
    /*(!) (available: boolean): void*/
  }


  type ReportingObserverCallback = aspect
  {
    /*(!) (reports: Report[], observer: ReportingObserver): void*/
  }


  type ResizeObserverCallback = aspect
  {
    /*(!) (entries: ResizeObserverEntry[], observer: ResizeObserver): void*/
  }


  type TransformerFlushCallback<O> = aspect
  {
    /*(!) (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>*/
  }


  type TransformerStartCallback<O> = aspect
  {
    /*(!) (controller: TransformStreamDefaultController<O>): any*/
  }


  type TransformerTransformCallback<I, O> = aspect
  {
    /*(!) (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>*/
  }


  type UnderlyingSinkAbortCallback = aspect
  {
    /*(!) (reason?: any): void | PromiseLike<void>*/
  }


  type UnderlyingSinkCloseCallback = aspect
  {
    /*(!) (): void | PromiseLike<void>*/
  }


  type UnderlyingSinkStartCallback = aspect
  {
    /*(!) (controller: WritableStreamDefaultController): any*/
  }


  type UnderlyingSinkWriteCallback<W> = aspect
  {
    /*(!) (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>*/
  }


  type UnderlyingSourceCancelCallback = aspect
  {
    /*(!) (reason?: any): void | PromiseLike<void>*/
  }


  type UnderlyingSourcePullCallback<R> = aspect
  {
    /*(!) (controller: ReadableStreamController<R>): void | PromiseLike<void>*/
  }


  type UnderlyingSourceStartCallback<R> = aspect
  {
    /*(!) (controller: ReadableStreamController<R>): any*/
  }


  type VideoFrameOutputCallback = aspect
  {
    /*(!) (output: VideoFrame): void*/
  }


  type VideoFrameRequestCallback = aspect
  {
    /*(!) (now: DOMHighResTimeStamp, metadata: VideoFrameCallbackMetadata): void*/
  }


  type VoidFunction = aspect
  {
    /*(!) (): void*/
  }


  type WebCodecsErrorCallback = aspect
  {
    /*(!) (error: DOMException): void*/
  }


  type HTMLElementTagNameMap = aspect
  {
    a: HTMLAnchorElement

    abbr: HTMLElement

    address: HTMLElement

    area: HTMLAreaElement

    article: HTMLElement

    aside: HTMLElement

    audio: HTMLAudioElement

    b: HTMLElement

    base`: HTMLBaseElement

    bdi: HTMLElement

    bdo: HTMLElement

    blockquote: HTMLQuoteElement

    body: HTMLBodyElement

    br: HTMLBRElement

    button: HTMLButtonElement

    canvas: HTMLCanvasElement

    caption: HTMLTableCaptionElement

    cite: HTMLElement

    code: HTMLElement

    col: HTMLTableColElement

    colgroup: HTMLTableColElement

    data: HTMLDataElement

    datalist: HTMLDataListElement

    dd: HTMLElement

    del: HTMLModElement

    details: HTMLDetailsElement

    dfn: HTMLElement

    dialog: HTMLDialogElement

    div: HTMLDivElement

    dl: HTMLDListElement

    dt: HTMLElement

    em: HTMLElement

    embed: HTMLEmbedElement

    fieldset: HTMLFieldSetElement

    figcaption: HTMLElement

    figure: HTMLElement

    footer: HTMLElement

    form: HTMLFormElement

    h1: HTMLHeadingElement

    h2: HTMLHeadingElement

    h3: HTMLHeadingElement

    h4: HTMLHeadingElement

    h5: HTMLHeadingElement

    h6: HTMLHeadingElement

    head: HTMLHeadElement

    header: HTMLElement

    hgroup: HTMLElement

    hr: HTMLHRElement

    html: HTMLHtmlElement

    i: HTMLElement

    iframe: HTMLIFrameElement

    img: HTMLImageElement

    input: HTMLInputElement

    ins: HTMLModElement

    kbd: HTMLElement

    label: HTMLLabelElement

    legend: HTMLLegendElement

    li: HTMLLIElement

    link: HTMLLinkElement

    main: HTMLElement

    map: HTMLMapElement

    mark: HTMLElement

    menu: HTMLMenuElement

    meta: HTMLMetaElement

    meter: HTMLMeterElement

    nav: HTMLElement

    noscript: HTMLElement

    object`: HTMLObjectElement

    ol: HTMLOListElement

    optgroup: HTMLOptGroupElement

    option: HTMLOptionElement

    output: HTMLOutputElement

    p: HTMLParagraphElement

    picture: HTMLPictureElement

    pre: HTMLPreElement

    progress: HTMLProgressElement

    q: HTMLQuoteElement

    rp: HTMLElement

    rt: HTMLElement

    ruby: HTMLElement

    s: HTMLElement

    samp: HTMLElement

    script: HTMLScriptElement

    search: HTMLElement

    section: HTMLElement

    select: HTMLSelectElement

    slot: HTMLSlotElement

    small: HTMLElement

    source: HTMLSourceElement

    span: HTMLSpanElement

    strong: HTMLElement

    style: HTMLStyleElement

    sub: HTMLElement

    summary: HTMLElement

    sup: HTMLElement

    table: HTMLTableElement

    tbody: HTMLTableSectionElement

    td: HTMLTableCellElement

    template: HTMLTemplateElement

    textarea: HTMLTextAreaElement

    tfoot: HTMLTableSectionElement

    th: HTMLTableCellElement

    thead: HTMLTableSectionElement

    time: HTMLTimeElement

    title: HTMLTitleElement

    tr: HTMLTableRowElement

    track: HTMLTrackElement

    u: HTMLElement

    ul: HTMLUListElement

    var: HTMLElement

    video: HTMLVideoElement

    wbr: HTMLElement
  }


  type HTMLElementDeprecatedTagNameMap = aspect
  {
    acronym: HTMLElement

    applet: HTMLUnknownElement

    basefont: HTMLElement

    bgsound: HTMLUnknownElement

    big: HTMLElement

    blink: HTMLUnknownElement

    center: HTMLElement

    dir: HTMLDirectoryElement

    font: HTMLFontElement

    frame: HTMLFrameElement

    frameset: HTMLFrameSetElement

    isindex: HTMLUnknownElement

    keygen: HTMLUnknownElement

    listing: HTMLPreElement

    marquee: HTMLMarqueeElement

    menuitem: HTMLElement

    multicol: HTMLUnknownElement

    nextid: HTMLUnknownElement

    nobr: HTMLElement

    noembed: HTMLElement

    noframes: HTMLElement

    param`: HTMLParamElement

    plaintext: HTMLElement

    rb: HTMLElement

    rtc: HTMLElement

    spacer: HTMLUnknownElement

    strike: HTMLElement

    tt: HTMLElement

    xmp: HTMLPreElement
  }


  type SVGElementTagNameMap = aspect
  {
    a: SVGAElement

    animate: SVGAnimateElement

    animateMotion: SVGAnimateMotionElement

    animateTransform: SVGAnimateTransformElement

    circle: SVGCircleElement

    clipPath: SVGClipPathElement

    defs: SVGDefsElement

    desc: SVGDescElement

    ellipse: SVGEllipseElement

    feBlend: SVGFEBlendElement

    feColorMatrix: SVGFEColorMatrixElement

    feComponentTransfer: SVGFEComponentTransferElement

    feComposite: SVGFECompositeElement

    feConvolveMatrix: SVGFEConvolveMatrixElement

    feDiffuseLighting: SVGFEDiffuseLightingElement

    feDisplacementMap: SVGFEDisplacementMapElement

    feDistantLight: SVGFEDistantLightElement

    feDropShadow: SVGFEDropShadowElement

    feFlood: SVGFEFloodElement

    feFuncA: SVGFEFuncAElement

    feFuncB: SVGFEFuncBElement

    feFuncG: SVGFEFuncGElement

    feFuncR: SVGFEFuncRElement

    feGaussianBlur: SVGFEGaussianBlurElement

    feImage: SVGFEImageElement

    feMerge: SVGFEMergeElement

    feMergeNode: SVGFEMergeNodeElement

    feMorphology: SVGFEMorphologyElement

    feOffset: SVGFEOffsetElement

    fePointLight: SVGFEPointLightElement

    feSpecularLighting: SVGFESpecularLightingElement

    feSpotLight: SVGFESpotLightElement

    feTile: SVGFETileElement

    feTurbulence: SVGFETurbulenceElement

    filter: SVGFilterElement

    foreignObject: SVGForeignObjectElement

    g: SVGGElement

    image: SVGImageElement

    line: SVGLineElement

    linearGradient: SVGLinearGradientElement

    marker: SVGMarkerElement

    mask: SVGMaskElement

    metadata: SVGMetadataElement

    mpath: SVGMPathElement

    path: SVGPathElement

    pattern: SVGPatternElement

    polygon: SVGPolygonElement

    polyline: SVGPolylineElement

    radialGradient: SVGRadialGradientElement

    rect: SVGRectElement

    script: SVGScriptElement

    set`: SVGSetElement

    stop: SVGStopElement

    style: SVGStyleElement

    svg: SVGSVGElement

    switch`: SVGSwitchElement

    symbol: SVGSymbolElement

    text: SVGTextElement

    textPath: SVGTextPathElement

    title: SVGTitleElement

    tspan: SVGTSpanElement

    use: SVGUseElement

    view: SVGViewElement
  }


  type MathMLElementTagNameMap = aspect
  {
    annotation: MathMLElement

    annotation-xml: MathMLElement

    maction: MathMLElement

    math: MathMLElement

    merror: MathMLElement

    mfrac: MathMLElement

    mi: MathMLElement

    mmultiscripts: MathMLElement

    mn: MathMLElement

    mo: MathMLElement

    mover: MathMLElement

    mpadded: MathMLElement

    mphantom: MathMLElement

    mprescripts: MathMLElement

    mroot: MathMLElement

    mrow: MathMLElement

    ms: MathMLElement

    mspace: MathMLElement

    msqrt: MathMLElement

    mstyle: MathMLElement

    msub: MathMLElement

    msubsup: MathMLElement

    msup: MathMLElement

    mtable: MathMLElement

    mtd: MathMLElement

    mtext: MathMLElement

    mtr: MathMLElement

    munder: MathMLElement

    munderover: MathMLElement

    semantics: MathMLElement
  }


  /*(!) var */ Audio: object { on create(src: Text? = empty): HTMLAudioElement }


  /*(!) var */ Image: object { on create(width: Number? = empty, height: Number? = empty): HTMLImageElement }


  /*(!) var */ Option: object { on create(text: Text? = empty, value: Text? = empty, defaultSelected: YesNo? = empty, selected: YesNo? = empty): HTMLOptionElement }


  /**
  * Returns true if the window has been closed, false otherwise.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/closed)
  */

  /*(!) var */ closed: YesNo


  /**
  * Defines a new custom element, mapping the given name to the given constructor as an autonomous custom element.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/customElements)
  */

  /*(!) var */ customElements: CustomElementRegistry


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio) */

  /*(!) var */ devicePixelRatio: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document) */

  /*(!) var */ document: Document


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frameElement) */

  /*(!) var */ frameElement: Element?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frames) */

  /*(!) var */ frames: WindowProxy


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/history) */

  /*(!) var */ history: History


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerHeight) */

  /*(!) var */ innerHeight: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerWidth) */

  /*(!) var */ innerWidth: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/length) */

  /*(!) var */ length: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/location) */

  /*(!) var */ location: Location


  /**
  * Returns true if the location bar is visible; otherwise, returns false.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/locationbar)
  */

  /*(!) var */ locationbar: BarProp


  /**
  * Returns true if the menu bar is visible; otherwise, returns false.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/menubar)
  */

  /*(!) var */ menubar: BarProp


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/name) */

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator) */

  /*(!) var */ navigator: Navigator


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
  */

  /*(!) var */ ondevicemotion: (operation(this: Window, ev: DeviceMotionEvent): /*(!) any */ Object?)?


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
  */

  /*(!) var */ ondeviceorientation: (operation(this: Window, ev: DeviceOrientationEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/opener) */

  /*(!) var */ opener: /*(!) any */ Object?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerHeight) */

  /*(!) var */ outerHeight: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerWidth) */

  /*(!) var */ outerWidth: Number


  /**
  * Refers to either the parent WindowProxy, or itself.
  *
  * It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/parent)
  */

  /*(!) var */ parent: WindowProxy


  /**
  * Returns true if the personal bar is visible; otherwise, returns false.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/personalbar)
  */

  /*(!) var */ personalbar: BarProp


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screen) */

  /*(!) var */ screen: Screen


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenLeft) */

  /*(!) var */ screenLeft: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenTop) */

  /*(!) var */ screenTop: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenX) */

  /*(!) var */ screenX: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenY) */

  /*(!) var */ screenY: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX) */

  /*(!) var */ scrollX: Number


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY) */

  /*(!) var */ scrollY: Number


  /**
  * Returns true if the scrollbars are visible; otherwise, returns false.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)
  */

  /*(!) var */ scrollbars: BarProp


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/self) */

  /*(!) var */ self: /*(!) Window & typeof globalThis */ Object?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis) */

  /*(!) var */ speechSynthesis: SpeechSynthesis


  /**
  * Returns true if the status bar is visible; otherwise, returns false.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/statusbar)
  */

  /*(!) var */ statusbar: BarProp


  /**
  * Returns true if the toolbar is visible; otherwise, returns false.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/toolbar)
  */

  /*(!) var */ toolbar: BarProp


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/top) */

  /*(!) var */ top: WindowProxy?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/visualViewport) */

  /*(!) var */ visualViewport: VisualViewport?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window) */

  /*(!) var */ window: /*(!) Window & typeof globalThis */ Object?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/alert) */

  operation alert(message: /*(!) any */ Object? = empty)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/blur) */

  operation blur()

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/cancelIdleCallback) */

  operation cancelIdleCallback(handle: Number)

  /**
  * Closes the window.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/close)
  */

  operation close()

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/confirm) */

  operation confirm(message: Text? = empty): YesNo

  /**
  * Moves the focus to the window's browsing context, if any.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/focus)
  */

  operation focus()

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle) */

  operation getComputedStyle(elt: Element, pseudoElt: Text? = empty): CSSStyleDeclaration

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/getSelection) */

  operation getSelection(): Selection?

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/matchMedia) */

  operation matchMedia(query: Text): MediaQueryList

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveBy) */

  operation moveBy(x: Number, y: Number)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveTo) */

  operation moveTo(x: Number, y: Number)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/open) */

  operation open(url: Object? /*(!)Текст | URL | пусто*/ = empty, target: Text? = empty, features: Text? = empty): WindowProxy?

  /**
  * Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.
  *
  * Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.
  *
  * A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to "/". This default restricts the message to same-origin targets only.
  *
  * If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to "*".
  *
  * Throws a "DataCloneError" DOMException if transfer array contains duplicate objects or if message could not be cloned.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
  */

  operation postMessage(message: /*(!) any */ Object?, targetOrigin: Text, transfer: Список<Transferable>? = empty)

  operation postMessage(message: /*(!) any */ Object?, options: WindowPostMessageOptions? = empty)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/print) */

  operation print()

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/prompt) */

  operation prompt(message: Text? = empty, _default: Text? = empty): Text?

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback) */

  operation requestIdleCallback(callback: IdleRequestCallback, options: IdleRequestOptions? = empty): Number

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeBy) */

  operation resizeBy(x: Number, y: Number)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeTo) */

  operation resizeTo(width: Number, height: Number)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scroll) */

  operation scroll(options: ScrollToOptions? = empty)

  operation scroll(x: Number, y: Number)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollBy) */

  operation scrollBy(options: ScrollToOptions? = empty)

  operation scrollBy(x: Number, y: Number)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollTo) */

  operation scrollTo(options: ScrollToOptions? = empty)

  operation scrollTo(x: Number, y: Number)

  /**
  * Cancels the document load.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/stop)
  */

  operation stop()

  operation toString(): Text

  /**
  * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
  */

  operation dispatchEvent(event: Event): YesNo

  operation cancelAnimationFrame(handle: Number)

  operation requestAnimationFrame(callback: FrameRequestCallback): Number

  /**
  * Fires when the user aborts the download.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
  */

  /*(!) var */ onabort: (operation(this: Window, ev: UIEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event) */

  /*(!) var */ onanimationcancel: (operation(this: Window, ev: AnimationEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event) */

  /*(!) var */ onanimationend: (operation(this: Window, ev: AnimationEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event) */

  /*(!) var */ onanimationiteration: (operation(this: Window, ev: AnimationEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event) */

  /*(!) var */ onanimationstart: (operation(this: Window, ev: AnimationEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event) */

  /*(!) var */ onauxclick: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforeinput_event) */

  /*(!) var */ onbeforeinput: (operation(this: Window, ev: InputEvent): /*(!) any */ Object?)?


  /**
  * Fires when the object loses the input focus.
  * @param ev The focus event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
  */

  /*(!) var */ onblur: (operation(this: Window, ev: FocusEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event) */

  /*(!) var */ oncancel: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when playback is possible, but would require further buffering.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
  */

  /*(!) var */ oncanplay: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event) */

  /*(!) var */ oncanplaythrough: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Fires when the contents of the object or selection have changed.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
  */

  /*(!) var */ onchange: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Fires when the user clicks the left mouse button on the object
  * @param ev The mouse event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)
  */

  /*(!) var */ onclick: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event) */

  /*(!) var */ onclose: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Fires when the user clicks the right mouse button in the client area, opening the context menu.
  * @param ev The mouse event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
  */

  /*(!) var */ oncontextmenu: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event) */

  /*(!) var */ oncopy: (operation(this: Window, ev: ClipboardEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event) */

  /*(!) var */ oncuechange: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event) */

  /*(!) var */ oncut: (operation(this: Window, ev: ClipboardEvent): /*(!) any */ Object?)?


  /**
  * Fires when the user double-clicks the object.
  * @param ev The mouse event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
  */

  /*(!) var */ ondblclick: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /**
  * Fires on the source object continuously during a drag operation.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
  */

  /*(!) var */ ondrag: (operation(this: Window, ev: DragEvent): /*(!) any */ Object?)?


  /**
  * Fires on the source object when the user releases the mouse at the close of a drag operation.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
  */

  /*(!) var */ ondragend: (operation(this: Window, ev: DragEvent): /*(!) any */ Object?)?


  /**
  * Fires on the target element when the user drags the object to a valid drop target.
  * @param ev The drag event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
  */

  /*(!) var */ ondragenter: (operation(this: Window, ev: DragEvent): /*(!) any */ Object?)?


  /**
  * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
  * @param ev The drag event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
  */

  /*(!) var */ ondragleave: (operation(this: Window, ev: DragEvent): /*(!) any */ Object?)?


  /**
  * Fires on the target element continuously while the user drags the object over a valid drop target.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
  */

  /*(!) var */ ondragover: (operation(this: Window, ev: DragEvent): /*(!) any */ Object?)?


  /**
  * Fires on the source object when the user starts to drag a text selection or selected object.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
  */

  /*(!) var */ ondragstart: (operation(this: Window, ev: DragEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event) */

  /*(!) var */ ondrop: (operation(this: Window, ev: DragEvent): /*(!) any */ Object?)?


  /**
  * Occurs when the duration attribute is updated.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
  */

  /*(!) var */ ondurationchange: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when the media element is reset to its initial state.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
  */

  /*(!) var */ onemptied: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when the end of playback is reached.
  * @param ev The event
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
  */

  /*(!) var */ onended: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Fires when an error occurs during object loading.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
  */

  /*(!) var */ onerror: OnErrorEventHandler


  /**
  * Fires when the object receives focus.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
  */

  /*(!) var */ onfocus: (operation(this: Window, ev: FocusEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event) */

  /*(!) var */ onformdata: (operation(this: Window, ev: FormDataEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event) */

  /*(!) var */ ongotpointercapture: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/input_event) */

  /*(!) var */ oninput: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event) */

  /*(!) var */ oninvalid: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Fires when the user presses a key.
  * @param ev The keyboard event
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
  */

  /*(!) var */ onkeydown: (operation(this: Window, ev: KeyboardEvent): /*(!) any */ Object?)?


  /**
  * Fires when the user releases a key.
  * @param ev The keyboard event
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
  */

  /*(!) var */ onkeyup: (operation(this: Window, ev: KeyboardEvent): /*(!) any */ Object?)?


  /**
  * Fires immediately after the browser loads the object.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
  */

  /*(!) var */ onload: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when media data is loaded at the current playback position.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
  */

  /*(!) var */ onloadeddata: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when the duration and dimensions of the media have been determined.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
  */

  /*(!) var */ onloadedmetadata: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when Internet Explorer begins looking for media data.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
  */

  /*(!) var */ onloadstart: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lostpointercapture_event) */

  /*(!) var */ onlostpointercapture: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /**
  * Fires when the user clicks the object with either mouse button.
  * @param ev The mouse event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
  */

  /*(!) var */ onmousedown: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event) */

  /*(!) var */ onmouseenter: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event) */

  /*(!) var */ onmouseleave: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /**
  * Fires when the user moves the mouse over the object.
  * @param ev The mouse event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
  */

  /*(!) var */ onmousemove: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /**
  * Fires when the user moves the mouse pointer outside the boundaries of the object.
  * @param ev The mouse event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
  */

  /*(!) var */ onmouseout: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /**
  * Fires when the user moves the mouse pointer into the object.
  * @param ev The mouse event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
  */

  /*(!) var */ onmouseover: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /**
  * Fires when the user releases a mouse button while the mouse is over the object.
  * @param ev The mouse event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
  */

  /*(!) var */ onmouseup: (operation(this: Window, ev: MouseEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event) */

  /*(!) var */ onpaste: (operation(this: Window, ev: ClipboardEvent): /*(!) any */ Object?)?


  /**
  * Occurs when playback is paused.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
  */

  /*(!) var */ onpause: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when the play method is requested.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
  */

  /*(!) var */ onplay: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when the audio or video has started playing.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
  */

  /*(!) var */ onplaying: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event) */

  /*(!) var */ onpointercancel: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event) */

  /*(!) var */ onpointerdown: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event) */

  /*(!) var */ onpointerenter: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event) */

  /*(!) var */ onpointerleave: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event) */

  /*(!) var */ onpointermove: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event) */

  /*(!) var */ onpointerout: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event) */

  /*(!) var */ onpointerover: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event) */

  /*(!) var */ onpointerup: (operation(this: Window, ev: PointerEvent): /*(!) any */ Object?)?


  /**
  * Occurs to indicate progress while downloading media data.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
  */

  /*(!) var */ onprogress: (operation(this: Window, ev: ProgressEvent): /*(!) any */ Object?)?


  /**
  * Occurs when the playback rate is increased or decreased.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
  */

  /*(!) var */ onratechange: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Fires when the user resets a form.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
  */

  /*(!) var */ onreset: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event) */

  /*(!) var */ onresize: (operation(this: Window, ev: UIEvent): /*(!) any */ Object?)?


  /**
  * Fires when the user repositions the scroll box in the scroll bar on the object.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
  */

  /*(!) var */ onscroll: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event) */

  /*(!) var */ onscrollend: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event) */

  /*(!) var */ onsecuritypolicyviolation: (operation(this: Window, ev: SecurityPolicyViolationEvent): /*(!) any */ Object?)?


  /**
  * Occurs when the seek operation ends.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
  */

  /*(!) var */ onseeked: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when the current playback position is moved.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
  */

  /*(!) var */ onseeking: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Fires when the current selection changes.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
  */

  /*(!) var */ onselect: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event) */

  /*(!) var */ onselectionchange: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event) */

  /*(!) var */ onselectstart: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event) */

  /*(!) var */ onslotchange: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when the download has stopped.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
  */

  /*(!) var */ onstalled: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event) */

  /*(!) var */ onsubmit: (operation(this: Window, ev: SubmitEvent): /*(!) any */ Object?)?


  /**
  * Occurs if the load operation has been intentionally halted.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
  */

  /*(!) var */ onsuspend: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs to indicate the current playback position.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
  */

  /*(!) var */ ontimeupdate: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event) */

  /*(!) var */ ontoggle: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event) */

  /*(!) var */ ontouchcancel: (operation(this: Window, ev: TouchEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event) */

  /*(!) var */ ontouchend: (operation(this: Window, ev: TouchEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event) */

  /*(!) var */ ontouchmove: (operation(this: Window, ev: TouchEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event) */

  /*(!) var */ ontouchstart: (operation(this: Window, ev: TouchEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event) */

  /*(!) var */ ontransitioncancel: (operation(this: Window, ev: TransitionEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event) */

  /*(!) var */ ontransitionend: (operation(this: Window, ev: TransitionEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event) */

  /*(!) var */ ontransitionrun: (operation(this: Window, ev: TransitionEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event) */

  /*(!) var */ ontransitionstart: (operation(this: Window, ev: TransitionEvent): /*(!) any */ Object?)?


  /**
  * Occurs when the volume is changed, or playback is muted or unmuted.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
  */

  /*(!) var */ onvolumechange: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /**
  * Occurs when playback stops because the next frame of a video resource is not available.
  * @param ev The event.
  *
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
  */

  /*(!) var */ onwaiting: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event) */

  /*(!) var */ onwheel: (operation(this: Window, ev: WheelEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event) */

  /*(!) var */ onafterprint: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event) */

  /*(!) var */ onbeforeprint: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event) */

  /*(!) var */ onbeforeunload: (operation(this: Window, ev: BeforeUnloadEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event) */

  /*(!) var */ ongamepadconnected: (operation(this: Window, ev: GamepadEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event) */

  /*(!) var */ ongamepaddisconnected: (operation(this: Window, ev: GamepadEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event) */

  /*(!) var */ onhashchange: (operation(this: Window, ev: HashChangeEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event) */

  /*(!) var */ onlanguagechange: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event) */

  /*(!) var */ onmessage: (operation(this: Window, ev: MessageEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event) */

  /*(!) var */ onmessageerror: (operation(this: Window, ev: MessageEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event) */

  /*(!) var */ onoffline: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event) */

  /*(!) var */ ononline: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event) */

  /*(!) var */ onpagehide: (operation(this: Window, ev: PageTransitionEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event) */

  /*(!) var */ onpageshow: (operation(this: Window, ev: PageTransitionEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event) */

  /*(!) var */ onpopstate: (operation(this: Window, ev: PopStateEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event) */

  /*(!) var */ onrejectionhandled: (operation(this: Window, ev: PromiseRejectionEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event) */

  /*(!) var */ onstorage: (operation(this: Window, ev: StorageEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event) */

  /*(!) var */ onunhandledrejection: (operation(this: Window, ev: PromiseRejectionEvent): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unload_event) */

  /*(!) var */ onunload: (operation(this: Window, ev: Event): /*(!) any */ Object?)?


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/localStorage) */

  /*(!) var */ localStorage: Storage


  /**
  * [MDN Reference](https://developer.mozilla.org/docs/Web/API/caches)
  */

  /*(!) var */ caches: CacheStorage


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated) */

  /*(!) var */ crossOriginIsolated: YesNo


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/crypto_property) */

  /*(!) var */ crypto: Crypto


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/indexedDB) */

  /*(!) var */ indexedDB: IDBFactory


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/isSecureContext) */

  /*(!) var */ isSecureContext: YesNo


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/origin) */

  /*(!) var */ origin: Text


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/performance_property) */

  /*(!) var */ performance: Performance


  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/atob) */

  operation atob(data: Text): Text

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/btoa) */

  operation btoa(data: Text): Text

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearInterval) */

  operation clearInterval(id: Number?)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearTimeout) */

  operation clearTimeout(id: Number?)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap) */

  operation createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions? = empty): Promise<ImageBitmap>

  operation createImageBitmap(image: ImageBitmapSource, sx: Number, sy: Number, sw: Number, sh: Number, options: ImageBitmapOptions? = empty): Promise<ImageBitmap>

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/fetch) */

  operation fetch(input: Object? /*(!)RequestInfo | URL*/, init: RequestInit? = empty): Promise<Response>

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/queueMicrotask) */

  operation queueMicrotask(callback: VoidFunction)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/reportError) */

  operation reportError(e: /*(!) any */ Object?)

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/setInterval) */

  #js.МассивПараметров
  operation setInterval(handler: TimerHandler, timeout: Number? = empty, arguments: Список</*(!) any */ Object?>): Number

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/setTimeout) */

  #js.МассивПараметров
  operation setTimeout(handler: TimerHandler, timeout: Number? = empty, arguments: Список</*(!) any */ Object?>): Number

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/structuredClone) */

  operation structuredClone<T>(value: T, options: StructuredSerializeOptions? = empty): T

  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage) */

  /*(!) var */ sessionStorage: Storage


  operation addEventListener<K = /*(!) keyof WindowEventMap */ Object?>(type`: K, listener: operation(this: Window, ev: /*(!) WindowEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

  operation addEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | AddEventListenerOptions | пусто*/ = empty)

  operation removeEventListener<K = /*(!) keyof WindowEventMap */ Object?>(type`: K, listener: operation(this: Window, ev: /*(!) WindowEventMap[K] */ Object?): /*(!) any */ Object?, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

  operation removeEventListener(type`: Text, listener: EventListenerOrEventListenerObject, options: Object? /*(!)ДаНет | EventListenerOptions | пусто*/ = empty)

  type AlgorithmIdentifier = Object? /*(!)Algorithm | Текст*/

  type AllowSharedBufferSource = Object? /*(!)ArrayBuffer | ArrayBufferView*/

  type AutoFill = Object? /*(!)AutoFillBase | /*(!) `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<AutoFillAddressKind>}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}` */ Object?*/

  type AutoFillField = Object? /*(!)AutoFillNormalField | /*(!) `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}` */ Object?*/

  type AutoFillSection = /*(!) `section-${string}` */ Object?

  type BigInteger = Uint8Array

  type BinaryData = Object? /*(!)ArrayBuffer | ArrayBufferView*/

  type BlobPart = Object? /*(!)BufferSource | Blob | Текст*/

  type BodyInit = Object? /*(!)ReadableStream | XMLHttpRequestBodyInit*/

  type BufferSource = Object? /*(!)ArrayBufferView | ArrayBuffer*/

  type COSEAlgorithmIdentifier = Number

  type CSSKeywordish = Object? /*(!)Текст | CSSKeywordValue*/

  type CSSNumberish = Object? /*(!)Number | CSSNumericValue*/

  type CSSPerspectiveValue = Object? /*(!)CSSNumericValue | CSSKeywordish*/

  type CSSUnparsedSegment = Object? /*(!)Текст | CSSVariableReferenceValue*/

  type CanvasImageSource = Object? /*(!)HTMLOrSVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | OffscreenCanvas | VideoFrame*/

  type ClipboardItemData = Promise<Object? /*(!)Текст | Blob*/>

  type ClipboardItems = Список<ClipboardItem>

  type ConstrainBoolean = Object? /*(!)ДаНет | ConstrainBooleanParameters*/

  type ConstrainDOMString = Object? /*(!)Текст | Список<Текст> | ConstrainDOMStringParameters*/

  type ConstrainDouble = Object? /*(!)Number | ConstrainDoubleRange*/

  type ConstrainULong = Object? /*(!)Number | ConstrainULongRange*/

  type DOMHighResTimeStamp = Number

  type EpochTimeStamp = Number

  type EventListenerOrEventListenerObject = Object? /*(!)EventListener | EventListenerObject*/

  type FileSystemWriteChunkType = Object? /*(!)BufferSource | Blob | Текст | WriteParams*/

  type Float32List = Object? /*(!)Float32Array | Список<GLfloat>*/

  type FormDataEntryValue = Object? /*(!)File | Текст*/

  type GLbitfield = Number

  type GLboolean = ДаНет

  type GLclampf = Number

  type GLenum = Number

  type GLfloat = Number

  type GLint = Number

  type GLint64 = Number

  type GLintptr = Number

  type GLsizei = Number

  type GLsizeiptr = Number

  type GLuint = Number

  type GLuint64 = Number

  type HTMLOrSVGImageElement = Object? /*(!)HTMLImageElement | SVGImageElement*/

  type HTMLOrSVGScriptElement = Object? /*(!)HTMLScriptElement | SVGScriptElement*/

  type HashAlgorithmIdentifier = AlgorithmIdentifier

  type HeadersInit = Object? /*(!)Список<объект { _0: Text, _1: Text }> | Record<Текст, Текст> | Headers*/

  type IDBValidKey = Object? /*(!)Number | Текст | Date | BufferSource | Список<IDBValidKey>*/

  type ImageBitmapSource = Object? /*(!)CanvasImageSource | Blob | ImageData*/

  type Int32List = Object? /*(!)Int32Array | Список<GLint>*/

  type LineAndPositionSetting = Object? /*(!)Number | AutoKeyword*/

  type MediaProvider = Object? /*(!)MediaStream | MediaSource | Blob*/

  type MessageEventSource = Object? /*(!)WindowProxy | MessagePort | ServiceWorker*/

  type MutationRecordType = Object? /*(!)"attributes" | "characterData" | "childList"*/

  type NamedCurve = Текст

  type OffscreenRenderingContext = Object? /*(!)OffscreenCanvasRenderingContext2D | ImageBitmapRenderingContext | WebGLRenderingContext | WebGL2RenderingContext*/

  type OnBeforeUnloadEventHandler = OnBeforeUnloadEventHandlerNonNull?

  type OnErrorEventHandler = OnErrorEventHandlerNonNull?

  type OptionalPostfixToken<T = Текст> = Object? /*(!)/*(!) ` ${T}` */ Object? | ""*/

  type OptionalPrefixToken<T = Текст> = Object? /*(!)/*(!) `${T} ` */ Object? | ""*/

  type PerformanceEntryList = Список<PerformanceEntry>

  type ReadableStreamController<T> = Object? /*(!)ReadableStreamDefaultController<T> | ReadableByteStreamController*/

  type ReadableStreamReadResult<T> = Object? /*(!)ReadableStreamReadValueResult<T> | ReadableStreamReadDoneResult<T>*/

  type ReadableStreamReader<T> = Object? /*(!)ReadableStreamDefaultReader<T> | ReadableStreamBYOBReader*/

  type RenderingContext = Object? /*(!)CanvasRenderingContext2D | ImageBitmapRenderingContext | WebGLRenderingContext | WebGL2RenderingContext*/

  type ReportList = Список<Report>

  type RequestInfo = Object? /*(!)Request | Текст*/

  type TexImageSource = Object? /*(!)ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas | VideoFrame*/

  type TimerHandler = Object? /*(!)Текст | Function*/

  type Transferable = Object? /*(!)OffscreenCanvas | ImageBitmap | MessagePort | ReadableStream | WritableStream | TransformStream | VideoFrame | ArrayBuffer*/

  type Uint32List = Object? /*(!)Uint32Array | Список<GLuint>*/

  type VibratePattern = Object? /*(!)Number | Список<Number>*/

  type WindowProxy = Window

  type XMLHttpRequestBodyInit = Object? /*(!)Blob | BufferSource | FormData | URLSearchParams | Текст*/

  type AlignSetting = Object? /*(!)"center" | "end" | "left" | "right" | "start"*/

  type AlphaOption = Object? /*(!)"discard" | "keep"*/

  type AnimationPlayState = Object? /*(!)"finished" | "idle" | "paused" | "running"*/

  type AnimationReplaceState = Object? /*(!)"active" | "persisted" | "removed"*/

  type AppendMode = Object? /*(!)"segments" | "sequence"*/

  type AttestationConveyancePreference = Object? /*(!)"direct" | "enterprise" | "indirect" | "none"*/

  type AudioContextLatencyCategory = Object? /*(!)"balanced" | "interactive" | "playback"*/

  type AudioContextState = Object? /*(!)"closed" | "running" | "suspended"*/

  type AuthenticatorAttachment = Object? /*(!)"cross-platform" | "platform"*/

  type AuthenticatorTransport = Object? /*(!)"ble" | "hybrid" | "internal" | "nfc" | "usb"*/

  type AutoFillAddressKind = Object? /*(!)"billing" | "shipping"*/

  type AutoFillBase = Object? /*(!)"" | "off" | "on"*/

  type AutoFillContactField = Object? /*(!)"email" | "tel" | "tel-area-code" | "tel-country-code" | "tel-extension" | "tel-local" | "tel-local-prefix" | "tel-local-suffix" | "tel-national"*/

  type AutoFillContactKind = Object? /*(!)"home" | "mobile" | "work"*/

  type AutoFillCredentialField = "webauthn"

  type AutoFillNormalField = Object? /*(!)"additional-name" | "address-level1" | "address-level2" | "address-level3" | "address-level4" | "address-line1" | "address-line2" | "address-line3" | "bday-day" | "bday-month" | "bday-year" | "cc-csc" | "cc-exp" | "cc-exp-month" | "cc-exp-year" | "cc-family-name" | "cc-given-name" | "cc-name" | "cc-number" | "cc-type" | "country" | "country-name" | "current-password" | "family-name" | "given-name" | "honorific-prefix" | "honorific-suffix" | "name" | "new-password" | "one-time-code" | "organization" | "postal-code" | "street-address" | "transaction-amount" | "transaction-currency" | "username"*/

  type AutoKeyword = "auto"

  type AutomationRate = Object? /*(!)"a-rate" | "k-rate"*/

  type AvcBitstreamFormat = Object? /*(!)"annexb" | "avc"*/

  type BinaryType = Object? /*(!)"arraybuffer" | "blob"*/

  type BiquadFilterType = Object? /*(!)"allpass" | "bandpass" | "highpass" | "highshelf" | "lowpass" | "lowshelf" | "notch" | "peaking"*/

  type CSSMathOperator = Object? /*(!)"clamp" | "invert" | "max" | "min" | "negate" | "product" | "sum"*/

  type CSSNumericBaseType = Object? /*(!)"angle" | "flex" | "frequency" | "length" | "percent" | "resolution" | "time"*/

  type CanPlayTypeResult = Object? /*(!)"" | "maybe" | "probably"*/

  type CanvasDirection = Object? /*(!)"inherit" | "ltr" | "rtl"*/

  type CanvasFillRule = Object? /*(!)"evenodd" | "nonzero"*/

  type CanvasFontKerning = Object? /*(!)"auto" | "none" | "normal"*/

  type CanvasFontStretch = Object? /*(!)"condensed" | "expanded" | "extra-condensed" | "extra-expanded" | "normal" | "semi-condensed" | "semi-expanded" | "ultra-condensed" | "ultra-expanded"*/

  type CanvasFontVariantCaps = Object? /*(!)"all-petite-caps" | "all-small-caps" | "normal" | "petite-caps" | "small-caps" | "titling-caps" | "unicase"*/

  type CanvasLineCap = Object? /*(!)"butt" | "round" | "square"*/

  type CanvasLineJoin = Object? /*(!)"bevel" | "miter" | "round"*/

  type CanvasTextAlign = Object? /*(!)"center" | "end" | "left" | "right" | "start"*/

  type CanvasTextBaseline = Object? /*(!)"alphabetic" | "bottom" | "hanging" | "ideographic" | "middle" | "top"*/

  type CanvasTextRendering = Object? /*(!)"auto" | "geometricPrecision" | "optimizeLegibility" | "optimizeSpeed"*/

  type ChannelCountMode = Object? /*(!)"clamped-max" | "explicit" | "max"*/

  type ChannelInterpretation = Object? /*(!)"discrete" | "speakers"*/

  type ClientTypes = Object? /*(!)"all" | "sharedworker" | "window" | "worker"*/

  type CodecState = Object? /*(!)"closed" | "configured" | "unconfigured"*/

  type ColorGamut = Object? /*(!)"p3" | "rec2020" | "srgb"*/

  type ColorSpaceConversion = Object? /*(!)"default" | "none"*/

  type CompositeOperation = Object? /*(!)"accumulate" | "add" | "replace"*/

  type CompositeOperationOrAuto = Object? /*(!)"accumulate" | "add" | "auto" | "replace"*/

  type CompressionFormat = Object? /*(!)"deflate" | "deflate-raw" | "gzip"*/

  type CredentialMediationRequirement = Object? /*(!)"conditional" | "optional" | "required" | "silent"*/

  type DOMParserSupportedType = Object? /*(!)"application/xhtml+xml" | "application/xml" | "image/svg+xml" | "text/html" | "text/xml"*/

  type DirectionSetting = Object? /*(!)"" | "lr" | "rl"*/

  type DisplayCaptureSurfaceType = Object? /*(!)"browser" | "monitor" | "window"*/

  type DistanceModelType = Object? /*(!)"exponential" | "inverse" | "linear"*/

  type DocumentReadyState = Object? /*(!)"complete" | "interactive" | "loading"*/

  type DocumentVisibilityState = Object? /*(!)"hidden" | "visible"*/

  type EncodedVideoChunkType = Object? /*(!)"delta" | "key"*/

  type EndOfStreamError = Object? /*(!)"decode" | "network"*/

  type EndingType = Object? /*(!)"native" | "transparent"*/

  type FileSystemHandleKind = Object? /*(!)"directory" | "file"*/

  type FillMode = Object? /*(!)"auto" | "backwards" | "both" | "forwards" | "none"*/

  type FontDisplay = Object? /*(!)"auto" | "block" | "fallback" | "optional" | "swap"*/

  type FontFaceLoadStatus = Object? /*(!)"error" | "loaded" | "loading" | "unloaded"*/

  type FontFaceSetLoadStatus = Object? /*(!)"loaded" | "loading"*/

  type FullscreenNavigationUI = Object? /*(!)"auto" | "hide" | "show"*/

  type GamepadHapticActuatorType = "vibration"

  type GamepadHapticEffectType = "dual-rumble"

  type GamepadHapticsResult = Object? /*(!)"complete" | "preempted"*/

  type GamepadMappingType = Object? /*(!)"" | "standard" | "xr-standard"*/

  type GlobalCompositeOperation = Object? /*(!)"color" | "color-burn" | "color-dodge" | "copy" | "darken" | "destination-atop" | "destination-in" | "destination-out" | "destination-over" | "difference" | "exclusion" | "hard-light" | "hue" | "lighten" | "lighter" | "luminosity" | "multiply" | "overlay" | "saturation" | "screen" | "soft-light" | "source-atop" | "source-in" | "source-out" | "source-over" | "xor"*/

  type HardwareAcceleration = Object? /*(!)"no-preference" | "prefer-hardware" | "prefer-software"*/

  type HdrMetadataType = Object? /*(!)"smpteSt2086" | "smpteSt2094-10" | "smpteSt2094-40"*/

  type IDBCursorDirection = Object? /*(!)"next" | "nextunique" | "prev" | "prevunique"*/

  type IDBRequestReadyState = Object? /*(!)"done" | "pending"*/

  type IDBTransactionDurability = Object? /*(!)"default" | "relaxed" | "strict"*/

  type IDBTransactionMode = Object? /*(!)"readonly" | "readwrite" | "versionchange"*/

  type ImageOrientation = Object? /*(!)"flipY" | "from-image" | "none"*/

  type ImageSmoothingQuality = Object? /*(!)"high" | "low" | "medium"*/

  type InsertPosition = Object? /*(!)"afterbegin" | "afterend" | "beforebegin" | "beforeend"*/

  type IterationCompositeOperation = Object? /*(!)"accumulate" | "replace"*/

  type KeyFormat = Object? /*(!)"jwk" | "pkcs8" | "raw" | "spki"*/

  type KeyType = Object? /*(!)"private" | "public" | "secret"*/

  type KeyUsage = Object? /*(!)"decrypt" | "deriveBits" | "deriveKey" | "encrypt" | "sign" | "unwrapKey" | "verify" | "wrapKey"*/

  type LatencyMode = Object? /*(!)"quality" | "realtime"*/

  type LineAlignSetting = Object? /*(!)"center" | "end" | "start"*/

  type LockMode = Object? /*(!)"exclusive" | "shared"*/

  type MIDIPortConnectionState = Object? /*(!)"closed" | "open" | "pending"*/

  type MIDIPortDeviceState = Object? /*(!)"connected" | "disconnected"*/

  type MIDIPortType = Object? /*(!)"input" | "output"*/

  type MediaDecodingType = Object? /*(!)"file" | "media-source" | "webrtc"*/

  type MediaDeviceKind = Object? /*(!)"audioinput" | "audiooutput" | "videoinput"*/

  type MediaEncodingType = Object? /*(!)"record" | "webrtc"*/

  type MediaKeyMessageType = Object? /*(!)"individualization-request" | "license-release" | "license-renewal" | "license-request"*/

  type MediaKeySessionClosedReason = Object? /*(!)"closed-by-application" | "hardware-context-reset" | "internal-error" | "release-acknowledged" | "resource-evicted"*/

  type MediaKeySessionType = Object? /*(!)"persistent-license" | "temporary"*/

  type MediaKeyStatus = Object? /*(!)"expired" | "internal-error" | "output-downscaled" | "output-restricted" | "released" | "status-pending" | "usable" | "usable-in-future"*/

  type MediaKeysRequirement = Object? /*(!)"not-allowed" | "optional" | "required"*/

  type MediaSessionAction = Object? /*(!)"nexttrack" | "pause" | "play" | "previoustrack" | "seekbackward" | "seekforward" | "seekto" | "skipad" | "stop"*/

  type MediaSessionPlaybackState = Object? /*(!)"none" | "paused" | "playing"*/

  type MediaStreamTrackState = Object? /*(!)"ended" | "live"*/

  type NavigationTimingType = Object? /*(!)"back_forward" | "navigate" | "prerender" | "reload"*/

  type NotificationDirection = Object? /*(!)"auto" | "ltr" | "rtl"*/

  type NotificationPermission = Object? /*(!)"default" | "denied" | "granted"*/

  type OffscreenRenderingContextId = Object? /*(!)"2d" | "bitmaprenderer" | "webgl" | "webgl2" | "webgpu"*/

  type OrientationType = Object? /*(!)"landscape-primary" | "landscape-secondary" | "portrait-primary" | "portrait-secondary"*/

  type OscillatorType = Object? /*(!)"custom" | "sawtooth" | "sine" | "square" | "triangle"*/

  type OverSampleType = Object? /*(!)"2x" | "4x" | "none"*/

  type PanningModelType = Object? /*(!)"HRTF" | "equalpower"*/

  type PaymentComplete = Object? /*(!)"fail" | "success" | "unknown"*/

  type PermissionName = Object? /*(!)"geolocation" | "notifications" | "persistent-storage" | "push" | "screen-wake-lock" | "xr-spatial-tracking"*/

  type PermissionState = Object? /*(!)"denied" | "granted" | "prompt"*/

  type PlaybackDirection = Object? /*(!)"alternate" | "alternate-reverse" | "normal" | "reverse"*/

  type PositionAlignSetting = Object? /*(!)"auto" | "center" | "line-left" | "line-right"*/

  type PredefinedColorSpace = Object? /*(!)"display-p3" | "srgb"*/

  type PremultiplyAlpha = Object? /*(!)"default" | "none" | "premultiply"*/

  type PresentationStyle = Object? /*(!)"attachment" | "inline" | "unspecified"*/

  type PublicKeyCredentialType = "public-key"

  type PushEncryptionKeyName = Object? /*(!)"auth" | "p256dh"*/

  type RTCBundlePolicy = Object? /*(!)"balanced" | "max-bundle" | "max-compat"*/

  type RTCDataChannelState = Object? /*(!)"closed" | "closing" | "connecting" | "open"*/

  type RTCDegradationPreference = Object? /*(!)"balanced" | "maintain-framerate" | "maintain-resolution"*/

  type RTCDtlsTransportState = Object? /*(!)"closed" | "connected" | "connecting" | "failed" | "new"*/

  type RTCEncodedVideoFrameType = Object? /*(!)"delta" | "empty" | "key"*/

  type RTCErrorDetailType = Object? /*(!)"data-channel-failure" | "dtls-failure" | "fingerprint-failure" | "hardware-encoder-error" | "hardware-encoder-not-available" | "sctp-failure" | "sdp-syntax-error"*/

  type RTCIceCandidateType = Object? /*(!)"host" | "prflx" | "relay" | "srflx"*/

  type RTCIceComponent = Object? /*(!)"rtcp" | "rtp"*/

  type RTCIceConnectionState = Object? /*(!)"checking" | "closed" | "completed" | "connected" | "disconnected" | "failed" | "new"*/

  type RTCIceGathererState = Object? /*(!)"complete" | "gathering" | "new"*/

  type RTCIceGatheringState = Object? /*(!)"complete" | "gathering" | "new"*/

  type RTCIceProtocol = Object? /*(!)"tcp" | "udp"*/

  type RTCIceTcpCandidateType = Object? /*(!)"active" | "passive" | "so"*/

  type RTCIceTransportPolicy = Object? /*(!)"all" | "relay"*/

  type RTCIceTransportState = Object? /*(!)"checking" | "closed" | "completed" | "connected" | "disconnected" | "failed" | "new"*/

  type RTCPeerConnectionState = Object? /*(!)"closed" | "connected" | "connecting" | "disconnected" | "failed" | "new"*/

  type RTCPriorityType = Object? /*(!)"high" | "low" | "medium" | "very-low"*/

  type RTCRtcpMuxPolicy = "require"

  type RTCRtpTransceiverDirection = Object? /*(!)"inactive" | "recvonly" | "sendonly" | "sendrecv" | "stopped"*/

  type RTCSctpTransportState = Object? /*(!)"closed" | "connected" | "connecting"*/

  type RTCSdpType = Object? /*(!)"answer" | "offer" | "pranswer" | "rollback"*/

  type RTCSignalingState = Object? /*(!)"closed" | "have-local-offer" | "have-local-pranswer" | "have-remote-offer" | "have-remote-pranswer" | "stable"*/

  type RTCStatsIceCandidatePairState = Object? /*(!)"failed" | "frozen" | "in-progress" | "inprogress" | "succeeded" | "waiting"*/

  type RTCStatsType = Object? /*(!)"candidate-pair" | "certificate" | "codec" | "data-channel" | "inbound-rtp" | "local-candidate" | "media-source" | "outbound-rtp" | "peer-connection" | "remote-candidate" | "remote-inbound-rtp" | "remote-outbound-rtp" | "transport"*/

  type ReadableStreamReaderMode = "byob"

  type ReadableStreamType = "bytes"

  type ReadyState = Object? /*(!)"closed" | "ended" | "open"*/

  type RecordingState = Object? /*(!)"inactive" | "paused" | "recording"*/

  type ReferrerPolicy = Object? /*(!)"" | "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url"*/

  type RemotePlaybackState = Object? /*(!)"connected" | "connecting" | "disconnected"*/

  type RequestCache = Object? /*(!)"default" | "force-cache" | "no-cache" | "no-store" | "only-if-cached" | "reload"*/

  type RequestCredentials = Object? /*(!)"include" | "omit" | "same-origin"*/

  type RequestDestination = Object? /*(!)"" | "audio" | "audioworklet" | "document" | "embed" | "font" | "frame" | "iframe" | "image" | "manifest" | "object" | "paintworklet" | "report" | "script" | "sharedworker" | "style" | "track" | "video" | "worker" | "xslt"*/

  type RequestMode = Object? /*(!)"cors" | "navigate" | "no-cors" | "same-origin"*/

  type RequestRedirect = Object? /*(!)"error" | "follow" | "manual"*/

  type ResidentKeyRequirement = Object? /*(!)"discouraged" | "preferred" | "required"*/

  type ResizeObserverBoxOptions = Object? /*(!)"border-box" | "content-box" | "device-pixel-content-box"*/

  type ResizeQuality = Object? /*(!)"high" | "low" | "medium" | "pixelated"*/

  type ResponseType = Object? /*(!)"basic" | "cors" | "default" | "error" | "opaque" | "opaqueredirect"*/

  type ScrollBehavior = Object? /*(!)"auto" | "instant" | "smooth"*/

  type ScrollLogicalPosition = Object? /*(!)"center" | "end" | "nearest" | "start"*/

  type ScrollRestoration = Object? /*(!)"auto" | "manual"*/

  type ScrollSetting = Object? /*(!)"" | "up"*/

  type SecurityPolicyViolationEventDisposition = Object? /*(!)"enforce" | "report"*/

  type SelectionMode = Object? /*(!)"end" | "preserve" | "select" | "start"*/

  type ServiceWorkerState = Object? /*(!)"activated" | "activating" | "installed" | "installing" | "parsed" | "redundant"*/

  type ServiceWorkerUpdateViaCache = Object? /*(!)"all" | "imports" | "none"*/

  type ShadowRootMode = Object? /*(!)"closed" | "open"*/

  type SlotAssignmentMode = Object? /*(!)"manual" | "named"*/

  type SpeechSynthesisErrorCode = Object? /*(!)"audio-busy" | "audio-hardware" | "canceled" | "interrupted" | "invalid-argument" | "language-unavailable" | "network" | "not-allowed" | "synthesis-failed" | "synthesis-unavailable" | "text-too-long" | "voice-unavailable"*/

  type TextTrackKind = Object? /*(!)"captions" | "chapters" | "descriptions" | "metadata" | "subtitles"*/

  type TextTrackMode = Object? /*(!)"disabled" | "hidden" | "showing"*/

  type TouchType = Object? /*(!)"direct" | "stylus"*/

  type TransferFunction = Object? /*(!)"hlg" | "pq" | "srgb"*/

  type UserVerificationRequirement = Object? /*(!)"discouraged" | "preferred" | "required"*/

  type VideoColorPrimaries = Object? /*(!)"bt470bg" | "bt709" | "smpte170m"*/

  type VideoEncoderBitrateMode = Object? /*(!)"constant" | "quantizer" | "variable"*/

  type VideoFacingModeEnum = Object? /*(!)"environment" | "left" | "right" | "user"*/

  type VideoMatrixCoefficients = Object? /*(!)"bt470bg" | "bt709" | "rgb" | "smpte170m"*/

  type VideoPixelFormat = Object? /*(!)"BGRA" | "BGRX" | "I420" | "I420A" | "I422" | "I444" | "NV12" | "RGBA" | "RGBX"*/

  type VideoTransferCharacteristics = Object? /*(!)"bt709" | "iec61966-2-1" | "smpte170m"*/

  type WakeLockType = "screen"

  type WebGLPowerPreference = Object? /*(!)"default" | "high-performance" | "low-power"*/

  type WebTransportCongestionControl = Object? /*(!)"default" | "low-latency" | "throughput"*/

  type WebTransportErrorSource = Object? /*(!)"session" | "stream"*/

  type WorkerType = Object? /*(!)"classic" | "module"*/

  type WriteCommandType = Object? /*(!)"seek" | "truncate" | "write"*/

  type XMLHttpRequestResponseType = Object? /*(!)"" | "arraybuffer" | "blob" | "document" | "json" | "text"*/
}