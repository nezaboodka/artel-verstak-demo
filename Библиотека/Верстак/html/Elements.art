
import JS = Artel.JavaScript
import DOM = Browser
import Реактроник


operation Section<M = Object?>(
  formula: Delegate<El<DOM.HTMLElement, M>>? = none,
  key: Text? = none,
  mode: Mode? = none,
  activation: Delegate<El<DOM.HTMLElement, M>>? = none,
  deactivation: Delegate<El<DOM.HTMLElement, M>>? = none,
  triggers: Object? = none,
  preset: RxNodeDecl<El<DOM.HTMLElement, M>>? = none):
  RxNode<El<DOM.HTMLElement, M>>
{
  result = SectionImpl<M>(`(formula, key, mode, activation, deactivation, triggers, preset))
}


operation Table<M = Object?, R = None>(
  formula: Delegate<El<DOM.HTMLElement, M>>? = none,
  key: Text? = none,
  mode: Mode? = none,
  activation: Delegate<El<DOM.HTMLElement, M>>? = none,
  deactivation: Delegate<El<DOM.HTMLElement, M>>? = none,
  triggers: Object? = none,
  preset: RxNodeDecl<El<DOM.HTMLElement, M>>? = none):
  RxNode<El<DOM.HTMLElement, M>>
{
  result = TableImpl<M>(`(formula, key, mode, activation, deactivation, triggers, preset))
}


operation Note(
  text: Text,
  formatted: YesNo? = none,
  formula: Delegate<El<DOM.HTMLElement, None>>? = none,
  key: Text? = none,
  mode: Mode? = none,
  activation: Delegate<El<DOM.HTMLElement, None>>? = none,
  deactivation: Delegate<El<DOM.HTMLElement, None>>? = none,
  triggers: Object? = none,
  preset: RxNodeDecl<El<DOM.HTMLElement, None>>? = none):
  RxNode<El<DOM.HTMLElement, None>>
{
  result = NoteImpl(text, formatted, `(formula, key, mode, activation, deactivation, triggers, preset))
}


operation Group<M = Object?, R = None>(
  formula: Delegate<El<DOM.HTMLElement, M>>? = none,
  key: Text? = none,
  mode: Mode? = none,
  activation: Delegate<El<DOM.HTMLElement, M>>? = none,
  deactivation: Delegate<El<DOM.HTMLElement, M>>? = none,
  triggers: Object? = none,
  preset: RxNodeDecl<El<DOM.HTMLElement, M>>? = none):
  RxNode<El<DOM.HTMLElement, M>>
{
  result = GroupImpl<M, R>(`(formula, key, mode, activation, deactivation, triggers, preset))
}


operation SyntheticElement<M = Object?>(
  formula: Delegate<El<None, M>>? = none,
  key: Text? = none,
  mode: Mode? = none,
  activation: Delegate<El<None, M>>? = none,
  deactivation: Delegate<El<None, M>>? = none,
  triggers: Object? = none,
  preset: RxNodeDecl<El<None, M>>? = none):
  RxNode<El<None, M>>
{
  result = SyntheticElementImpl<M>(`(formula, key, mode, activation, deactivation, triggers, preset))
}


external
{
  #JS.ВнешняяРеализация(модуль = "verstak")
  #JS.НастоящееИмя("row")
  operation row<T = None>(builder: None | operation(element: None): T, shift-cursor-down: Number? = none)

  #JS.ВнешняяРеализация(модуль = "verstak")
  #JS.НастоящееИмя("startNewRow")
  operation start-new-row(shift-cursor-down: Number? = none)

  #JS.ВнешняяРеализация(модуль = "verstak")
  #JS.НастоящееИмя("cursor")
  operation cursor(areaParams: ElArea)

  #JS.ВнешняяРеализация(модуль = "verstak")
  #JS.НастоящееИмя("Handling")
  operation Handling<M = Object?>(update: Delegate<El<None, M>>): RxNode<El<None, M>>

  #JS.ВнешняяРеализация(модуль = "verstak")
  type VerstakElementDriver<T: DOM.HTMLElement> = object HtmlElementDriver<T>
  {
    operation update(node: RxNode<El<T>>)
  }
}

hidden external
{
  #JS.ВнешняяРеализация(модуль = "verstak")
  #JS.НастоящееИмя("Section")
  operation SectionImpl<M = Object?>(declaration: RxNodeDecl<El<DOM.HTMLElement, M>>? = none, preset: RxNodeDecl<El<DOM.HTMLElement, M>>? = none): RxNode<El<DOM.HTMLElement, M>>


  #JS.ВнешняяРеализация(модуль = "verstak")
  #JS.НастоящееИмя("Table")
  operation TableImpl<M = Object?, R = None>(declaration: RxNodeDecl<El<DOM.HTMLElement, M>>? = none, preset: RxNodeDecl<El<DOM.HTMLElement, M>>? = none): RxNode<El<DOM.HTMLElement, M>>


  #JS.ВнешняяРеализация(модуль = "verstak")
  #JS.НастоящееИмя("Note")
  operation NoteImpl(content: Text, formatted: YesNo? = none, declaration: RxNodeDecl<El<DOM.HTMLElement, None>>? = none): RxNode<El<DOM.HTMLElement, None>>


  #JS.ВнешняяРеализация(модуль = "verstak")
  #JS.НастоящееИмя("Group")
  operation GroupImpl<M = Object?, R = None>(declaration: RxNodeDecl<El<DOM.HTMLElement, M>>? = none, preset: RxNodeDecl<El<DOM.HTMLElement, M>>? = none): RxNode<El<DOM.HTMLElement, M>>


  #JS.ВнешняяРеализация(модуль = "verstak")
  #JS.НастоящееИмя("SyntheticElement")
  operation SyntheticElementImpl<M = Object?>(declaration: RxNodeDecl<El<None, M>>? = none, preset: RxNodeDecl<El<None, M>>? = none): RxNode<El<None, M>>
}
