
import JS = Artel.JavaScript
import DOM = Browser
import Реактроник

external
{
  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElDriver<T: DOM.Element, M = Object?> = object BaseDriver<El<T, M>>
  {
    operation allocate(node: RxNode<El<T, M>>): El<T, M>
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type El<T = Object?, M = Object?> = aspect
  {
    guarded
    node: RxNode<El<T, M>>

    native: T

    model: M

    kind: ElKind

    area: ElArea

    width: Range

    width-just-min: Text

    width-just-growth: Number

    height: Range

    height-just-min: Text

    height-just-growth: Number

    content-alignment: Align

    bounds-alignment: Align

    content-wrapping: YesNo

    overlay-visible: YesNo?

    guarded
    style: DOM.CSSStyleDeclaration
  
    operation use-styling-preset(styling-preset-name: Text, enabled: YesNo? = none)
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElKind = variant
  {
    section // = 0
    table // = 1
    note // = 2
    group // = 3
    part // = 4
    cursor // = 5
    native // = 6
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElCoords = aspect
  {
    x1: Number
    y1: Number
    x2: Number
    y2: Number
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type Align = variant
  {
    default   // = 16
    stretch   // = 0
    left      // = 1
    center-x  // = 2
    right     // = 3
    top       // = 4
    center-y  // = 8
    bottom    // = 12
    center    // = 10
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElArea = None | Text | object
  {
    cells-over-width: Number?
    cells-over-height: Number?
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElImpl<T: DOM.Element = Object?, M = Object?> = object El<T, M>
  {
    guarded
    node: RxNode<El<T, M>>;

    max-column-count: Number

    max-row-count: Number

    cursor-position: CursorPosition?

    native: T;

    model: M;

    // hidden
    // _kind

    // hidden
    // _area

    // hidden
    // _coords

    // hidden
    // _widthGrowth

    // hidden
    // _minWidth

    // hidden
    // _maxWidth

    // hidden
    // _heightGrowth

    // hidden
    // _minHeight

    // hidden
    // _maxHeight

    // hidden
    // _contentAlignment

    // hidden
    // _elementAlignment

    // hidden
    // _contentWrapping

    // hidden
    // _overlayVisible

    // hidden
    // _hasStyles

    on create(node: RxNode<El<T, M>>)

    operation prepare-for-update()

    guarded
    is-section: YesNo

    guarded
    is-table: YesNo

    guarded
    is-auxiliary: YesNo

    kind: ElKind

    area: ElArea

    width-growth: Number

    min-width: Text

    max-width: Text

    height-growth: Number

    min-height: Text

    max-height: Text

    content-alignment: Align

    bounds-alignment: Align

    content-wrapping: YesNo

    overlay-visible: YesNo?

    guarded
    style: DOM.CSSStyleDeclaration

    operation use-styling-preset(styling-preset-name: Text, enabled: YesNo? = none)

    // hidden
    // rowBreak
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type CursorPosition = aspect
  {
    x: Number

    y: Number

    running-max-x: Number

    running-max-y: Number

    flags: CursorFlags

    on create(prev: CursorPosition)
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type CursorFlags = variant
  {
    none` = 0
    own-cursor-position = 1
    uses-running-column-count = 2
    uses-running-row-count = 4
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type CursorCommand = object
  {
    absolute: Text?
    column-shift: Number?
    row-shift: Number?
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type CursorCommandDriver = object ElDriver<DOM.Element, Object?>
  {
    on create()
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type Apply = object
  {
    global
    operation kind<T: DOM.Element>(element: El<T, Object?>, value: ElKind)

    global
    operation coords<T: DOM.Element>(element: El<T, Object?>, value: ElCoords?)

    global
    operation width-growth<T: DOM.Element>(element: El<T, Object?>, value: Number)

    global
    operation min-width<T: DOM.Element>(element: El<T, Object?>, value: Text)

    global
    operation apply-max-width<T: DOM.Element>(element: El<T, Object?>, value: Text)

    global
    operation height-growth<T: DOM.Element>(element: El<T, Object?>, value: Number)

    global
    operation min-height<T: DOM.Element>(element: El<T, Object?>, value: Text)

    global
    operation max-height<T: DOM.Element>(element: El<T, Object?>, value: Text)

    global
    operation content-alignment<T: DOM.Element>(element: El<T, Object?>, value: Align)

    global
    operation bounds-alignment<T: DOM.Element>(element: El<T, Object?>, value: Align)

    global
    operation content-wrapping<T: DOM.Element>(element: El<T, Object?>, value: YesNo)

    global
    operation overlay-visible<T: DOM.Element>(element: El<T, Object?>, value: YesNo?)

    global
    operation style<T: DOM.Element>(element: El<T, Object?>, secondary: YesNo, styleName: Text, enabled: YesNo? = none)
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  const Constants: object
  {
    element: Text

    partition: Text

    group: Text

    layouts: List<Text>

    key-attr-name: Text

    kind-attr-name: Text
  }
}

// #JS.ВнешняяРеализация(модуль = "verstak")
type Range = object
{
  const min: Text?
  const max: Text?
  const growth: Number?
}


// #JS.ВнешняяРеализация(модуль = "verstak")
type MarkedRange = object Range
{
  const marker: Text?
}
