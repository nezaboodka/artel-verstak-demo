
import JS = Artel.JavaScript
import DOM = Browser
import Реактроник

external
{
  #JS.ВнешняяРеализация(модуль = "verstak")
  type El<T = Object?, M = Object?> = aspect
  {
    hidden set
    {
      node: RxNode<El<T, M>>

      index: Integer
    }

    native: T

    model: M

    kind: ElKind

    area: ElArea

    width: Range

    height: Range

    alignment: Align

    alignment-inside: Align

    stretching-strength-x: Number

    stretching-strength-y: Number

    content-wrapping: YesNo

    overlay-visible: YesNo?

    split-view: SplitView?

    hidden set
    style: DOM.CSSStyleDeclaration
  
    operation use-styling-preset(styling-preset-name: Text, enabled: YesNo? = none)
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElKind = variant
  {
    section  // = 0
    table    // = 1
    note     // = 2
    group    // = 3
    part     // = 4
    splitter // = 5
    cursor   // = 6
    native   // = 7
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElCoords = aspect
  {
    x1: Number
    y1: Number
    x2: Number
    y2: Number
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type Align = variant
  {
    default    // = 0
    left       // = 4
    center-x    // = 5
    right      // = 6
    stretch-x  // = 7
    top        // = 32
    center-y   // = 40
    bottom     // = 48
    stretch-y  // = 56
    center-x-y  // = 45
    stretch-x-y // = 63
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElArea = None | Text | object
  {
    cells-over-width: Number?
    cells-over-height: Number?
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type SplitView = variant
  {
    horizontal // = 0
    vertical   // = 1
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElDriver<T: DOM.Element, M = Object?> = object BaseDriver<El<T, M>>
  {
    operation allocate(node: RxNode<El<T, M>>): El<T, M>
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElImpl<T: DOM.Element = Object?, M = Object?> = object El<T, M>
  {
    hidden set
    {
      node: RxNode<El<T, M>>

      index: Integer
    }

    max-column-count: Number

    max-row-count: Number

    layout-into: ElLayoutInfo?

    native: T;

    model: M;

    // hidden
    // _kind

    // hidden
    // _area

    // hidden
    // _coords

    // hidden
    // _width

    // hidden
    // _height

    // hidden
    // _alignment

    // hidden
    // _alignment-inside

    // hidden
    // _stretching-stretgth-x

    // hidden
    // _stretching-stretgth-y

    // hidden
    // _content-wrapping

    // hidden
    // _overlay-visible

    // hidden
    // _split-view

    // hidden
    // _has-styles

    on create(node: RxNode<El<T, M>>)

    operation prepare-for-update()

    hidden set
    is-section: YesNo

    hidden set
    is-table: YesNo

    hidden set
    is-auxiliary: YesNo

    kind: ElKind

    area: ElArea

    width: Range

    height: Range

    alignment: Align

    alignment-inside: Align

    stretching-stretgth-x: Number

    stretching-stretgth-y: Number

    content-wrapping: YesNo

    overlay-visible: YesNo?

    split-view: SplitView?

    hidden set
    style: DOM.CSSStyleDeclaration

    operation use-styling-preset(styling-preset-name: Text, enabled: YesNo? = none)

    // hidden
    // row-break
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElLayoutInfo = aspect
  {
    x: Number

    y: Number

    running-max-x: Number

    running-max-y: Number

    aligner-x: ElImpl?

    aligner-y: ElImpl?

    flags: ElLayoutInfoFlags

    effective-size-px: Number

    offset-x-px: Number

    offset-y-px: Number

    container-size-x-px: Number

    container-size-y-px: Number

    on create(prev: ElLayoutInfo)
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type ElLayoutInfoFlags = variant
  {
    none`                      // = 0
    own-cursor-position        // = 1
    uses-running-column-count  // = 2
    uses-running-row-count     // = 4
    childrenRelayoutIsNeeded   // = 8
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type CursorCommand = object
  {
    absolute: Text?
    column-shift: Number?
    row-shift: Number?
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type CursorCommandDriver = object ElDriver<DOM.Element, Object?>
  {
    on create()
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  type Apply = object
  {
    global
    operation kind<T: DOM.Element>(element: El<T, Object?>, value: ElKind)

    global
    operation coords<T: DOM.Element>(element: El<T, Object?>, value: ElCoords?)

    global
    operation width-growth<T: DOM.Element>(element: El<T, Object?>, value: Number)

    global
    operation min-width<T: DOM.Element>(element: El<T, Object?>, value: Text)

    global
    operation apply-max-width<T: DOM.Element>(element: El<T, Object?>, value: Text)

    global
    operation height-growth<T: DOM.Element>(element: El<T, Object?>, value: Number)

    global
    operation min-height<T: DOM.Element>(element: El<T, Object?>, value: Text)

    global
    operation max-height<T: DOM.Element>(element: El<T, Object?>, value: Text)

    global
    operation content-alignment<T: DOM.Element>(element: El<T, Object?>, value: Align)

    global
    operation bounds-alignment<T: DOM.Element>(element: El<T, Object?>, value: Align)

    global
    operation content-wrapping<T: DOM.Element>(element: El<T, Object?>, value: YesNo)

    global
    operation overlay-visible<T: DOM.Element>(element: El<T, Object?>, value: YesNo?)

    global
    operation style<T: DOM.Element>(element: El<T, Object?>, secondary: YesNo, styleName: Text, enabled: YesNo? = none)
  }


  #JS.ВнешняяРеализация(модуль = "verstak")
  const Constants: object
  {
    element: Text

    partition: Text

    splitter: Text

    group: Text

    layouts: List<Text>

    key-attr-name: Text

    kind-attr-name: Text
  }
}

// #JS.ВнешняяРеализация(модуль = "verstak")
type Range = object
{
  const min: Text?
  const max: Text?
}


// #JS.ВнешняяРеализация(модуль = "verstak")
type MarkedRange = object Range
{
  const marker: Text?
}
