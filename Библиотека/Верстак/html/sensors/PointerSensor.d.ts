import { PointerButton, BasePointerSensor } from "./BasePointerSensor.js";
import { FocusSensor } from "./FocusSensor.js";
import { KeyboardModifiers } from "./KeyboardSensor.js";
import { WindowSensor } from "./WindowSensor.js";
export declare class PointerSensor extends BasePointerSensor {
    pointerButton: PointerButton;
    private clickable;
    hotPositionX: number;
    hotPositionY: number;
    clicking: unknown;
    clicked: unknown;
    clickX: number;
    clickY: number;
    private tryingDragging;
    draggableData: unknown;
    dragSource: unknown;
    dragTarget: unknown;
    dragTargetWindow: unknown;
    previousDragTarget: unknown;
    dragStarted: boolean;
    dragFinished: boolean;
    startX: number;
    startY: number;
    private draggingData;
    dropAllowed: boolean;
    draggingOver: boolean;
    positionX: number;
    positionY: number;
    modifiers: KeyboardModifiers;
    dropX: number;
    dropY: number;
    dropped: boolean;
    immediatePositionX: number;
    immediatePositionY: number;
    immediateModifiers: KeyboardModifiers;
    static readonly DraggingThreshold = 4;
    constructor(element: HTMLElement | SVGElement, focusSensor: FocusSensor, windowSensor: WindowSensor);
    getData(): unknown;
    setData(value: unknown): void;
    listen(enabled?: boolean): void;
    protected onPointerDown(e: PointerEvent): void;
    protected onPointerMove(e: PointerEvent): void;
    protected onPointerUp(e: PointerEvent): void;
    protected onLostPointerCapture(e: PointerEvent): void;
    protected onKeyDown(e: KeyboardEvent): void;
    protected moveOver(e: PointerEvent): void;
    protected tryClickingOrDragging(e: PointerEvent): void;
    protected clickingOver(e: PointerEvent): void;
    protected click(e: PointerEvent): void;
    protected startDragging(e: PointerEvent): void;
    protected dragOver(e: PointerEvent): void;
    protected drop(e: PointerEvent): void;
    protected finishDragging(): void;
    protected cancelDragging(): void;
    protected reset(): void;
    protected updateClicking(e: PointerEvent): boolean;
    private _getDefaultDataForSensor;
    protected updateDragTarget(e: PointerEvent): void;
    protected whenClickingOrDragging(): void;
    protected whenMoving(): void;
}
